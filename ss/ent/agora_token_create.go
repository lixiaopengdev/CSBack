// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/agora_token"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgoraTokenCreate is the builder for creating a Agora_token entity.
type AgoraTokenCreate struct {
	config
	mutation *AgoraTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (atc *AgoraTokenCreate) SetCreateTime(t time.Time) *AgoraTokenCreate {
	atc.mutation.SetCreateTime(t)
	return atc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (atc *AgoraTokenCreate) SetNillableCreateTime(t *time.Time) *AgoraTokenCreate {
	if t != nil {
		atc.SetCreateTime(*t)
	}
	return atc
}

// SetUpdateTime sets the "update_time" field.
func (atc *AgoraTokenCreate) SetUpdateTime(t time.Time) *AgoraTokenCreate {
	atc.mutation.SetUpdateTime(t)
	return atc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (atc *AgoraTokenCreate) SetNillableUpdateTime(t *time.Time) *AgoraTokenCreate {
	if t != nil {
		atc.SetUpdateTime(*t)
	}
	return atc
}

// SetToken sets the "token" field.
func (atc *AgoraTokenCreate) SetToken(s string) *AgoraTokenCreate {
	atc.mutation.SetToken(s)
	return atc
}

// SetUserID sets the "user_id" field.
func (atc *AgoraTokenCreate) SetUserID(u uint64) *AgoraTokenCreate {
	atc.mutation.SetUserID(u)
	return atc
}

// SetID sets the "id" field.
func (atc *AgoraTokenCreate) SetID(u uint64) *AgoraTokenCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atc *AgoraTokenCreate) SetOwnerID(id uint64) *AgoraTokenCreate {
	atc.mutation.SetOwnerID(id)
	return atc
}

// SetOwner sets the "owner" edge to the User entity.
func (atc *AgoraTokenCreate) SetOwner(u *User) *AgoraTokenCreate {
	return atc.SetOwnerID(u.ID)
}

// Mutation returns the AgoraTokenMutation object of the builder.
func (atc *AgoraTokenCreate) Mutation() *AgoraTokenMutation {
	return atc.mutation
}

// Save creates the Agora_token in the database.
func (atc *AgoraTokenCreate) Save(ctx context.Context) (*Agora_token, error) {
	var (
		err  error
		node *Agora_token
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgoraTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Agora_token)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AgoraTokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AgoraTokenCreate) SaveX(ctx context.Context) *Agora_token {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AgoraTokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AgoraTokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AgoraTokenCreate) defaults() {
	if _, ok := atc.mutation.CreateTime(); !ok {
		v := agora_token.DefaultCreateTime()
		atc.mutation.SetCreateTime(v)
	}
	if _, ok := atc.mutation.UpdateTime(); !ok {
		v := agora_token.DefaultUpdateTime()
		atc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AgoraTokenCreate) check() error {
	if _, ok := atc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Agora_token.create_time"`)}
	}
	if _, ok := atc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Agora_token.update_time"`)}
	}
	if _, ok := atc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Agora_token.token"`)}
	}
	if _, ok := atc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Agora_token.user_id"`)}
	}
	if _, ok := atc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Agora_token.owner"`)}
	}
	return nil
}

func (atc *AgoraTokenCreate) sqlSave(ctx context.Context) (*Agora_token, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (atc *AgoraTokenCreate) createSpec() (*Agora_token, *sqlgraph.CreateSpec) {
	var (
		_node = &Agora_token{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: agora_token.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: agora_token.FieldID,
			},
		}
	)
	_spec.OnConflict = atc.conflict
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.CreateTime(); ok {
		_spec.SetField(agora_token.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := atc.mutation.UpdateTime(); ok {
		_spec.SetField(agora_token.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := atc.mutation.Token(); ok {
		_spec.SetField(agora_token.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if nodes := atc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agora_token.OwnerTable,
			Columns: []string{agora_token.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agora_token.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Agora_tokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (atc *AgoraTokenCreate) OnConflict(opts ...sql.ConflictOption) *Agora_tokenUpsertOne {
	atc.conflict = opts
	return &Agora_tokenUpsertOne{
		create: atc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atc *AgoraTokenCreate) OnConflictColumns(columns ...string) *Agora_tokenUpsertOne {
	atc.conflict = append(atc.conflict, sql.ConflictColumns(columns...))
	return &Agora_tokenUpsertOne{
		create: atc,
	}
}

type (
	// Agora_tokenUpsertOne is the builder for "upsert"-ing
	//  one Agora_token node.
	Agora_tokenUpsertOne struct {
		create *AgoraTokenCreate
	}

	// Agora_tokenUpsert is the "OnConflict" setter.
	Agora_tokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *Agora_tokenUpsert) SetUpdateTime(v time.Time) *Agora_tokenUpsert {
	u.Set(agora_token.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Agora_tokenUpsert) UpdateUpdateTime() *Agora_tokenUpsert {
	u.SetExcluded(agora_token.FieldUpdateTime)
	return u
}

// SetToken sets the "token" field.
func (u *Agora_tokenUpsert) SetToken(v string) *Agora_tokenUpsert {
	u.Set(agora_token.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *Agora_tokenUpsert) UpdateToken() *Agora_tokenUpsert {
	u.SetExcluded(agora_token.FieldToken)
	return u
}

// SetUserID sets the "user_id" field.
func (u *Agora_tokenUpsert) SetUserID(v uint64) *Agora_tokenUpsert {
	u.Set(agora_token.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Agora_tokenUpsert) UpdateUserID() *Agora_tokenUpsert {
	u.SetExcluded(agora_token.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(agora_token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Agora_tokenUpsertOne) UpdateNewValues() *Agora_tokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(agora_token.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(agora_token.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Agora_tokenUpsertOne) Ignore() *Agora_tokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Agora_tokenUpsertOne) DoNothing() *Agora_tokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgoraTokenCreate.OnConflict
// documentation for more info.
func (u *Agora_tokenUpsertOne) Update(set func(*Agora_tokenUpsert)) *Agora_tokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Agora_tokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *Agora_tokenUpsertOne) SetUpdateTime(v time.Time) *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Agora_tokenUpsertOne) UpdateUpdateTime() *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetToken sets the "token" field.
func (u *Agora_tokenUpsertOne) SetToken(v string) *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *Agora_tokenUpsertOne) UpdateToken() *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *Agora_tokenUpsertOne) SetUserID(v uint64) *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Agora_tokenUpsertOne) UpdateUserID() *Agora_tokenUpsertOne {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *Agora_tokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgoraTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Agora_tokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Agora_tokenUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Agora_tokenUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AgoraTokenCreateBulk is the builder for creating many Agora_token entities in bulk.
type AgoraTokenCreateBulk struct {
	config
	builders []*AgoraTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the Agora_token entities in the database.
func (atcb *AgoraTokenCreateBulk) Save(ctx context.Context) ([]*Agora_token, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*Agora_token, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgoraTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AgoraTokenCreateBulk) SaveX(ctx context.Context) []*Agora_token {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AgoraTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AgoraTokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agora_token.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Agora_tokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (atcb *AgoraTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *Agora_tokenUpsertBulk {
	atcb.conflict = opts
	return &Agora_tokenUpsertBulk{
		create: atcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atcb *AgoraTokenCreateBulk) OnConflictColumns(columns ...string) *Agora_tokenUpsertBulk {
	atcb.conflict = append(atcb.conflict, sql.ConflictColumns(columns...))
	return &Agora_tokenUpsertBulk{
		create: atcb,
	}
}

// Agora_tokenUpsertBulk is the builder for "upsert"-ing
// a bulk of Agora_token nodes.
type Agora_tokenUpsertBulk struct {
	create *AgoraTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(agora_token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Agora_tokenUpsertBulk) UpdateNewValues() *Agora_tokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(agora_token.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(agora_token.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agora_token.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Agora_tokenUpsertBulk) Ignore() *Agora_tokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Agora_tokenUpsertBulk) DoNothing() *Agora_tokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgoraTokenCreateBulk.OnConflict
// documentation for more info.
func (u *Agora_tokenUpsertBulk) Update(set func(*Agora_tokenUpsert)) *Agora_tokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Agora_tokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *Agora_tokenUpsertBulk) SetUpdateTime(v time.Time) *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Agora_tokenUpsertBulk) UpdateUpdateTime() *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetToken sets the "token" field.
func (u *Agora_tokenUpsertBulk) SetToken(v string) *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *Agora_tokenUpsertBulk) UpdateToken() *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateToken()
	})
}

// SetUserID sets the "user_id" field.
func (u *Agora_tokenUpsertBulk) SetUserID(v uint64) *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Agora_tokenUpsertBulk) UpdateUserID() *Agora_tokenUpsertBulk {
	return u.Update(func(s *Agora_tokenUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *Agora_tokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AgoraTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgoraTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Agora_tokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
