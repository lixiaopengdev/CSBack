// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/agora_token"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgoraTokenUpdate is the builder for updating Agora_token entities.
type AgoraTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AgoraTokenMutation
}

// Where appends a list predicates to the AgoraTokenUpdate builder.
func (atu *AgoraTokenUpdate) Where(ps ...predicate.Agora_token) *AgoraTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdateTime sets the "update_time" field.
func (atu *AgoraTokenUpdate) SetUpdateTime(t time.Time) *AgoraTokenUpdate {
	atu.mutation.SetUpdateTime(t)
	return atu
}

// SetToken sets the "token" field.
func (atu *AgoraTokenUpdate) SetToken(s string) *AgoraTokenUpdate {
	atu.mutation.SetToken(s)
	return atu
}

// SetUserID sets the "user_id" field.
func (atu *AgoraTokenUpdate) SetUserID(u uint64) *AgoraTokenUpdate {
	atu.mutation.SetUserID(u)
	return atu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atu *AgoraTokenUpdate) SetOwnerID(id uint64) *AgoraTokenUpdate {
	atu.mutation.SetOwnerID(id)
	return atu
}

// SetOwner sets the "owner" edge to the User entity.
func (atu *AgoraTokenUpdate) SetOwner(u *User) *AgoraTokenUpdate {
	return atu.SetOwnerID(u.ID)
}

// Mutation returns the AgoraTokenMutation object of the builder.
func (atu *AgoraTokenUpdate) Mutation() *AgoraTokenMutation {
	return atu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atu *AgoraTokenUpdate) ClearOwner() *AgoraTokenUpdate {
	atu.mutation.ClearOwner()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AgoraTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atu.defaults()
	if len(atu.hooks) == 0 {
		if err = atu.check(); err != nil {
			return 0, err
		}
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgoraTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atu.check(); err != nil {
				return 0, err
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			if atu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AgoraTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AgoraTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AgoraTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AgoraTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdateTime(); !ok {
		v := agora_token.UpdateDefaultUpdateTime()
		atu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AgoraTokenUpdate) check() error {
	if _, ok := atu.mutation.OwnerID(); atu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Agora_token.owner"`)
	}
	return nil
}

func (atu *AgoraTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agora_token.Table,
			Columns: agora_token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: agora_token.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdateTime(); ok {
		_spec.SetField(agora_token.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := atu.mutation.Token(); ok {
		_spec.SetField(agora_token.FieldToken, field.TypeString, value)
	}
	if atu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agora_token.OwnerTable,
			Columns: []string{agora_token.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agora_token.OwnerTable,
			Columns: []string{agora_token.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agora_token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AgoraTokenUpdateOne is the builder for updating a single Agora_token entity.
type AgoraTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgoraTokenMutation
}

// SetUpdateTime sets the "update_time" field.
func (atuo *AgoraTokenUpdateOne) SetUpdateTime(t time.Time) *AgoraTokenUpdateOne {
	atuo.mutation.SetUpdateTime(t)
	return atuo
}

// SetToken sets the "token" field.
func (atuo *AgoraTokenUpdateOne) SetToken(s string) *AgoraTokenUpdateOne {
	atuo.mutation.SetToken(s)
	return atuo
}

// SetUserID sets the "user_id" field.
func (atuo *AgoraTokenUpdateOne) SetUserID(u uint64) *AgoraTokenUpdateOne {
	atuo.mutation.SetUserID(u)
	return atuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atuo *AgoraTokenUpdateOne) SetOwnerID(id uint64) *AgoraTokenUpdateOne {
	atuo.mutation.SetOwnerID(id)
	return atuo
}

// SetOwner sets the "owner" edge to the User entity.
func (atuo *AgoraTokenUpdateOne) SetOwner(u *User) *AgoraTokenUpdateOne {
	return atuo.SetOwnerID(u.ID)
}

// Mutation returns the AgoraTokenMutation object of the builder.
func (atuo *AgoraTokenUpdateOne) Mutation() *AgoraTokenMutation {
	return atuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atuo *AgoraTokenUpdateOne) ClearOwner() *AgoraTokenUpdateOne {
	atuo.mutation.ClearOwner()
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AgoraTokenUpdateOne) Select(field string, fields ...string) *AgoraTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated Agora_token entity.
func (atuo *AgoraTokenUpdateOne) Save(ctx context.Context) (*Agora_token, error) {
	var (
		err  error
		node *Agora_token
	)
	atuo.defaults()
	if len(atuo.hooks) == 0 {
		if err = atuo.check(); err != nil {
			return nil, err
		}
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgoraTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atuo.check(); err != nil {
				return nil, err
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			if atuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Agora_token)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AgoraTokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AgoraTokenUpdateOne) SaveX(ctx context.Context) *Agora_token {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AgoraTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AgoraTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AgoraTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdateTime(); !ok {
		v := agora_token.UpdateDefaultUpdateTime()
		atuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AgoraTokenUpdateOne) check() error {
	if _, ok := atuo.mutation.OwnerID(); atuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Agora_token.owner"`)
	}
	return nil
}

func (atuo *AgoraTokenUpdateOne) sqlSave(ctx context.Context) (_node *Agora_token, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agora_token.Table,
			Columns: agora_token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: agora_token.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agora_token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agora_token.FieldID)
		for _, f := range fields {
			if !agora_token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agora_token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdateTime(); ok {
		_spec.SetField(agora_token.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.Token(); ok {
		_spec.SetField(agora_token.FieldToken, field.TypeString, value)
	}
	if atuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agora_token.OwnerTable,
			Columns: []string{agora_token.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agora_token.OwnerTable,
			Columns: []string{agora_token.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agora_token{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agora_token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
