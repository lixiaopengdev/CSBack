// Code generated by ent, DO NOT EDIT.

package bundle

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the bundle type in the database.
	Label = "bundle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldVerionID holds the string denoting the verionid field in the database.
	FieldVerionID = "verion_id"
	// FieldBundleURL holds the string denoting the bundle_url field in the database.
	FieldBundleURL = "bundle_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldMaskID holds the string denoting the mask_id field in the database.
	FieldMaskID = "mask_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the bundle in the database.
	Table = "bundles"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "bundles"
	// OwnerInverseTable is the table name for the Mask entity.
	// It exists in this package in order to avoid circular dependency with the "mask" package.
	OwnerInverseTable = "masks"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "mask_id"
)

// Columns holds all SQL columns for bundle fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldVerionID,
	FieldBundleURL,
	FieldStatus,
	FieldPlatform,
	FieldMaskID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusStatus1 is the default value of the Status enum.
const DefaultStatus = StatusStatus1

// Status values.
const (
	StatusStatus1 Status = "status1"
	StatusStatus2 Status = "status2"
	StatusStatus3 Status = "status3"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStatus1, StatusStatus2, StatusStatus3:
		return nil
	default:
		return fmt.Errorf("bundle: invalid enum value for status field: %q", s)
	}
}

// Platform defines the type for the "platform" enum field.
type Platform string

// PlatformIPhone is the default value of the Platform enum.
const DefaultPlatform = PlatformIPhone

// Platform values.
const (
	PlatformIPhone  Platform = "iPhone"
	PlatformAndroid Platform = "Android"
)

func (pl Platform) String() string {
	return string(pl)
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl Platform) error {
	switch pl {
	case PlatformIPhone, PlatformAndroid:
		return nil
	default:
		return fmt.Errorf("bundle: invalid enum value for platform field: %q", pl)
	}
}
