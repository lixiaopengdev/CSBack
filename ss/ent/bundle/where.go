// Code generated by ent, DO NOT EDIT.

package bundle

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// VerionID applies equality check predicate on the "verionID" field. It's identical to VerionIDEQ.
func VerionID(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerionID), v))
	})
}

// BundleURL applies equality check predicate on the "bundle_url" field. It's identical to BundleURLEQ.
func BundleURL(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBundleURL), v))
	})
}

// MaskID applies equality check predicate on the "mask_id" field. It's identical to MaskIDEQ.
func MaskID(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaskID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// VerionIDEQ applies the EQ predicate on the "verionID" field.
func VerionIDEQ(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerionID), v))
	})
}

// VerionIDNEQ applies the NEQ predicate on the "verionID" field.
func VerionIDNEQ(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerionID), v))
	})
}

// VerionIDIn applies the In predicate on the "verionID" field.
func VerionIDIn(vs ...uint64) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVerionID), v...))
	})
}

// VerionIDNotIn applies the NotIn predicate on the "verionID" field.
func VerionIDNotIn(vs ...uint64) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVerionID), v...))
	})
}

// VerionIDGT applies the GT predicate on the "verionID" field.
func VerionIDGT(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVerionID), v))
	})
}

// VerionIDGTE applies the GTE predicate on the "verionID" field.
func VerionIDGTE(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVerionID), v))
	})
}

// VerionIDLT applies the LT predicate on the "verionID" field.
func VerionIDLT(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVerionID), v))
	})
}

// VerionIDLTE applies the LTE predicate on the "verionID" field.
func VerionIDLTE(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVerionID), v))
	})
}

// VerionIDIsNil applies the IsNil predicate on the "verionID" field.
func VerionIDIsNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVerionID)))
	})
}

// VerionIDNotNil applies the NotNil predicate on the "verionID" field.
func VerionIDNotNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVerionID)))
	})
}

// BundleURLEQ applies the EQ predicate on the "bundle_url" field.
func BundleURLEQ(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBundleURL), v))
	})
}

// BundleURLNEQ applies the NEQ predicate on the "bundle_url" field.
func BundleURLNEQ(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBundleURL), v))
	})
}

// BundleURLIn applies the In predicate on the "bundle_url" field.
func BundleURLIn(vs ...string) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBundleURL), v...))
	})
}

// BundleURLNotIn applies the NotIn predicate on the "bundle_url" field.
func BundleURLNotIn(vs ...string) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBundleURL), v...))
	})
}

// BundleURLGT applies the GT predicate on the "bundle_url" field.
func BundleURLGT(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBundleURL), v))
	})
}

// BundleURLGTE applies the GTE predicate on the "bundle_url" field.
func BundleURLGTE(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBundleURL), v))
	})
}

// BundleURLLT applies the LT predicate on the "bundle_url" field.
func BundleURLLT(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBundleURL), v))
	})
}

// BundleURLLTE applies the LTE predicate on the "bundle_url" field.
func BundleURLLTE(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBundleURL), v))
	})
}

// BundleURLContains applies the Contains predicate on the "bundle_url" field.
func BundleURLContains(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBundleURL), v))
	})
}

// BundleURLHasPrefix applies the HasPrefix predicate on the "bundle_url" field.
func BundleURLHasPrefix(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBundleURL), v))
	})
}

// BundleURLHasSuffix applies the HasSuffix predicate on the "bundle_url" field.
func BundleURLHasSuffix(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBundleURL), v))
	})
}

// BundleURLIsNil applies the IsNil predicate on the "bundle_url" field.
func BundleURLIsNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBundleURL)))
	})
}

// BundleURLNotNil applies the NotNil predicate on the "bundle_url" field.
func BundleURLNotNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBundleURL)))
	})
}

// BundleURLEqualFold applies the EqualFold predicate on the "bundle_url" field.
func BundleURLEqualFold(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBundleURL), v))
	})
}

// BundleURLContainsFold applies the ContainsFold predicate on the "bundle_url" field.
func BundleURLContainsFold(v string) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBundleURL), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v Platform) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v Platform) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...Platform) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...Platform) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// MaskIDEQ applies the EQ predicate on the "mask_id" field.
func MaskIDEQ(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaskID), v))
	})
}

// MaskIDNEQ applies the NEQ predicate on the "mask_id" field.
func MaskIDNEQ(v uint64) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaskID), v))
	})
}

// MaskIDIn applies the In predicate on the "mask_id" field.
func MaskIDIn(vs ...uint64) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaskID), v...))
	})
}

// MaskIDNotIn applies the NotIn predicate on the "mask_id" field.
func MaskIDNotIn(vs ...uint64) predicate.Bundle {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaskID), v...))
	})
}

// MaskIDIsNil applies the IsNil predicate on the "mask_id" field.
func MaskIDIsNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaskID)))
	})
}

// MaskIDNotNil applies the NotNil predicate on the "mask_id" field.
func MaskIDNotNil() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaskID)))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Mask) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bundle) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bundle) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bundle) predicate.Bundle {
	return predicate.Bundle(func(s *sql.Selector) {
		p(s.Not())
	})
}
