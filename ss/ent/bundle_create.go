// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/bundle"
	"CSBackendTmp/ent/mask"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BundleCreate is the builder for creating a Bundle entity.
type BundleCreate struct {
	config
	mutation *BundleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bc *BundleCreate) SetCreateTime(t time.Time) *BundleCreate {
	bc.mutation.SetCreateTime(t)
	return bc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bc *BundleCreate) SetNillableCreateTime(t *time.Time) *BundleCreate {
	if t != nil {
		bc.SetCreateTime(*t)
	}
	return bc
}

// SetUpdateTime sets the "update_time" field.
func (bc *BundleCreate) SetUpdateTime(t time.Time) *BundleCreate {
	bc.mutation.SetUpdateTime(t)
	return bc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bc *BundleCreate) SetNillableUpdateTime(t *time.Time) *BundleCreate {
	if t != nil {
		bc.SetUpdateTime(*t)
	}
	return bc
}

// SetVerionID sets the "verionID" field.
func (bc *BundleCreate) SetVerionID(u uint64) *BundleCreate {
	bc.mutation.SetVerionID(u)
	return bc
}

// SetNillableVerionID sets the "verionID" field if the given value is not nil.
func (bc *BundleCreate) SetNillableVerionID(u *uint64) *BundleCreate {
	if u != nil {
		bc.SetVerionID(*u)
	}
	return bc
}

// SetBundleURL sets the "bundle_url" field.
func (bc *BundleCreate) SetBundleURL(s string) *BundleCreate {
	bc.mutation.SetBundleURL(s)
	return bc
}

// SetNillableBundleURL sets the "bundle_url" field if the given value is not nil.
func (bc *BundleCreate) SetNillableBundleURL(s *string) *BundleCreate {
	if s != nil {
		bc.SetBundleURL(*s)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BundleCreate) SetStatus(b bundle.Status) *BundleCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BundleCreate) SetNillableStatus(b *bundle.Status) *BundleCreate {
	if b != nil {
		bc.SetStatus(*b)
	}
	return bc
}

// SetPlatform sets the "platform" field.
func (bc *BundleCreate) SetPlatform(b bundle.Platform) *BundleCreate {
	bc.mutation.SetPlatform(b)
	return bc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (bc *BundleCreate) SetNillablePlatform(b *bundle.Platform) *BundleCreate {
	if b != nil {
		bc.SetPlatform(*b)
	}
	return bc
}

// SetMaskID sets the "mask_id" field.
func (bc *BundleCreate) SetMaskID(u uint64) *BundleCreate {
	bc.mutation.SetMaskID(u)
	return bc
}

// SetNillableMaskID sets the "mask_id" field if the given value is not nil.
func (bc *BundleCreate) SetNillableMaskID(u *uint64) *BundleCreate {
	if u != nil {
		bc.SetMaskID(*u)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BundleCreate) SetID(u uint64) *BundleCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetOwnerID sets the "owner" edge to the Mask entity by ID.
func (bc *BundleCreate) SetOwnerID(id uint64) *BundleCreate {
	bc.mutation.SetOwnerID(id)
	return bc
}

// SetNillableOwnerID sets the "owner" edge to the Mask entity by ID if the given value is not nil.
func (bc *BundleCreate) SetNillableOwnerID(id *uint64) *BundleCreate {
	if id != nil {
		bc = bc.SetOwnerID(*id)
	}
	return bc
}

// SetOwner sets the "owner" edge to the Mask entity.
func (bc *BundleCreate) SetOwner(m *Mask) *BundleCreate {
	return bc.SetOwnerID(m.ID)
}

// Mutation returns the BundleMutation object of the builder.
func (bc *BundleCreate) Mutation() *BundleMutation {
	return bc.mutation
}

// Save creates the Bundle in the database.
func (bc *BundleCreate) Save(ctx context.Context) (*Bundle, error) {
	var (
		err  error
		node *Bundle
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BundleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bundle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BundleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BundleCreate) SaveX(ctx context.Context) *Bundle {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BundleCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BundleCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BundleCreate) defaults() {
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := bundle.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := bundle.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := bundle.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.Platform(); !ok {
		v := bundle.DefaultPlatform
		bc.mutation.SetPlatform(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BundleCreate) check() error {
	if _, ok := bc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Bundle.create_time"`)}
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Bundle.update_time"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Bundle.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bundle.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bundle.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Bundle.platform"`)}
	}
	if v, ok := bc.mutation.Platform(); ok {
		if err := bundle.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Bundle.platform": %w`, err)}
		}
	}
	return nil
}

func (bc *BundleCreate) sqlSave(ctx context.Context) (*Bundle, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (bc *BundleCreate) createSpec() (*Bundle, *sqlgraph.CreateSpec) {
	var (
		_node = &Bundle{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bundle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bundle.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.SetField(bundle.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.SetField(bundle.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bc.mutation.VerionID(); ok {
		_spec.SetField(bundle.FieldVerionID, field.TypeUint64, value)
		_node.VerionID = value
	}
	if value, ok := bc.mutation.BundleURL(); ok {
		_spec.SetField(bundle.FieldBundleURL, field.TypeString, value)
		_node.BundleURL = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bundle.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Platform(); ok {
		_spec.SetField(bundle.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if nodes := bc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bundle.OwnerTable,
			Columns: []string{bundle.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: mask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bc *BundleCreate) OnConflict(opts ...sql.ConflictOption) *BundleUpsertOne {
	bc.conflict = opts
	return &BundleUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BundleCreate) OnConflictColumns(columns ...string) *BundleUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertOne{
		create: bc,
	}
}

type (
	// BundleUpsertOne is the builder for "upsert"-ing
	//  one Bundle node.
	BundleUpsertOne struct {
		create *BundleCreate
	}

	// BundleUpsert is the "OnConflict" setter.
	BundleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BundleUpsert) SetUpdateTime(v time.Time) *BundleUpsert {
	u.Set(bundle.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BundleUpsert) UpdateUpdateTime() *BundleUpsert {
	u.SetExcluded(bundle.FieldUpdateTime)
	return u
}

// SetVerionID sets the "verionID" field.
func (u *BundleUpsert) SetVerionID(v uint64) *BundleUpsert {
	u.Set(bundle.FieldVerionID, v)
	return u
}

// UpdateVerionID sets the "verionID" field to the value that was provided on create.
func (u *BundleUpsert) UpdateVerionID() *BundleUpsert {
	u.SetExcluded(bundle.FieldVerionID)
	return u
}

// AddVerionID adds v to the "verionID" field.
func (u *BundleUpsert) AddVerionID(v uint64) *BundleUpsert {
	u.Add(bundle.FieldVerionID, v)
	return u
}

// ClearVerionID clears the value of the "verionID" field.
func (u *BundleUpsert) ClearVerionID() *BundleUpsert {
	u.SetNull(bundle.FieldVerionID)
	return u
}

// SetBundleURL sets the "bundle_url" field.
func (u *BundleUpsert) SetBundleURL(v string) *BundleUpsert {
	u.Set(bundle.FieldBundleURL, v)
	return u
}

// UpdateBundleURL sets the "bundle_url" field to the value that was provided on create.
func (u *BundleUpsert) UpdateBundleURL() *BundleUpsert {
	u.SetExcluded(bundle.FieldBundleURL)
	return u
}

// ClearBundleURL clears the value of the "bundle_url" field.
func (u *BundleUpsert) ClearBundleURL() *BundleUpsert {
	u.SetNull(bundle.FieldBundleURL)
	return u
}

// SetStatus sets the "status" field.
func (u *BundleUpsert) SetStatus(v bundle.Status) *BundleUpsert {
	u.Set(bundle.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BundleUpsert) UpdateStatus() *BundleUpsert {
	u.SetExcluded(bundle.FieldStatus)
	return u
}

// SetPlatform sets the "platform" field.
func (u *BundleUpsert) SetPlatform(v bundle.Platform) *BundleUpsert {
	u.Set(bundle.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *BundleUpsert) UpdatePlatform() *BundleUpsert {
	u.SetExcluded(bundle.FieldPlatform)
	return u
}

// SetMaskID sets the "mask_id" field.
func (u *BundleUpsert) SetMaskID(v uint64) *BundleUpsert {
	u.Set(bundle.FieldMaskID, v)
	return u
}

// UpdateMaskID sets the "mask_id" field to the value that was provided on create.
func (u *BundleUpsert) UpdateMaskID() *BundleUpsert {
	u.SetExcluded(bundle.FieldMaskID)
	return u
}

// ClearMaskID clears the value of the "mask_id" field.
func (u *BundleUpsert) ClearMaskID() *BundleUpsert {
	u.SetNull(bundle.FieldMaskID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bundle.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BundleUpsertOne) UpdateNewValues() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bundle.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bundle.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BundleUpsertOne) Ignore() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertOne) DoNothing() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreate.OnConflict
// documentation for more info.
func (u *BundleUpsertOne) Update(set func(*BundleUpsert)) *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BundleUpsertOne) SetUpdateTime(v time.Time) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateUpdateTime() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetVerionID sets the "verionID" field.
func (u *BundleUpsertOne) SetVerionID(v uint64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetVerionID(v)
	})
}

// AddVerionID adds v to the "verionID" field.
func (u *BundleUpsertOne) AddVerionID(v uint64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.AddVerionID(v)
	})
}

// UpdateVerionID sets the "verionID" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateVerionID() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateVerionID()
	})
}

// ClearVerionID clears the value of the "verionID" field.
func (u *BundleUpsertOne) ClearVerionID() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.ClearVerionID()
	})
}

// SetBundleURL sets the "bundle_url" field.
func (u *BundleUpsertOne) SetBundleURL(v string) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetBundleURL(v)
	})
}

// UpdateBundleURL sets the "bundle_url" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateBundleURL() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateBundleURL()
	})
}

// ClearBundleURL clears the value of the "bundle_url" field.
func (u *BundleUpsertOne) ClearBundleURL() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.ClearBundleURL()
	})
}

// SetStatus sets the "status" field.
func (u *BundleUpsertOne) SetStatus(v bundle.Status) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateStatus() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateStatus()
	})
}

// SetPlatform sets the "platform" field.
func (u *BundleUpsertOne) SetPlatform(v bundle.Platform) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdatePlatform() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdatePlatform()
	})
}

// SetMaskID sets the "mask_id" field.
func (u *BundleUpsertOne) SetMaskID(v uint64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetMaskID(v)
	})
}

// UpdateMaskID sets the "mask_id" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateMaskID() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateMaskID()
	})
}

// ClearMaskID clears the value of the "mask_id" field.
func (u *BundleUpsertOne) ClearMaskID() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.ClearMaskID()
	})
}

// Exec executes the query.
func (u *BundleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BundleUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BundleUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BundleCreateBulk is the builder for creating many Bundle entities in bulk.
type BundleCreateBulk struct {
	config
	builders []*BundleCreate
	conflict []sql.ConflictOption
}

// Save creates the Bundle entities in the database.
func (bcb *BundleCreateBulk) Save(ctx context.Context) ([]*Bundle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bundle, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BundleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BundleCreateBulk) SaveX(ctx context.Context) []*Bundle {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BundleCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BundleCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflict(opts ...sql.ConflictOption) *BundleUpsertBulk {
	bcb.conflict = opts
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflictColumns(columns ...string) *BundleUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// BundleUpsertBulk is the builder for "upsert"-ing
// a bulk of Bundle nodes.
type BundleUpsertBulk struct {
	create *BundleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bundle.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BundleUpsertBulk) UpdateNewValues() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bundle.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bundle.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BundleUpsertBulk) Ignore() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertBulk) DoNothing() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreateBulk.OnConflict
// documentation for more info.
func (u *BundleUpsertBulk) Update(set func(*BundleUpsert)) *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BundleUpsertBulk) SetUpdateTime(v time.Time) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateUpdateTime() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetVerionID sets the "verionID" field.
func (u *BundleUpsertBulk) SetVerionID(v uint64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetVerionID(v)
	})
}

// AddVerionID adds v to the "verionID" field.
func (u *BundleUpsertBulk) AddVerionID(v uint64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.AddVerionID(v)
	})
}

// UpdateVerionID sets the "verionID" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateVerionID() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateVerionID()
	})
}

// ClearVerionID clears the value of the "verionID" field.
func (u *BundleUpsertBulk) ClearVerionID() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.ClearVerionID()
	})
}

// SetBundleURL sets the "bundle_url" field.
func (u *BundleUpsertBulk) SetBundleURL(v string) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetBundleURL(v)
	})
}

// UpdateBundleURL sets the "bundle_url" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateBundleURL() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateBundleURL()
	})
}

// ClearBundleURL clears the value of the "bundle_url" field.
func (u *BundleUpsertBulk) ClearBundleURL() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.ClearBundleURL()
	})
}

// SetStatus sets the "status" field.
func (u *BundleUpsertBulk) SetStatus(v bundle.Status) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateStatus() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateStatus()
	})
}

// SetPlatform sets the "platform" field.
func (u *BundleUpsertBulk) SetPlatform(v bundle.Platform) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdatePlatform() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdatePlatform()
	})
}

// SetMaskID sets the "mask_id" field.
func (u *BundleUpsertBulk) SetMaskID(v uint64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetMaskID(v)
	})
}

// UpdateMaskID sets the "mask_id" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateMaskID() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateMaskID()
	})
}

// ClearMaskID clears the value of the "mask_id" field.
func (u *BundleUpsertBulk) ClearMaskID() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.ClearMaskID()
	})
}

// Exec executes the query.
func (u *BundleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BundleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
