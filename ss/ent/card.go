// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 卡片名称
	Name string `json:"name,omitempty"`
	// 卡片说明
	Description string `json:"description,omitempty"`
	// 卡片图
	PicURL string `json:"pic_url,omitempty"`
	// 缩略图
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// 资源
	ResourceURL string `json:"resource_url,omitempty"`
	// 卡片状态
	Status card.Status `json:"status,omitempty"`
	// 卡片类型
	Type card.Type `json:"type,omitempty"`
	// Script holds the value of the "script" field.
	Script []string `json:"script,omitempty"`
	// ScriptRaw holds the value of the "script_raw" field.
	ScriptRaw string `json:"script_raw,omitempty"`
	// ScriptURL holds the value of the "script_url" field.
	ScriptURL string `json:"script_url,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardQuery when eager-loading is set.
	Edges          CardEdges `json:"edges"`
	commodity_card *uint64
}

// CardEdges holds the relations/edges for other nodes in the graph.
type CardEdges struct {
	// Rule holds the value of the rule edge.
	Rule []*Rule `json:"rule,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RuleOrErr returns the Rule value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) RuleOrErr() ([]*Rule, error) {
	if e.loadedTypes[0] {
		return e.Rule, nil
	}
	return nil, &NotLoadedError{edge: "rule"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldScript:
			values[i] = new([]byte)
		case card.FieldID, card.FieldUserID:
			values[i] = new(sql.NullInt64)
		case card.FieldName, card.FieldDescription, card.FieldPicURL, card.FieldThumbnailURL, card.FieldResourceURL, card.FieldStatus, card.FieldType, card.FieldScriptRaw, card.FieldScriptURL:
			values[i] = new(sql.NullString)
		case card.FieldCreateTime, card.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case card.ForeignKeys[0]: // commodity_card
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Card", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case card.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case card.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case card.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case card.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case card.FieldPicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic_url", values[i])
			} else if value.Valid {
				c.PicURL = value.String
			}
		case card.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				c.ThumbnailURL = value.String
			}
		case card.FieldResourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_url", values[i])
			} else if value.Valid {
				c.ResourceURL = value.String
			}
		case card.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = card.Status(value.String)
			}
		case card.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = card.Type(value.String)
			}
		case card.FieldScript:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Script); err != nil {
					return fmt.Errorf("unmarshal field script: %w", err)
				}
			}
		case card.FieldScriptRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_raw", values[i])
			} else if value.Valid {
				c.ScriptRaw = value.String
			}
		case card.FieldScriptURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_url", values[i])
			} else if value.Valid {
				c.ScriptURL = value.String
			}
		case card.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = uint64(value.Int64)
			}
		case card.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field commodity_card", value)
			} else if value.Valid {
				c.commodity_card = new(uint64)
				*c.commodity_card = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryRule queries the "rule" edge of the Card entity.
func (c *Card) QueryRule() *RuleQuery {
	return (&CardClient{config: c.config}).QueryRule(c)
}

// QueryOwner queries the "owner" edge of the Card entity.
func (c *Card) QueryOwner() *UserQuery {
	return (&CardClient{config: c.config}).QueryOwner(c)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return (&CardClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("pic_url=")
	builder.WriteString(c.PicURL)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(c.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("resource_url=")
	builder.WriteString(c.ResourceURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(fmt.Sprintf("%v", c.Script))
	builder.WriteString(", ")
	builder.WriteString("script_raw=")
	builder.WriteString(c.ScriptRaw)
	builder.WriteString(", ")
	builder.WriteString("script_url=")
	builder.WriteString(c.ScriptURL)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card

func (c Cards) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
