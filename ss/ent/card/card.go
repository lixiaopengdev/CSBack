// Code generated by ent, DO NOT EDIT.

package card

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPicURL holds the string denoting the pic_url field in the database.
	FieldPicURL = "pic_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldResourceURL holds the string denoting the resource_url field in the database.
	FieldResourceURL = "resource_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// FieldScriptRaw holds the string denoting the script_raw field in the database.
	FieldScriptRaw = "script_raw"
	// FieldScriptURL holds the string denoting the script_url field in the database.
	FieldScriptURL = "script_url"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeRule holds the string denoting the rule edge name in mutations.
	EdgeRule = "rule"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// RuleTable is the table that holds the rule relation/edge. The primary key declared below.
	RuleTable = "card_rule"
	// RuleInverseTable is the table name for the Rule entity.
	// It exists in this package in order to avoid circular dependency with the "rule" package.
	RuleInverseTable = "rules"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "cards"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDescription,
	FieldPicURL,
	FieldThumbnailURL,
	FieldResourceURL,
	FieldStatus,
	FieldType,
	FieldScript,
	FieldScriptRaw,
	FieldScriptURL,
	FieldUserID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"commodity_card",
}

var (
	// RulePrimaryKey and RuleColumn2 are the table columns denoting the
	// primary key for the rule relation (M2M).
	RulePrimaryKey = []string{"card_id", "rule_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusStatus1 is the default value of the Status enum.
const DefaultStatus = StatusStatus1

// Status values.
const (
	StatusStatus1 Status = "status1"
	StatusStatus2 Status = "status2"
	StatusStatus3 Status = "status3"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStatus1, StatusStatus2, StatusStatus3:
		return nil
	default:
		return fmt.Errorf("card: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// TypeType1 is the default value of the Type enum.
const DefaultType = TypeType1

// Type values.
const (
	TypeType1 Type = "type1"
	TypeType2 Type = "type2"
	TypeType3 Type = "type3"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeType1, TypeType2, TypeType3:
		return nil
	default:
		return fmt.Errorf("card: invalid enum value for type field: %q", _type)
	}
}
