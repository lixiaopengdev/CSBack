// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/rule"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CardCreate) SetCreateTime(t time.Time) *CardCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CardCreate) SetNillableCreateTime(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CardCreate) SetUpdateTime(t time.Time) *CardCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CardCreate) SetNillableUpdateTime(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CardCreate) SetName(s string) *CardCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CardCreate) SetDescription(s string) *CardCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CardCreate) SetNillableDescription(s *string) *CardCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetPicURL sets the "pic_url" field.
func (cc *CardCreate) SetPicURL(s string) *CardCreate {
	cc.mutation.SetPicURL(s)
	return cc
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (cc *CardCreate) SetNillablePicURL(s *string) *CardCreate {
	if s != nil {
		cc.SetPicURL(*s)
	}
	return cc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (cc *CardCreate) SetThumbnailURL(s string) *CardCreate {
	cc.mutation.SetThumbnailURL(s)
	return cc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (cc *CardCreate) SetNillableThumbnailURL(s *string) *CardCreate {
	if s != nil {
		cc.SetThumbnailURL(*s)
	}
	return cc
}

// SetResourceURL sets the "resource_url" field.
func (cc *CardCreate) SetResourceURL(s string) *CardCreate {
	cc.mutation.SetResourceURL(s)
	return cc
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (cc *CardCreate) SetNillableResourceURL(s *string) *CardCreate {
	if s != nil {
		cc.SetResourceURL(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CardCreate) SetStatus(c card.Status) *CardCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CardCreate) SetNillableStatus(c *card.Status) *CardCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CardCreate) SetType(c card.Type) *CardCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CardCreate) SetNillableType(c *card.Type) *CardCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetScript sets the "script" field.
func (cc *CardCreate) SetScript(s []string) *CardCreate {
	cc.mutation.SetScript(s)
	return cc
}

// SetScriptRaw sets the "script_raw" field.
func (cc *CardCreate) SetScriptRaw(s string) *CardCreate {
	cc.mutation.SetScriptRaw(s)
	return cc
}

// SetNillableScriptRaw sets the "script_raw" field if the given value is not nil.
func (cc *CardCreate) SetNillableScriptRaw(s *string) *CardCreate {
	if s != nil {
		cc.SetScriptRaw(*s)
	}
	return cc
}

// SetScriptURL sets the "script_url" field.
func (cc *CardCreate) SetScriptURL(s string) *CardCreate {
	cc.mutation.SetScriptURL(s)
	return cc
}

// SetNillableScriptURL sets the "script_url" field if the given value is not nil.
func (cc *CardCreate) SetNillableScriptURL(s *string) *CardCreate {
	if s != nil {
		cc.SetScriptURL(*s)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CardCreate) SetUserID(u uint64) *CardCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CardCreate) SetNillableUserID(u *uint64) *CardCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CardCreate) SetID(u uint64) *CardCreate {
	cc.mutation.SetID(u)
	return cc
}

// AddRuleIDs adds the "rule" edge to the Rule entity by IDs.
func (cc *CardCreate) AddRuleIDs(ids ...uint64) *CardCreate {
	cc.mutation.AddRuleIDs(ids...)
	return cc
}

// AddRule adds the "rule" edges to the Rule entity.
func (cc *CardCreate) AddRule(r ...*Rule) *CardCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddRuleIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CardCreate) SetOwnerID(id uint64) *CardCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CardCreate) SetNillableOwnerID(id *uint64) *CardCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CardCreate) SetOwner(u *User) *CardCreate {
	return cc.SetOwnerID(u.ID)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CardCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := card.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := card.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := card.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := card.DefaultType
		cc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Card.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Card.update_time"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Card.name"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Card.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := card.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Card.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Card.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := card.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Card.type": %w`, err)}
		}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: card.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(card.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(card.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.PicURL(); ok {
		_spec.SetField(card.FieldPicURL, field.TypeString, value)
		_node.PicURL = value
	}
	if value, ok := cc.mutation.ThumbnailURL(); ok {
		_spec.SetField(card.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := cc.mutation.ResourceURL(); ok {
		_spec.SetField(card.FieldResourceURL, field.TypeString, value)
		_node.ResourceURL = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(card.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Script(); ok {
		_spec.SetField(card.FieldScript, field.TypeJSON, value)
		_node.Script = value
	}
	if value, ok := cc.mutation.ScriptRaw(); ok {
		_spec.SetField(card.FieldScriptRaw, field.TypeString, value)
		_node.ScriptRaw = value
	}
	if value, ok := cc.mutation.ScriptURL(); ok {
		_spec.SetField(card.FieldScriptURL, field.TypeString, value)
		_node.ScriptURL = value
	}
	if nodes := cc.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CardCreate) OnConflict(opts ...sql.ConflictOption) *CardUpsertOne {
	cc.conflict = opts
	return &CardUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CardCreate) OnConflictColumns(columns ...string) *CardUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertOne{
		create: cc,
	}
}

type (
	// CardUpsertOne is the builder for "upsert"-ing
	//  one Card node.
	CardUpsertOne struct {
		create *CardCreate
	}

	// CardUpsert is the "OnConflict" setter.
	CardUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CardUpsert) SetUpdateTime(v time.Time) *CardUpsert {
	u.Set(card.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CardUpsert) UpdateUpdateTime() *CardUpsert {
	u.SetExcluded(card.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *CardUpsert) SetName(v string) *CardUpsert {
	u.Set(card.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CardUpsert) UpdateName() *CardUpsert {
	u.SetExcluded(card.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CardUpsert) SetDescription(v string) *CardUpsert {
	u.Set(card.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CardUpsert) UpdateDescription() *CardUpsert {
	u.SetExcluded(card.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CardUpsert) ClearDescription() *CardUpsert {
	u.SetNull(card.FieldDescription)
	return u
}

// SetPicURL sets the "pic_url" field.
func (u *CardUpsert) SetPicURL(v string) *CardUpsert {
	u.Set(card.FieldPicURL, v)
	return u
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *CardUpsert) UpdatePicURL() *CardUpsert {
	u.SetExcluded(card.FieldPicURL)
	return u
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *CardUpsert) ClearPicURL() *CardUpsert {
	u.SetNull(card.FieldPicURL)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *CardUpsert) SetThumbnailURL(v string) *CardUpsert {
	u.Set(card.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *CardUpsert) UpdateThumbnailURL() *CardUpsert {
	u.SetExcluded(card.FieldThumbnailURL)
	return u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *CardUpsert) ClearThumbnailURL() *CardUpsert {
	u.SetNull(card.FieldThumbnailURL)
	return u
}

// SetResourceURL sets the "resource_url" field.
func (u *CardUpsert) SetResourceURL(v string) *CardUpsert {
	u.Set(card.FieldResourceURL, v)
	return u
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *CardUpsert) UpdateResourceURL() *CardUpsert {
	u.SetExcluded(card.FieldResourceURL)
	return u
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *CardUpsert) ClearResourceURL() *CardUpsert {
	u.SetNull(card.FieldResourceURL)
	return u
}

// SetStatus sets the "status" field.
func (u *CardUpsert) SetStatus(v card.Status) *CardUpsert {
	u.Set(card.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CardUpsert) UpdateStatus() *CardUpsert {
	u.SetExcluded(card.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *CardUpsert) SetType(v card.Type) *CardUpsert {
	u.Set(card.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CardUpsert) UpdateType() *CardUpsert {
	u.SetExcluded(card.FieldType)
	return u
}

// SetScript sets the "script" field.
func (u *CardUpsert) SetScript(v []string) *CardUpsert {
	u.Set(card.FieldScript, v)
	return u
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *CardUpsert) UpdateScript() *CardUpsert {
	u.SetExcluded(card.FieldScript)
	return u
}

// ClearScript clears the value of the "script" field.
func (u *CardUpsert) ClearScript() *CardUpsert {
	u.SetNull(card.FieldScript)
	return u
}

// SetScriptRaw sets the "script_raw" field.
func (u *CardUpsert) SetScriptRaw(v string) *CardUpsert {
	u.Set(card.FieldScriptRaw, v)
	return u
}

// UpdateScriptRaw sets the "script_raw" field to the value that was provided on create.
func (u *CardUpsert) UpdateScriptRaw() *CardUpsert {
	u.SetExcluded(card.FieldScriptRaw)
	return u
}

// ClearScriptRaw clears the value of the "script_raw" field.
func (u *CardUpsert) ClearScriptRaw() *CardUpsert {
	u.SetNull(card.FieldScriptRaw)
	return u
}

// SetScriptURL sets the "script_url" field.
func (u *CardUpsert) SetScriptURL(v string) *CardUpsert {
	u.Set(card.FieldScriptURL, v)
	return u
}

// UpdateScriptURL sets the "script_url" field to the value that was provided on create.
func (u *CardUpsert) UpdateScriptURL() *CardUpsert {
	u.SetExcluded(card.FieldScriptURL)
	return u
}

// ClearScriptURL clears the value of the "script_url" field.
func (u *CardUpsert) ClearScriptURL() *CardUpsert {
	u.SetNull(card.FieldScriptURL)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CardUpsert) SetUserID(v uint64) *CardUpsert {
	u.Set(card.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CardUpsert) UpdateUserID() *CardUpsert {
	u.SetExcluded(card.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CardUpsert) ClearUserID() *CardUpsert {
	u.SetNull(card.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertOne) UpdateNewValues() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(card.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(card.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CardUpsertOne) Ignore() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertOne) DoNothing() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreate.OnConflict
// documentation for more info.
func (u *CardUpsertOne) Update(set func(*CardUpsert)) *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CardUpsertOne) SetUpdateTime(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateUpdateTime() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CardUpsertOne) SetName(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateName() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CardUpsertOne) SetDescription(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateDescription() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CardUpsertOne) ClearDescription() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearDescription()
	})
}

// SetPicURL sets the "pic_url" field.
func (u *CardUpsertOne) SetPicURL(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetPicURL(v)
	})
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *CardUpsertOne) UpdatePicURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdatePicURL()
	})
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *CardUpsertOne) ClearPicURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearPicURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *CardUpsertOne) SetThumbnailURL(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateThumbnailURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *CardUpsertOne) ClearThumbnailURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetResourceURL sets the "resource_url" field.
func (u *CardUpsertOne) SetResourceURL(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetResourceURL(v)
	})
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateResourceURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateResourceURL()
	})
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *CardUpsertOne) ClearResourceURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearResourceURL()
	})
}

// SetStatus sets the "status" field.
func (u *CardUpsertOne) SetStatus(v card.Status) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateStatus() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *CardUpsertOne) SetType(v card.Type) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateType() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateType()
	})
}

// SetScript sets the "script" field.
func (u *CardUpsertOne) SetScript(v []string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetScript(v)
	})
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateScript() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScript()
	})
}

// ClearScript clears the value of the "script" field.
func (u *CardUpsertOne) ClearScript() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearScript()
	})
}

// SetScriptRaw sets the "script_raw" field.
func (u *CardUpsertOne) SetScriptRaw(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetScriptRaw(v)
	})
}

// UpdateScriptRaw sets the "script_raw" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateScriptRaw() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScriptRaw()
	})
}

// ClearScriptRaw clears the value of the "script_raw" field.
func (u *CardUpsertOne) ClearScriptRaw() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearScriptRaw()
	})
}

// SetScriptURL sets the "script_url" field.
func (u *CardUpsertOne) SetScriptURL(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetScriptURL(v)
	})
}

// UpdateScriptURL sets the "script_url" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateScriptURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScriptURL()
	})
}

// ClearScriptURL clears the value of the "script_url" field.
func (u *CardUpsertOne) ClearScriptURL() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearScriptURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *CardUpsertOne) SetUserID(v uint64) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateUserID() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CardUpsertOne) ClearUserID() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *CardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CardUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CardUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
	conflict []sql.ConflictOption
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflict(opts ...sql.ConflictOption) *CardUpsertBulk {
	ccb.conflict = opts
	return &CardUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflictColumns(columns ...string) *CardUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertBulk{
		create: ccb,
	}
}

// CardUpsertBulk is the builder for "upsert"-ing
// a bulk of Card nodes.
type CardUpsertBulk struct {
	create *CardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertBulk) UpdateNewValues() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(card.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(card.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CardUpsertBulk) Ignore() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertBulk) DoNothing() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreateBulk.OnConflict
// documentation for more info.
func (u *CardUpsertBulk) Update(set func(*CardUpsert)) *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CardUpsertBulk) SetUpdateTime(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateUpdateTime() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CardUpsertBulk) SetName(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateName() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CardUpsertBulk) SetDescription(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateDescription() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CardUpsertBulk) ClearDescription() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearDescription()
	})
}

// SetPicURL sets the "pic_url" field.
func (u *CardUpsertBulk) SetPicURL(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetPicURL(v)
	})
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdatePicURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdatePicURL()
	})
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *CardUpsertBulk) ClearPicURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearPicURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *CardUpsertBulk) SetThumbnailURL(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateThumbnailURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *CardUpsertBulk) ClearThumbnailURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetResourceURL sets the "resource_url" field.
func (u *CardUpsertBulk) SetResourceURL(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetResourceURL(v)
	})
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateResourceURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateResourceURL()
	})
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *CardUpsertBulk) ClearResourceURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearResourceURL()
	})
}

// SetStatus sets the "status" field.
func (u *CardUpsertBulk) SetStatus(v card.Status) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateStatus() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *CardUpsertBulk) SetType(v card.Type) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateType() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateType()
	})
}

// SetScript sets the "script" field.
func (u *CardUpsertBulk) SetScript(v []string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetScript(v)
	})
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateScript() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScript()
	})
}

// ClearScript clears the value of the "script" field.
func (u *CardUpsertBulk) ClearScript() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearScript()
	})
}

// SetScriptRaw sets the "script_raw" field.
func (u *CardUpsertBulk) SetScriptRaw(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetScriptRaw(v)
	})
}

// UpdateScriptRaw sets the "script_raw" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateScriptRaw() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScriptRaw()
	})
}

// ClearScriptRaw clears the value of the "script_raw" field.
func (u *CardUpsertBulk) ClearScriptRaw() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearScriptRaw()
	})
}

// SetScriptURL sets the "script_url" field.
func (u *CardUpsertBulk) SetScriptURL(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetScriptURL(v)
	})
}

// UpdateScriptURL sets the "script_url" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateScriptURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateScriptURL()
	})
}

// ClearScriptURL clears the value of the "script_url" field.
func (u *CardUpsertBulk) ClearScriptURL() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearScriptURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *CardUpsertBulk) SetUserID(v uint64) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateUserID() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CardUpsertBulk) ClearUserID() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *CardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
