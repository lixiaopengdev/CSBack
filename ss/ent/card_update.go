// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/rule"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CardUpdate) SetUpdateTime(t time.Time) *CardUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CardUpdate) SetName(s string) *CardUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CardUpdate) SetDescription(s string) *CardUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CardUpdate) SetNillableDescription(s *string) *CardUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CardUpdate) ClearDescription() *CardUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetPicURL sets the "pic_url" field.
func (cu *CardUpdate) SetPicURL(s string) *CardUpdate {
	cu.mutation.SetPicURL(s)
	return cu
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (cu *CardUpdate) SetNillablePicURL(s *string) *CardUpdate {
	if s != nil {
		cu.SetPicURL(*s)
	}
	return cu
}

// ClearPicURL clears the value of the "pic_url" field.
func (cu *CardUpdate) ClearPicURL() *CardUpdate {
	cu.mutation.ClearPicURL()
	return cu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (cu *CardUpdate) SetThumbnailURL(s string) *CardUpdate {
	cu.mutation.SetThumbnailURL(s)
	return cu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (cu *CardUpdate) SetNillableThumbnailURL(s *string) *CardUpdate {
	if s != nil {
		cu.SetThumbnailURL(*s)
	}
	return cu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (cu *CardUpdate) ClearThumbnailURL() *CardUpdate {
	cu.mutation.ClearThumbnailURL()
	return cu
}

// SetResourceURL sets the "resource_url" field.
func (cu *CardUpdate) SetResourceURL(s string) *CardUpdate {
	cu.mutation.SetResourceURL(s)
	return cu
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (cu *CardUpdate) SetNillableResourceURL(s *string) *CardUpdate {
	if s != nil {
		cu.SetResourceURL(*s)
	}
	return cu
}

// ClearResourceURL clears the value of the "resource_url" field.
func (cu *CardUpdate) ClearResourceURL() *CardUpdate {
	cu.mutation.ClearResourceURL()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CardUpdate) SetStatus(c card.Status) *CardUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CardUpdate) SetNillableStatus(c *card.Status) *CardUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CardUpdate) SetType(c card.Type) *CardUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CardUpdate) SetNillableType(c *card.Type) *CardUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetScript sets the "script" field.
func (cu *CardUpdate) SetScript(s []string) *CardUpdate {
	cu.mutation.SetScript(s)
	return cu
}

// AppendScript appends s to the "script" field.
func (cu *CardUpdate) AppendScript(s []string) *CardUpdate {
	cu.mutation.AppendScript(s)
	return cu
}

// ClearScript clears the value of the "script" field.
func (cu *CardUpdate) ClearScript() *CardUpdate {
	cu.mutation.ClearScript()
	return cu
}

// SetScriptRaw sets the "script_raw" field.
func (cu *CardUpdate) SetScriptRaw(s string) *CardUpdate {
	cu.mutation.SetScriptRaw(s)
	return cu
}

// SetNillableScriptRaw sets the "script_raw" field if the given value is not nil.
func (cu *CardUpdate) SetNillableScriptRaw(s *string) *CardUpdate {
	if s != nil {
		cu.SetScriptRaw(*s)
	}
	return cu
}

// ClearScriptRaw clears the value of the "script_raw" field.
func (cu *CardUpdate) ClearScriptRaw() *CardUpdate {
	cu.mutation.ClearScriptRaw()
	return cu
}

// SetScriptURL sets the "script_url" field.
func (cu *CardUpdate) SetScriptURL(s string) *CardUpdate {
	cu.mutation.SetScriptURL(s)
	return cu
}

// SetNillableScriptURL sets the "script_url" field if the given value is not nil.
func (cu *CardUpdate) SetNillableScriptURL(s *string) *CardUpdate {
	if s != nil {
		cu.SetScriptURL(*s)
	}
	return cu
}

// ClearScriptURL clears the value of the "script_url" field.
func (cu *CardUpdate) ClearScriptURL() *CardUpdate {
	cu.mutation.ClearScriptURL()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CardUpdate) SetUserID(u uint64) *CardUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillableUserID(u *uint64) *CardUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CardUpdate) ClearUserID() *CardUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// AddRuleIDs adds the "rule" edge to the Rule entity by IDs.
func (cu *CardUpdate) AddRuleIDs(ids ...uint64) *CardUpdate {
	cu.mutation.AddRuleIDs(ids...)
	return cu
}

// AddRule adds the "rule" edges to the Rule entity.
func (cu *CardUpdate) AddRule(r ...*Rule) *CardUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRuleIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CardUpdate) SetOwnerID(id uint64) *CardUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CardUpdate) SetNillableOwnerID(id *uint64) *CardUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CardUpdate) SetOwner(u *User) *CardUpdate {
	return cu.SetOwnerID(u.ID)
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// ClearRule clears all "rule" edges to the Rule entity.
func (cu *CardUpdate) ClearRule() *CardUpdate {
	cu.mutation.ClearRule()
	return cu
}

// RemoveRuleIDs removes the "rule" edge to Rule entities by IDs.
func (cu *CardUpdate) RemoveRuleIDs(ids ...uint64) *CardUpdate {
	cu.mutation.RemoveRuleIDs(ids...)
	return cu
}

// RemoveRule removes "rule" edges to Rule entities.
func (cu *CardUpdate) RemoveRule(r ...*Rule) *CardUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRuleIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CardUpdate) ClearOwner() *CardUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CardUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CardUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := card.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Card.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := card.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Card.type": %w`, err)}
		}
	}
	return nil
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: card.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(card.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(card.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.PicURL(); ok {
		_spec.SetField(card.FieldPicURL, field.TypeString, value)
	}
	if cu.mutation.PicURLCleared() {
		_spec.ClearField(card.FieldPicURL, field.TypeString)
	}
	if value, ok := cu.mutation.ThumbnailURL(); ok {
		_spec.SetField(card.FieldThumbnailURL, field.TypeString, value)
	}
	if cu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(card.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := cu.mutation.ResourceURL(); ok {
		_spec.SetField(card.FieldResourceURL, field.TypeString, value)
	}
	if cu.mutation.ResourceURLCleared() {
		_spec.ClearField(card.FieldResourceURL, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(card.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Script(); ok {
		_spec.SetField(card.FieldScript, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedScript(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, card.FieldScript, value)
		})
	}
	if cu.mutation.ScriptCleared() {
		_spec.ClearField(card.FieldScript, field.TypeJSON)
	}
	if value, ok := cu.mutation.ScriptRaw(); ok {
		_spec.SetField(card.FieldScriptRaw, field.TypeString, value)
	}
	if cu.mutation.ScriptRawCleared() {
		_spec.ClearField(card.FieldScriptRaw, field.TypeString)
	}
	if value, ok := cu.mutation.ScriptURL(); ok {
		_spec.SetField(card.FieldScriptURL, field.TypeString, value)
	}
	if cu.mutation.ScriptURLCleared() {
		_spec.ClearField(card.FieldScriptURL, field.TypeString)
	}
	if cu.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRuleIDs(); len(nodes) > 0 && !cu.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CardUpdateOne) SetUpdateTime(t time.Time) *CardUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CardUpdateOne) SetName(s string) *CardUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CardUpdateOne) SetDescription(s string) *CardUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableDescription(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CardUpdateOne) ClearDescription() *CardUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetPicURL sets the "pic_url" field.
func (cuo *CardUpdateOne) SetPicURL(s string) *CardUpdateOne {
	cuo.mutation.SetPicURL(s)
	return cuo
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillablePicURL(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetPicURL(*s)
	}
	return cuo
}

// ClearPicURL clears the value of the "pic_url" field.
func (cuo *CardUpdateOne) ClearPicURL() *CardUpdateOne {
	cuo.mutation.ClearPicURL()
	return cuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (cuo *CardUpdateOne) SetThumbnailURL(s string) *CardUpdateOne {
	cuo.mutation.SetThumbnailURL(s)
	return cuo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableThumbnailURL(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetThumbnailURL(*s)
	}
	return cuo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (cuo *CardUpdateOne) ClearThumbnailURL() *CardUpdateOne {
	cuo.mutation.ClearThumbnailURL()
	return cuo
}

// SetResourceURL sets the "resource_url" field.
func (cuo *CardUpdateOne) SetResourceURL(s string) *CardUpdateOne {
	cuo.mutation.SetResourceURL(s)
	return cuo
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableResourceURL(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetResourceURL(*s)
	}
	return cuo
}

// ClearResourceURL clears the value of the "resource_url" field.
func (cuo *CardUpdateOne) ClearResourceURL() *CardUpdateOne {
	cuo.mutation.ClearResourceURL()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CardUpdateOne) SetStatus(c card.Status) *CardUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableStatus(c *card.Status) *CardUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CardUpdateOne) SetType(c card.Type) *CardUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableType(c *card.Type) *CardUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetScript sets the "script" field.
func (cuo *CardUpdateOne) SetScript(s []string) *CardUpdateOne {
	cuo.mutation.SetScript(s)
	return cuo
}

// AppendScript appends s to the "script" field.
func (cuo *CardUpdateOne) AppendScript(s []string) *CardUpdateOne {
	cuo.mutation.AppendScript(s)
	return cuo
}

// ClearScript clears the value of the "script" field.
func (cuo *CardUpdateOne) ClearScript() *CardUpdateOne {
	cuo.mutation.ClearScript()
	return cuo
}

// SetScriptRaw sets the "script_raw" field.
func (cuo *CardUpdateOne) SetScriptRaw(s string) *CardUpdateOne {
	cuo.mutation.SetScriptRaw(s)
	return cuo
}

// SetNillableScriptRaw sets the "script_raw" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableScriptRaw(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetScriptRaw(*s)
	}
	return cuo
}

// ClearScriptRaw clears the value of the "script_raw" field.
func (cuo *CardUpdateOne) ClearScriptRaw() *CardUpdateOne {
	cuo.mutation.ClearScriptRaw()
	return cuo
}

// SetScriptURL sets the "script_url" field.
func (cuo *CardUpdateOne) SetScriptURL(s string) *CardUpdateOne {
	cuo.mutation.SetScriptURL(s)
	return cuo
}

// SetNillableScriptURL sets the "script_url" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableScriptURL(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetScriptURL(*s)
	}
	return cuo
}

// ClearScriptURL clears the value of the "script_url" field.
func (cuo *CardUpdateOne) ClearScriptURL() *CardUpdateOne {
	cuo.mutation.ClearScriptURL()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CardUpdateOne) SetUserID(u uint64) *CardUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableUserID(u *uint64) *CardUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CardUpdateOne) ClearUserID() *CardUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// AddRuleIDs adds the "rule" edge to the Rule entity by IDs.
func (cuo *CardUpdateOne) AddRuleIDs(ids ...uint64) *CardUpdateOne {
	cuo.mutation.AddRuleIDs(ids...)
	return cuo
}

// AddRule adds the "rule" edges to the Rule entity.
func (cuo *CardUpdateOne) AddRule(r ...*Rule) *CardUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRuleIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CardUpdateOne) SetOwnerID(id uint64) *CardUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableOwnerID(id *uint64) *CardUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CardUpdateOne) SetOwner(u *User) *CardUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// ClearRule clears all "rule" edges to the Rule entity.
func (cuo *CardUpdateOne) ClearRule() *CardUpdateOne {
	cuo.mutation.ClearRule()
	return cuo
}

// RemoveRuleIDs removes the "rule" edge to Rule entities by IDs.
func (cuo *CardUpdateOne) RemoveRuleIDs(ids ...uint64) *CardUpdateOne {
	cuo.mutation.RemoveRuleIDs(ids...)
	return cuo
}

// RemoveRule removes "rule" edges to Rule entities.
func (cuo *CardUpdateOne) RemoveRule(r ...*Rule) *CardUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRuleIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CardUpdateOne) ClearOwner() *CardUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CardUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CardUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := card.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Card.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := card.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Card.type": %w`, err)}
		}
	}
	return nil
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: card.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(card.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(card.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.PicURL(); ok {
		_spec.SetField(card.FieldPicURL, field.TypeString, value)
	}
	if cuo.mutation.PicURLCleared() {
		_spec.ClearField(card.FieldPicURL, field.TypeString)
	}
	if value, ok := cuo.mutation.ThumbnailURL(); ok {
		_spec.SetField(card.FieldThumbnailURL, field.TypeString, value)
	}
	if cuo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(card.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := cuo.mutation.ResourceURL(); ok {
		_spec.SetField(card.FieldResourceURL, field.TypeString, value)
	}
	if cuo.mutation.ResourceURLCleared() {
		_spec.ClearField(card.FieldResourceURL, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(card.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Script(); ok {
		_spec.SetField(card.FieldScript, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedScript(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, card.FieldScript, value)
		})
	}
	if cuo.mutation.ScriptCleared() {
		_spec.ClearField(card.FieldScript, field.TypeJSON)
	}
	if value, ok := cuo.mutation.ScriptRaw(); ok {
		_spec.SetField(card.FieldScriptRaw, field.TypeString, value)
	}
	if cuo.mutation.ScriptRawCleared() {
		_spec.ClearField(card.FieldScriptRaw, field.TypeString)
	}
	if value, ok := cuo.mutation.ScriptURL(); ok {
		_spec.SetField(card.FieldScriptURL, field.TypeString, value)
	}
	if cuo.mutation.ScriptURLCleared() {
		_spec.ClearField(card.FieldScriptURL, field.TypeString)
	}
	if cuo.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRuleIDs(); len(nodes) > 0 && !cuo.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.RuleTable,
			Columns: card.RulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
