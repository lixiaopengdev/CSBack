// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/collection"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionCreate is the builder for creating a Collection entity.
type CollectionCreate struct {
	config
	mutation *CollectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CollectionCreate) SetCreateTime(t time.Time) *CollectionCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableCreateTime(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CollectionCreate) SetUpdateTime(t time.Time) *CollectionCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableUpdateTime(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CollectionCreate) SetType(c collection.Type) *CollectionCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableType(c *collection.Type) *CollectionCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetItemID sets the "item_id" field.
func (cc *CollectionCreate) SetItemID(u uint64) *CollectionCreate {
	cc.mutation.SetItemID(u)
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CollectionCreate) SetUserID(u uint64) *CollectionCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetID sets the "id" field.
func (cc *CollectionCreate) SetID(u uint64) *CollectionCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CollectionCreate) SetOwnerID(id uint64) *CollectionCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CollectionCreate) SetOwner(u *User) *CollectionCreate {
	return cc.SetOwnerID(u.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cc *CollectionCreate) Mutation() *CollectionMutation {
	return cc.mutation
}

// Save creates the Collection in the database.
func (cc *CollectionCreate) Save(ctx context.Context) (*Collection, error) {
	var (
		err  error
		node *Collection
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Collection)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CollectionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollectionCreate) SaveX(ctx context.Context) *Collection {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CollectionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CollectionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CollectionCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := collection.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := collection.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := collection.DefaultType
		cc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollectionCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Collection.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Collection.update_time"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Collection.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := collection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Collection.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "Collection.item_id"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Collection.user_id"`)}
	}
	if _, ok := cc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Collection.owner"`)}
	}
	return nil
}

func (cc *CollectionCreate) sqlSave(ctx context.Context) (*Collection, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cc *CollectionCreate) createSpec() (*Collection, *sqlgraph.CreateSpec) {
	var (
		_node = &Collection{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: collection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: collection.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(collection.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(collection.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(collection.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.ItemID(); ok {
		_spec.SetField(collection.FieldItemID, field.TypeUint64, value)
		_node.ItemID = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.OwnerTable,
			Columns: []string{collection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collection.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CollectionCreate) OnConflict(opts ...sql.ConflictOption) *CollectionUpsertOne {
	cc.conflict = opts
	return &CollectionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CollectionCreate) OnConflictColumns(columns ...string) *CollectionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CollectionUpsertOne{
		create: cc,
	}
}

type (
	// CollectionUpsertOne is the builder for "upsert"-ing
	//  one Collection node.
	CollectionUpsertOne struct {
		create *CollectionCreate
	}

	// CollectionUpsert is the "OnConflict" setter.
	CollectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CollectionUpsert) SetUpdateTime(v time.Time) *CollectionUpsert {
	u.Set(collection.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateUpdateTime() *CollectionUpsert {
	u.SetExcluded(collection.FieldUpdateTime)
	return u
}

// SetType sets the "type" field.
func (u *CollectionUpsert) SetType(v collection.Type) *CollectionUpsert {
	u.Set(collection.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateType() *CollectionUpsert {
	u.SetExcluded(collection.FieldType)
	return u
}

// SetItemID sets the "item_id" field.
func (u *CollectionUpsert) SetItemID(v uint64) *CollectionUpsert {
	u.Set(collection.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateItemID() *CollectionUpsert {
	u.SetExcluded(collection.FieldItemID)
	return u
}

// AddItemID adds v to the "item_id" field.
func (u *CollectionUpsert) AddItemID(v uint64) *CollectionUpsert {
	u.Add(collection.FieldItemID, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CollectionUpsert) SetUserID(v uint64) *CollectionUpsert {
	u.Set(collection.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateUserID() *CollectionUpsert {
	u.SetExcluded(collection.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(collection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CollectionUpsertOne) UpdateNewValues() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(collection.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(collection.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CollectionUpsertOne) Ignore() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionUpsertOne) DoNothing() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionCreate.OnConflict
// documentation for more info.
func (u *CollectionUpsertOne) Update(set func(*CollectionUpsert)) *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CollectionUpsertOne) SetUpdateTime(v time.Time) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateUpdateTime() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *CollectionUpsertOne) SetType(v collection.Type) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateType() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateType()
	})
}

// SetItemID sets the "item_id" field.
func (u *CollectionUpsertOne) SetItemID(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetItemID(v)
	})
}

// AddItemID adds v to the "item_id" field.
func (u *CollectionUpsertOne) AddItemID(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.AddItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateItemID() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateItemID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CollectionUpsertOne) SetUserID(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateUserID() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *CollectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CollectionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CollectionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CollectionCreateBulk is the builder for creating many Collection entities in bulk.
type CollectionCreateBulk struct {
	config
	builders []*CollectionCreate
	conflict []sql.ConflictOption
}

// Save creates the Collection entities in the database.
func (ccb *CollectionCreateBulk) Save(ctx context.Context) ([]*Collection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collection, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollectionCreateBulk) SaveX(ctx context.Context) []*Collection {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CollectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CollectionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CollectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CollectionUpsertBulk {
	ccb.conflict = opts
	return &CollectionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CollectionCreateBulk) OnConflictColumns(columns ...string) *CollectionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CollectionUpsertBulk{
		create: ccb,
	}
}

// CollectionUpsertBulk is the builder for "upsert"-ing
// a bulk of Collection nodes.
type CollectionUpsertBulk struct {
	create *CollectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(collection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CollectionUpsertBulk) UpdateNewValues() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(collection.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(collection.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CollectionUpsertBulk) Ignore() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionUpsertBulk) DoNothing() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionCreateBulk.OnConflict
// documentation for more info.
func (u *CollectionUpsertBulk) Update(set func(*CollectionUpsert)) *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CollectionUpsertBulk) SetUpdateTime(v time.Time) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateUpdateTime() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *CollectionUpsertBulk) SetType(v collection.Type) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateType() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateType()
	})
}

// SetItemID sets the "item_id" field.
func (u *CollectionUpsertBulk) SetItemID(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetItemID(v)
	})
}

// AddItemID adds v to the "item_id" field.
func (u *CollectionUpsertBulk) AddItemID(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.AddItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateItemID() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateItemID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CollectionUpsertBulk) SetUserID(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateUserID() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *CollectionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CollectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
