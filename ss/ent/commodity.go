// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/commodity"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Commodity is the model entity for the Commodity schema.
type Commodity struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommodityQuery when eager-loading is set.
	Edges CommodityEdges `json:"edges"`
}

// CommodityEdges holds the relations/edges for other nodes in the graph.
type CommodityEdges struct {
	// Card holds the value of the card edge.
	Card []*Card `json:"card,omitempty"`
	// NFT holds the value of the NFT edge.
	NFT []*NFT `json:"NFT,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading.
func (e CommodityEdges) CardOrErr() ([]*Card, error) {
	if e.loadedTypes[0] {
		return e.Card, nil
	}
	return nil, &NotLoadedError{edge: "card"}
}

// NFTOrErr returns the NFT value or an error if the edge
// was not loaded in eager-loading.
func (e CommodityEdges) NFTOrErr() ([]*NFT, error) {
	if e.loadedTypes[1] {
		return e.NFT, nil
	}
	return nil, &NotLoadedError{edge: "NFT"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commodity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commodity.FieldID:
			values[i] = new(sql.NullInt64)
		case commodity.FieldName:
			values[i] = new(sql.NullString)
		case commodity.FieldCreateTime, commodity.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commodity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commodity fields.
func (c *Commodity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commodity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case commodity.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case commodity.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case commodity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		}
	}
	return nil
}

// QueryCard queries the "card" edge of the Commodity entity.
func (c *Commodity) QueryCard() *CardQuery {
	return (&CommodityClient{config: c.config}).QueryCard(c)
}

// QueryNFT queries the "NFT" edge of the Commodity entity.
func (c *Commodity) QueryNFT() *NFTQuery {
	return (&CommodityClient{config: c.config}).QueryNFT(c)
}

// Update returns a builder for updating this Commodity.
// Note that you need to call Commodity.Unwrap() before calling this method if this Commodity
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commodity) Update() *CommodityUpdateOne {
	return (&CommodityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commodity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commodity) Unwrap() *Commodity {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commodity is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commodity) String() string {
	var builder strings.Builder
	builder.WriteString("Commodity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Commodities is a parsable slice of Commodity.
type Commodities []*Commodity

func (c Commodities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
