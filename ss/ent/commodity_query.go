// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/commodity"
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommodityQuery is the builder for querying Commodity entities.
type CommodityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Commodity
	withCard   *CardQuery
	withNFT    *NFTQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CommodityQuery builder.
func (cq *CommodityQuery) Where(ps ...predicate.Commodity) *CommodityQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit adds a limit step to the query.
func (cq *CommodityQuery) Limit(limit int) *CommodityQuery {
	cq.limit = &limit
	return cq
}

// Offset adds an offset step to the query.
func (cq *CommodityQuery) Offset(offset int) *CommodityQuery {
	cq.offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CommodityQuery) Unique(unique bool) *CommodityQuery {
	cq.unique = &unique
	return cq
}

// Order adds an order step to the query.
func (cq *CommodityQuery) Order(o ...OrderFunc) *CommodityQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryCard chains the current query on the "card" edge.
func (cq *CommodityQuery) QueryCard() *CardQuery {
	query := &CardQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(commodity.Table, commodity.FieldID, selector),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, commodity.CardTable, commodity.CardColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNFT chains the current query on the "NFT" edge.
func (cq *CommodityQuery) QueryNFT() *NFTQuery {
	query := &NFTQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(commodity.Table, commodity.FieldID, selector),
			sqlgraph.To(nft.Table, nft.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, commodity.NFTTable, commodity.NFTColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Commodity entity from the query.
// Returns a *NotFoundError when no Commodity was found.
func (cq *CommodityQuery) First(ctx context.Context) (*Commodity, error) {
	nodes, err := cq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{commodity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CommodityQuery) FirstX(ctx context.Context) *Commodity {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Commodity ID from the query.
// Returns a *NotFoundError when no Commodity ID was found.
func (cq *CommodityQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{commodity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CommodityQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Commodity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Commodity entity is found.
// Returns a *NotFoundError when no Commodity entities are found.
func (cq *CommodityQuery) Only(ctx context.Context) (*Commodity, error) {
	nodes, err := cq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{commodity.Label}
	default:
		return nil, &NotSingularError{commodity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CommodityQuery) OnlyX(ctx context.Context) *Commodity {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Commodity ID in the query.
// Returns a *NotSingularError when more than one Commodity ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CommodityQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{commodity.Label}
	default:
		err = &NotSingularError{commodity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CommodityQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Commodities.
func (cq *CommodityQuery) All(ctx context.Context) ([]*Commodity, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cq *CommodityQuery) AllX(ctx context.Context) []*Commodity {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Commodity IDs.
func (cq *CommodityQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := cq.Select(commodity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CommodityQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CommodityQuery) Count(ctx context.Context) (int, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CommodityQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CommodityQuery) Exist(ctx context.Context) (bool, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CommodityQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CommodityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CommodityQuery) Clone() *CommodityQuery {
	if cq == nil {
		return nil
	}
	return &CommodityQuery{
		config:     cq.config,
		limit:      cq.limit,
		offset:     cq.offset,
		order:      append([]OrderFunc{}, cq.order...),
		predicates: append([]predicate.Commodity{}, cq.predicates...),
		withCard:   cq.withCard.Clone(),
		withNFT:    cq.withNFT.Clone(),
		// clone intermediate query.
		sql:    cq.sql.Clone(),
		path:   cq.path,
		unique: cq.unique,
	}
}

// WithCard tells the query-builder to eager-load the nodes that are connected to
// the "card" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CommodityQuery) WithCard(opts ...func(*CardQuery)) *CommodityQuery {
	query := &CardQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withCard = query
	return cq
}

// WithNFT tells the query-builder to eager-load the nodes that are connected to
// the "NFT" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CommodityQuery) WithNFT(opts ...func(*NFTQuery)) *CommodityQuery {
	query := &NFTQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withNFT = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Commodity.Query().
//		GroupBy(commodity.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CommodityQuery) GroupBy(field string, fields ...string) *CommodityGroupBy {
	grbuild := &CommodityGroupBy{config: cq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cq.sqlQuery(ctx), nil
	}
	grbuild.label = commodity.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Commodity.Query().
//		Select(commodity.FieldCreateTime).
//		Scan(ctx, &v)
func (cq *CommodityQuery) Select(fields ...string) *CommoditySelect {
	cq.fields = append(cq.fields, fields...)
	selbuild := &CommoditySelect{CommodityQuery: cq}
	selbuild.label = commodity.Label
	selbuild.flds, selbuild.scan = &cq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a CommoditySelect configured with the given aggregations.
func (cq *CommodityQuery) Aggregate(fns ...AggregateFunc) *CommoditySelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CommodityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cq.fields {
		if !commodity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CommodityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Commodity, error) {
	var (
		nodes       = []*Commodity{}
		_spec       = cq.querySpec()
		loadedTypes = [2]bool{
			cq.withCard != nil,
			cq.withNFT != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Commodity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Commodity{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withCard; query != nil {
		if err := cq.loadCard(ctx, query, nodes,
			func(n *Commodity) { n.Edges.Card = []*Card{} },
			func(n *Commodity, e *Card) { n.Edges.Card = append(n.Edges.Card, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withNFT; query != nil {
		if err := cq.loadNFT(ctx, query, nodes,
			func(n *Commodity) { n.Edges.NFT = []*NFT{} },
			func(n *Commodity, e *NFT) { n.Edges.NFT = append(n.Edges.NFT, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CommodityQuery) loadCard(ctx context.Context, query *CardQuery, nodes []*Commodity, init func(*Commodity), assign func(*Commodity, *Card)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Commodity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Card(func(s *sql.Selector) {
		s.Where(sql.InValues(commodity.CardColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.commodity_card
		if fk == nil {
			return fmt.Errorf(`foreign-key "commodity_card" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "commodity_card" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CommodityQuery) loadNFT(ctx context.Context, query *NFTQuery, nodes []*Commodity, init func(*Commodity), assign func(*Commodity, *NFT)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Commodity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.InValues(commodity.NFTColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.commodity_nft
		if fk == nil {
			return fmt.Errorf(`foreign-key "commodity_nft" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "commodity_nft" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *CommodityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Columns = cq.fields
	if len(cq.fields) > 0 {
		_spec.Unique = cq.unique != nil && *cq.unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CommodityQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cq *CommodityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commodity.Table,
			Columns: commodity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commodity.FieldID,
			},
		},
		From:   cq.sql,
		Unique: true,
	}
	if unique := cq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commodity.FieldID)
		for i := range fields {
			if fields[i] != commodity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CommodityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(commodity.Table)
	columns := cq.fields
	if len(columns) == 0 {
		columns = commodity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.unique != nil && *cq.unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CommodityGroupBy is the group-by builder for Commodity entities.
type CommodityGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CommodityGroupBy) Aggregate(fns ...AggregateFunc) *CommodityGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cgb *CommodityGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cgb.path(ctx)
	if err != nil {
		return err
	}
	cgb.sql = query
	return cgb.sqlScan(ctx, v)
}

func (cgb *CommodityGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cgb.fields {
		if !commodity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cgb *CommodityGroupBy) sqlQuery() *sql.Selector {
	selector := cgb.sql.Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cgb.fields)+len(cgb.fns))
		for _, f := range cgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cgb.fields...)...)
}

// CommoditySelect is the builder for selecting fields of Commodity entities.
type CommoditySelect struct {
	*CommodityQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CommoditySelect) Aggregate(fns ...AggregateFunc) *CommoditySelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CommoditySelect) Scan(ctx context.Context, v any) error {
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	cs.sql = cs.CommodityQuery.sqlQuery(ctx)
	return cs.sqlScan(ctx, v)
}

func (cs *CommoditySelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(cs.sql))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		cs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		cs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := cs.sql.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
