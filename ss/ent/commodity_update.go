// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/commodity"
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommodityUpdate is the builder for updating Commodity entities.
type CommodityUpdate struct {
	config
	hooks    []Hook
	mutation *CommodityMutation
}

// Where appends a list predicates to the CommodityUpdate builder.
func (cu *CommodityUpdate) Where(ps ...predicate.Commodity) *CommodityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CommodityUpdate) SetUpdateTime(t time.Time) *CommodityUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CommodityUpdate) SetName(s string) *CommodityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// AddCardIDs adds the "card" edge to the Card entity by IDs.
func (cu *CommodityUpdate) AddCardIDs(ids ...uint64) *CommodityUpdate {
	cu.mutation.AddCardIDs(ids...)
	return cu
}

// AddCard adds the "card" edges to the Card entity.
func (cu *CommodityUpdate) AddCard(c ...*Card) *CommodityUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCardIDs(ids...)
}

// AddNFTIDs adds the "NFT" edge to the NFT entity by IDs.
func (cu *CommodityUpdate) AddNFTIDs(ids ...uint64) *CommodityUpdate {
	cu.mutation.AddNFTIDs(ids...)
	return cu
}

// AddNFT adds the "NFT" edges to the NFT entity.
func (cu *CommodityUpdate) AddNFT(n ...*NFT) *CommodityUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNFTIDs(ids...)
}

// Mutation returns the CommodityMutation object of the builder.
func (cu *CommodityUpdate) Mutation() *CommodityMutation {
	return cu.mutation
}

// ClearCard clears all "card" edges to the Card entity.
func (cu *CommodityUpdate) ClearCard() *CommodityUpdate {
	cu.mutation.ClearCard()
	return cu
}

// RemoveCardIDs removes the "card" edge to Card entities by IDs.
func (cu *CommodityUpdate) RemoveCardIDs(ids ...uint64) *CommodityUpdate {
	cu.mutation.RemoveCardIDs(ids...)
	return cu
}

// RemoveCard removes "card" edges to Card entities.
func (cu *CommodityUpdate) RemoveCard(c ...*Card) *CommodityUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCardIDs(ids...)
}

// ClearNFT clears all "NFT" edges to the NFT entity.
func (cu *CommodityUpdate) ClearNFT() *CommodityUpdate {
	cu.mutation.ClearNFT()
	return cu
}

// RemoveNFTIDs removes the "NFT" edge to NFT entities by IDs.
func (cu *CommodityUpdate) RemoveNFTIDs(ids ...uint64) *CommodityUpdate {
	cu.mutation.RemoveNFTIDs(ids...)
	return cu
}

// RemoveNFT removes "NFT" edges to NFT entities.
func (cu *CommodityUpdate) RemoveNFT(n ...*NFT) *CommodityUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNFTIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommodityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommodityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommodityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommodityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommodityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommodityUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := commodity.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *CommodityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commodity.Table,
			Columns: commodity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commodity.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(commodity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(commodity.FieldName, field.TypeString, value)
	}
	if cu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCardIDs(); len(nodes) > 0 && !cu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NFTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNFTIDs(); len(nodes) > 0 && !cu.mutation.NFTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NFTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CommodityUpdateOne is the builder for updating a single Commodity entity.
type CommodityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommodityMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CommodityUpdateOne) SetUpdateTime(t time.Time) *CommodityUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CommodityUpdateOne) SetName(s string) *CommodityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// AddCardIDs adds the "card" edge to the Card entity by IDs.
func (cuo *CommodityUpdateOne) AddCardIDs(ids ...uint64) *CommodityUpdateOne {
	cuo.mutation.AddCardIDs(ids...)
	return cuo
}

// AddCard adds the "card" edges to the Card entity.
func (cuo *CommodityUpdateOne) AddCard(c ...*Card) *CommodityUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCardIDs(ids...)
}

// AddNFTIDs adds the "NFT" edge to the NFT entity by IDs.
func (cuo *CommodityUpdateOne) AddNFTIDs(ids ...uint64) *CommodityUpdateOne {
	cuo.mutation.AddNFTIDs(ids...)
	return cuo
}

// AddNFT adds the "NFT" edges to the NFT entity.
func (cuo *CommodityUpdateOne) AddNFT(n ...*NFT) *CommodityUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNFTIDs(ids...)
}

// Mutation returns the CommodityMutation object of the builder.
func (cuo *CommodityUpdateOne) Mutation() *CommodityMutation {
	return cuo.mutation
}

// ClearCard clears all "card" edges to the Card entity.
func (cuo *CommodityUpdateOne) ClearCard() *CommodityUpdateOne {
	cuo.mutation.ClearCard()
	return cuo
}

// RemoveCardIDs removes the "card" edge to Card entities by IDs.
func (cuo *CommodityUpdateOne) RemoveCardIDs(ids ...uint64) *CommodityUpdateOne {
	cuo.mutation.RemoveCardIDs(ids...)
	return cuo
}

// RemoveCard removes "card" edges to Card entities.
func (cuo *CommodityUpdateOne) RemoveCard(c ...*Card) *CommodityUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCardIDs(ids...)
}

// ClearNFT clears all "NFT" edges to the NFT entity.
func (cuo *CommodityUpdateOne) ClearNFT() *CommodityUpdateOne {
	cuo.mutation.ClearNFT()
	return cuo
}

// RemoveNFTIDs removes the "NFT" edge to NFT entities by IDs.
func (cuo *CommodityUpdateOne) RemoveNFTIDs(ids ...uint64) *CommodityUpdateOne {
	cuo.mutation.RemoveNFTIDs(ids...)
	return cuo
}

// RemoveNFT removes "NFT" edges to NFT entities.
func (cuo *CommodityUpdateOne) RemoveNFT(n ...*NFT) *CommodityUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNFTIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommodityUpdateOne) Select(field string, fields ...string) *CommodityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commodity entity.
func (cuo *CommodityUpdateOne) Save(ctx context.Context) (*Commodity, error) {
	var (
		err  error
		node *Commodity
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommodityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Commodity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CommodityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommodityUpdateOne) SaveX(ctx context.Context) *Commodity {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommodityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommodityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommodityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := commodity.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *CommodityUpdateOne) sqlSave(ctx context.Context) (_node *Commodity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commodity.Table,
			Columns: commodity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commodity.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Commodity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commodity.FieldID)
		for _, f := range fields {
			if !commodity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commodity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(commodity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(commodity.FieldName, field.TypeString, value)
	}
	if cuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCardIDs(); len(nodes) > 0 && !cuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.CardTable,
			Columns: []string{commodity.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NFTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNFTIDs(); len(nodes) > 0 && !cuo.mutation.NFTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NFTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commodity.NFTTable,
			Columns: []string{commodity.NFTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Commodity{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
