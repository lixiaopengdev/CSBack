// Code generated by ent, DO NOT EDIT.

package csfield

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the csfield type in the database.
	Label = "cs_field"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMode holds the string denoting the mode field in the database.
	FieldMode = "mode"
	// FieldPrivateLevel holds the string denoting the private_level field in the database.
	FieldPrivateLevel = "private_level"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMasterID holds the string denoting the master_id field in the database.
	FieldMasterID = "master_id"
	// EdgeJoinedUser holds the string denoting the joined_user edge name in mutations.
	EdgeJoinedUser = "joined_user"
	// EdgeJoins holds the string denoting the joins edge name in mutations.
	EdgeJoins = "joins"
	// Table holds the table name of the csfield in the database.
	Table = "cs_fields"
	// JoinedUserTable is the table that holds the joined_user relation/edge. The primary key declared below.
	JoinedUserTable = "joins"
	// JoinedUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	JoinedUserInverseTable = "users"
	// JoinsTable is the table that holds the joins relation/edge.
	JoinsTable = "joins"
	// JoinsInverseTable is the table name for the Join entity.
	// It exists in this package in order to avoid circular dependency with the "join" package.
	JoinsInverseTable = "joins"
	// JoinsColumn is the table column denoting the joins relation/edge.
	JoinsColumn = "cs_field_id"
)

// Columns holds all SQL columns for csfield fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldStatus,
	FieldType,
	FieldMode,
	FieldPrivateLevel,
	FieldUserID,
	FieldMasterID,
}

var (
	// JoinedUserPrimaryKey and JoinedUserColumn2 are the table columns denoting the
	// primary key for the joined_user relation (M2M).
	JoinedUserPrimaryKey = []string{"user_id", "cs_field_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusCreating Status = "creating"
	StatusOpening  Status = "opening"
	StatusEnd      Status = "end"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCreating, StatusOpening, StatusEnd:
		return nil
	default:
		return fmt.Errorf("csfield: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeEmpty Type = "empty"
	TypeVideo Type = "video"
	TypeAudio Type = "audio"
	TypeText  Type = "text"
	TypeMixed Type = "mixed"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeEmpty, TypeVideo, TypeAudio, TypeText, TypeMixed:
		return nil
	default:
		return fmt.Errorf("csfield: invalid enum value for type field: %q", _type)
	}
}

// Mode defines the type for the "mode" enum field.
type Mode string

// Mode values.
const (
	ModeSingle Mode = "single"
	ModeMulti  Mode = "multi"
)

func (m Mode) String() string {
	return string(m)
}

// ModeValidator is a validator for the "mode" field enum values. It is called by the builders before save.
func ModeValidator(m Mode) error {
	switch m {
	case ModeSingle, ModeMulti:
		return nil
	default:
		return fmt.Errorf("csfield: invalid enum value for mode field: %q", m)
	}
}

// PrivateLevel defines the type for the "private_level" enum field.
type PrivateLevel string

// PrivateLevelPublic is the default value of the PrivateLevel enum.
const DefaultPrivateLevel = PrivateLevelPublic

// PrivateLevel values.
const (
	PrivateLevelPublic  PrivateLevel = "public"
	PrivateLevelGhost   PrivateLevel = "ghost"
	PrivateLevelPrivate PrivateLevel = "private"
)

func (pl PrivateLevel) String() string {
	return string(pl)
}

// PrivateLevelValidator is a validator for the "private_level" field enum values. It is called by the builders before save.
func PrivateLevelValidator(pl PrivateLevel) error {
	switch pl {
	case PrivateLevelPublic, PrivateLevelGhost, PrivateLevelPrivate:
		return nil
	default:
		return fmt.Errorf("csfield: invalid enum value for private_level field: %q", pl)
	}
}
