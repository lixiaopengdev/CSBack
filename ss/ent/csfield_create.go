// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CSFieldCreate is the builder for creating a CSField entity.
type CSFieldCreate struct {
	config
	mutation *CSFieldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cfc *CSFieldCreate) SetCreateTime(t time.Time) *CSFieldCreate {
	cfc.mutation.SetCreateTime(t)
	return cfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cfc *CSFieldCreate) SetNillableCreateTime(t *time.Time) *CSFieldCreate {
	if t != nil {
		cfc.SetCreateTime(*t)
	}
	return cfc
}

// SetUpdateTime sets the "update_time" field.
func (cfc *CSFieldCreate) SetUpdateTime(t time.Time) *CSFieldCreate {
	cfc.mutation.SetUpdateTime(t)
	return cfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cfc *CSFieldCreate) SetNillableUpdateTime(t *time.Time) *CSFieldCreate {
	if t != nil {
		cfc.SetUpdateTime(*t)
	}
	return cfc
}

// SetName sets the "name" field.
func (cfc *CSFieldCreate) SetName(s string) *CSFieldCreate {
	cfc.mutation.SetName(s)
	return cfc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfc *CSFieldCreate) SetNillableName(s *string) *CSFieldCreate {
	if s != nil {
		cfc.SetName(*s)
	}
	return cfc
}

// SetStatus sets the "status" field.
func (cfc *CSFieldCreate) SetStatus(c csfield.Status) *CSFieldCreate {
	cfc.mutation.SetStatus(c)
	return cfc
}

// SetType sets the "type" field.
func (cfc *CSFieldCreate) SetType(c csfield.Type) *CSFieldCreate {
	cfc.mutation.SetType(c)
	return cfc
}

// SetMode sets the "mode" field.
func (cfc *CSFieldCreate) SetMode(c csfield.Mode) *CSFieldCreate {
	cfc.mutation.SetMode(c)
	return cfc
}

// SetPrivateLevel sets the "private_level" field.
func (cfc *CSFieldCreate) SetPrivateLevel(cl csfield.PrivateLevel) *CSFieldCreate {
	cfc.mutation.SetPrivateLevel(cl)
	return cfc
}

// SetNillablePrivateLevel sets the "private_level" field if the given value is not nil.
func (cfc *CSFieldCreate) SetNillablePrivateLevel(cl *csfield.PrivateLevel) *CSFieldCreate {
	if cl != nil {
		cfc.SetPrivateLevel(*cl)
	}
	return cfc
}

// SetUserID sets the "user_id" field.
func (cfc *CSFieldCreate) SetUserID(u uint64) *CSFieldCreate {
	cfc.mutation.SetUserID(u)
	return cfc
}

// SetMasterID sets the "master_id" field.
func (cfc *CSFieldCreate) SetMasterID(u uint64) *CSFieldCreate {
	cfc.mutation.SetMasterID(u)
	return cfc
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (cfc *CSFieldCreate) SetNillableMasterID(u *uint64) *CSFieldCreate {
	if u != nil {
		cfc.SetMasterID(*u)
	}
	return cfc
}

// SetID sets the "id" field.
func (cfc *CSFieldCreate) SetID(u uint64) *CSFieldCreate {
	cfc.mutation.SetID(u)
	return cfc
}

// AddJoinedUserIDs adds the "joined_user" edge to the User entity by IDs.
func (cfc *CSFieldCreate) AddJoinedUserIDs(ids ...uint64) *CSFieldCreate {
	cfc.mutation.AddJoinedUserIDs(ids...)
	return cfc
}

// AddJoinedUser adds the "joined_user" edges to the User entity.
func (cfc *CSFieldCreate) AddJoinedUser(u ...*User) *CSFieldCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfc.AddJoinedUserIDs(ids...)
}

// AddJoinIDs adds the "joins" edge to the Join entity by IDs.
func (cfc *CSFieldCreate) AddJoinIDs(ids ...int) *CSFieldCreate {
	cfc.mutation.AddJoinIDs(ids...)
	return cfc
}

// AddJoins adds the "joins" edges to the Join entity.
func (cfc *CSFieldCreate) AddJoins(j ...*Join) *CSFieldCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cfc.AddJoinIDs(ids...)
}

// Mutation returns the CSFieldMutation object of the builder.
func (cfc *CSFieldCreate) Mutation() *CSFieldMutation {
	return cfc.mutation
}

// Save creates the CSField in the database.
func (cfc *CSFieldCreate) Save(ctx context.Context) (*CSField, error) {
	var (
		err  error
		node *CSField
	)
	cfc.defaults()
	if len(cfc.hooks) == 0 {
		if err = cfc.check(); err != nil {
			return nil, err
		}
		node, err = cfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CSFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfc.check(); err != nil {
				return nil, err
			}
			cfc.mutation = mutation
			if node, err = cfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cfc.hooks) - 1; i >= 0; i-- {
			if cfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CSField)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CSFieldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CSFieldCreate) SaveX(ctx context.Context) *CSField {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CSFieldCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CSFieldCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfc *CSFieldCreate) defaults() {
	if _, ok := cfc.mutation.CreateTime(); !ok {
		v := csfield.DefaultCreateTime()
		cfc.mutation.SetCreateTime(v)
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		v := csfield.DefaultUpdateTime()
		cfc.mutation.SetUpdateTime(v)
	}
	if _, ok := cfc.mutation.PrivateLevel(); !ok {
		v := csfield.DefaultPrivateLevel
		cfc.mutation.SetPrivateLevel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CSFieldCreate) check() error {
	if _, ok := cfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CSField.create_time"`)}
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CSField.update_time"`)}
	}
	if _, ok := cfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CSField.status"`)}
	}
	if v, ok := cfc.mutation.Status(); ok {
		if err := csfield.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CSField.status": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CSField.type"`)}
	}
	if v, ok := cfc.mutation.GetType(); ok {
		if err := csfield.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CSField.type": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "CSField.mode"`)}
	}
	if v, ok := cfc.mutation.Mode(); ok {
		if err := csfield.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CSField.mode": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.PrivateLevel(); !ok {
		return &ValidationError{Name: "private_level", err: errors.New(`ent: missing required field "CSField.private_level"`)}
	}
	if v, ok := cfc.mutation.PrivateLevel(); ok {
		if err := csfield.PrivateLevelValidator(v); err != nil {
			return &ValidationError{Name: "private_level", err: fmt.Errorf(`ent: validator failed for field "CSField.private_level": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CSField.user_id"`)}
	}
	return nil
}

func (cfc *CSFieldCreate) sqlSave(ctx context.Context) (*CSField, error) {
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cfc *CSFieldCreate) createSpec() (*CSField, *sqlgraph.CreateSpec) {
	var (
		_node = &CSField{config: cfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: csfield.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: csfield.FieldID,
			},
		}
	)
	_spec.OnConflict = cfc.conflict
	if id, ok := cfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfc.mutation.CreateTime(); ok {
		_spec.SetField(csfield.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cfc.mutation.UpdateTime(); ok {
		_spec.SetField(csfield.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cfc.mutation.Name(); ok {
		_spec.SetField(csfield.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cfc.mutation.Status(); ok {
		_spec.SetField(csfield.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cfc.mutation.GetType(); ok {
		_spec.SetField(csfield.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cfc.mutation.Mode(); ok {
		_spec.SetField(csfield.FieldMode, field.TypeEnum, value)
		_node.Mode = value
	}
	if value, ok := cfc.mutation.PrivateLevel(); ok {
		_spec.SetField(csfield.FieldPrivateLevel, field.TypeEnum, value)
		_node.PrivateLevel = value
	}
	if value, ok := cfc.mutation.UserID(); ok {
		_spec.SetField(csfield.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := cfc.mutation.MasterID(); ok {
		_spec.SetField(csfield.FieldMasterID, field.TypeUint64, value)
		_node.MasterID = value
	}
	if nodes := cfc.mutation.JoinedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: cfc.config, mutation: newJoinMutation(cfc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cfc.mutation.JoinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CSField.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CSFieldUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cfc *CSFieldCreate) OnConflict(opts ...sql.ConflictOption) *CSFieldUpsertOne {
	cfc.conflict = opts
	return &CSFieldUpsertOne{
		create: cfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CSField.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfc *CSFieldCreate) OnConflictColumns(columns ...string) *CSFieldUpsertOne {
	cfc.conflict = append(cfc.conflict, sql.ConflictColumns(columns...))
	return &CSFieldUpsertOne{
		create: cfc,
	}
}

type (
	// CSFieldUpsertOne is the builder for "upsert"-ing
	//  one CSField node.
	CSFieldUpsertOne struct {
		create *CSFieldCreate
	}

	// CSFieldUpsert is the "OnConflict" setter.
	CSFieldUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CSFieldUpsert) SetUpdateTime(v time.Time) *CSFieldUpsert {
	u.Set(csfield.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateUpdateTime() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *CSFieldUpsert) SetName(v string) *CSFieldUpsert {
	u.Set(csfield.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateName() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CSFieldUpsert) ClearName() *CSFieldUpsert {
	u.SetNull(csfield.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *CSFieldUpsert) SetStatus(v csfield.Status) *CSFieldUpsert {
	u.Set(csfield.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateStatus() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *CSFieldUpsert) SetType(v csfield.Type) *CSFieldUpsert {
	u.Set(csfield.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateType() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldType)
	return u
}

// SetMode sets the "mode" field.
func (u *CSFieldUpsert) SetMode(v csfield.Mode) *CSFieldUpsert {
	u.Set(csfield.FieldMode, v)
	return u
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateMode() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldMode)
	return u
}

// SetPrivateLevel sets the "private_level" field.
func (u *CSFieldUpsert) SetPrivateLevel(v csfield.PrivateLevel) *CSFieldUpsert {
	u.Set(csfield.FieldPrivateLevel, v)
	return u
}

// UpdatePrivateLevel sets the "private_level" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdatePrivateLevel() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldPrivateLevel)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CSFieldUpsert) SetUserID(v uint64) *CSFieldUpsert {
	u.Set(csfield.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateUserID() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *CSFieldUpsert) AddUserID(v uint64) *CSFieldUpsert {
	u.Add(csfield.FieldUserID, v)
	return u
}

// SetMasterID sets the "master_id" field.
func (u *CSFieldUpsert) SetMasterID(v uint64) *CSFieldUpsert {
	u.Set(csfield.FieldMasterID, v)
	return u
}

// UpdateMasterID sets the "master_id" field to the value that was provided on create.
func (u *CSFieldUpsert) UpdateMasterID() *CSFieldUpsert {
	u.SetExcluded(csfield.FieldMasterID)
	return u
}

// AddMasterID adds v to the "master_id" field.
func (u *CSFieldUpsert) AddMasterID(v uint64) *CSFieldUpsert {
	u.Add(csfield.FieldMasterID, v)
	return u
}

// ClearMasterID clears the value of the "master_id" field.
func (u *CSFieldUpsert) ClearMasterID() *CSFieldUpsert {
	u.SetNull(csfield.FieldMasterID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CSField.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(csfield.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CSFieldUpsertOne) UpdateNewValues() *CSFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(csfield.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(csfield.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CSField.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CSFieldUpsertOne) Ignore() *CSFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CSFieldUpsertOne) DoNothing() *CSFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CSFieldCreate.OnConflict
// documentation for more info.
func (u *CSFieldUpsertOne) Update(set func(*CSFieldUpsert)) *CSFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CSFieldUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CSFieldUpsertOne) SetUpdateTime(v time.Time) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateUpdateTime() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CSFieldUpsertOne) SetName(v string) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateName() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CSFieldUpsertOne) ClearName() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *CSFieldUpsertOne) SetStatus(v csfield.Status) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateStatus() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *CSFieldUpsertOne) SetType(v csfield.Type) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateType() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateType()
	})
}

// SetMode sets the "mode" field.
func (u *CSFieldUpsertOne) SetMode(v csfield.Mode) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateMode() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateMode()
	})
}

// SetPrivateLevel sets the "private_level" field.
func (u *CSFieldUpsertOne) SetPrivateLevel(v csfield.PrivateLevel) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetPrivateLevel(v)
	})
}

// UpdatePrivateLevel sets the "private_level" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdatePrivateLevel() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdatePrivateLevel()
	})
}

// SetUserID sets the "user_id" field.
func (u *CSFieldUpsertOne) SetUserID(v uint64) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *CSFieldUpsertOne) AddUserID(v uint64) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateUserID() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateUserID()
	})
}

// SetMasterID sets the "master_id" field.
func (u *CSFieldUpsertOne) SetMasterID(v uint64) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetMasterID(v)
	})
}

// AddMasterID adds v to the "master_id" field.
func (u *CSFieldUpsertOne) AddMasterID(v uint64) *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.AddMasterID(v)
	})
}

// UpdateMasterID sets the "master_id" field to the value that was provided on create.
func (u *CSFieldUpsertOne) UpdateMasterID() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateMasterID()
	})
}

// ClearMasterID clears the value of the "master_id" field.
func (u *CSFieldUpsertOne) ClearMasterID() *CSFieldUpsertOne {
	return u.Update(func(s *CSFieldUpsert) {
		s.ClearMasterID()
	})
}

// Exec executes the query.
func (u *CSFieldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CSFieldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CSFieldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CSFieldUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CSFieldUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CSFieldCreateBulk is the builder for creating many CSField entities in bulk.
type CSFieldCreateBulk struct {
	config
	builders []*CSFieldCreate
	conflict []sql.ConflictOption
}

// Save creates the CSField entities in the database.
func (cfcb *CSFieldCreateBulk) Save(ctx context.Context) ([]*CSField, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CSField, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CSFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CSFieldCreateBulk) SaveX(ctx context.Context) []*CSField {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CSFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CSFieldCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CSField.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CSFieldUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cfcb *CSFieldCreateBulk) OnConflict(opts ...sql.ConflictOption) *CSFieldUpsertBulk {
	cfcb.conflict = opts
	return &CSFieldUpsertBulk{
		create: cfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CSField.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfcb *CSFieldCreateBulk) OnConflictColumns(columns ...string) *CSFieldUpsertBulk {
	cfcb.conflict = append(cfcb.conflict, sql.ConflictColumns(columns...))
	return &CSFieldUpsertBulk{
		create: cfcb,
	}
}

// CSFieldUpsertBulk is the builder for "upsert"-ing
// a bulk of CSField nodes.
type CSFieldUpsertBulk struct {
	create *CSFieldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CSField.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(csfield.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CSFieldUpsertBulk) UpdateNewValues() *CSFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(csfield.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(csfield.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CSField.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CSFieldUpsertBulk) Ignore() *CSFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CSFieldUpsertBulk) DoNothing() *CSFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CSFieldCreateBulk.OnConflict
// documentation for more info.
func (u *CSFieldUpsertBulk) Update(set func(*CSFieldUpsert)) *CSFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CSFieldUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CSFieldUpsertBulk) SetUpdateTime(v time.Time) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateUpdateTime() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CSFieldUpsertBulk) SetName(v string) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateName() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CSFieldUpsertBulk) ClearName() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *CSFieldUpsertBulk) SetStatus(v csfield.Status) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateStatus() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *CSFieldUpsertBulk) SetType(v csfield.Type) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateType() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateType()
	})
}

// SetMode sets the "mode" field.
func (u *CSFieldUpsertBulk) SetMode(v csfield.Mode) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateMode() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateMode()
	})
}

// SetPrivateLevel sets the "private_level" field.
func (u *CSFieldUpsertBulk) SetPrivateLevel(v csfield.PrivateLevel) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetPrivateLevel(v)
	})
}

// UpdatePrivateLevel sets the "private_level" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdatePrivateLevel() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdatePrivateLevel()
	})
}

// SetUserID sets the "user_id" field.
func (u *CSFieldUpsertBulk) SetUserID(v uint64) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *CSFieldUpsertBulk) AddUserID(v uint64) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateUserID() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateUserID()
	})
}

// SetMasterID sets the "master_id" field.
func (u *CSFieldUpsertBulk) SetMasterID(v uint64) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.SetMasterID(v)
	})
}

// AddMasterID adds v to the "master_id" field.
func (u *CSFieldUpsertBulk) AddMasterID(v uint64) *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.AddMasterID(v)
	})
}

// UpdateMasterID sets the "master_id" field to the value that was provided on create.
func (u *CSFieldUpsertBulk) UpdateMasterID() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.UpdateMasterID()
	})
}

// ClearMasterID clears the value of the "master_id" field.
func (u *CSFieldUpsertBulk) ClearMasterID() *CSFieldUpsertBulk {
	return u.Update(func(s *CSFieldUpsert) {
		s.ClearMasterID()
	})
}

// Exec executes the query.
func (u *CSFieldUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CSFieldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CSFieldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CSFieldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
