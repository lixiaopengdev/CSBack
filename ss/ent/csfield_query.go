// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CSFieldQuery is the builder for querying CSField entities.
type CSFieldQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.CSField
	withJoinedUser *UserQuery
	withJoins      *JoinQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CSFieldQuery builder.
func (cfq *CSFieldQuery) Where(ps ...predicate.CSField) *CSFieldQuery {
	cfq.predicates = append(cfq.predicates, ps...)
	return cfq
}

// Limit adds a limit step to the query.
func (cfq *CSFieldQuery) Limit(limit int) *CSFieldQuery {
	cfq.limit = &limit
	return cfq
}

// Offset adds an offset step to the query.
func (cfq *CSFieldQuery) Offset(offset int) *CSFieldQuery {
	cfq.offset = &offset
	return cfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cfq *CSFieldQuery) Unique(unique bool) *CSFieldQuery {
	cfq.unique = &unique
	return cfq
}

// Order adds an order step to the query.
func (cfq *CSFieldQuery) Order(o ...OrderFunc) *CSFieldQuery {
	cfq.order = append(cfq.order, o...)
	return cfq
}

// QueryJoinedUser chains the current query on the "joined_user" edge.
func (cfq *CSFieldQuery) QueryJoinedUser() *UserQuery {
	query := &UserQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(csfield.Table, csfield.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, csfield.JoinedUserTable, csfield.JoinedUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJoins chains the current query on the "joins" edge.
func (cfq *CSFieldQuery) QueryJoins() *JoinQuery {
	query := &JoinQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(csfield.Table, csfield.FieldID, selector),
			sqlgraph.To(join.Table, join.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, csfield.JoinsTable, csfield.JoinsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CSField entity from the query.
// Returns a *NotFoundError when no CSField was found.
func (cfq *CSFieldQuery) First(ctx context.Context) (*CSField, error) {
	nodes, err := cfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{csfield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cfq *CSFieldQuery) FirstX(ctx context.Context) *CSField {
	node, err := cfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CSField ID from the query.
// Returns a *NotFoundError when no CSField ID was found.
func (cfq *CSFieldQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{csfield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cfq *CSFieldQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := cfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CSField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CSField entity is found.
// Returns a *NotFoundError when no CSField entities are found.
func (cfq *CSFieldQuery) Only(ctx context.Context) (*CSField, error) {
	nodes, err := cfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{csfield.Label}
	default:
		return nil, &NotSingularError{csfield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cfq *CSFieldQuery) OnlyX(ctx context.Context) *CSField {
	node, err := cfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CSField ID in the query.
// Returns a *NotSingularError when more than one CSField ID is found.
// Returns a *NotFoundError when no entities are found.
func (cfq *CSFieldQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{csfield.Label}
	default:
		err = &NotSingularError{csfield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cfq *CSFieldQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := cfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CSFields.
func (cfq *CSFieldQuery) All(ctx context.Context) ([]*CSField, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cfq *CSFieldQuery) AllX(ctx context.Context) []*CSField {
	nodes, err := cfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CSField IDs.
func (cfq *CSFieldQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := cfq.Select(csfield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cfq *CSFieldQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := cfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cfq *CSFieldQuery) Count(ctx context.Context) (int, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cfq *CSFieldQuery) CountX(ctx context.Context) int {
	count, err := cfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cfq *CSFieldQuery) Exist(ctx context.Context) (bool, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cfq *CSFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := cfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CSFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cfq *CSFieldQuery) Clone() *CSFieldQuery {
	if cfq == nil {
		return nil
	}
	return &CSFieldQuery{
		config:         cfq.config,
		limit:          cfq.limit,
		offset:         cfq.offset,
		order:          append([]OrderFunc{}, cfq.order...),
		predicates:     append([]predicate.CSField{}, cfq.predicates...),
		withJoinedUser: cfq.withJoinedUser.Clone(),
		withJoins:      cfq.withJoins.Clone(),
		// clone intermediate query.
		sql:    cfq.sql.Clone(),
		path:   cfq.path,
		unique: cfq.unique,
	}
}

// WithJoinedUser tells the query-builder to eager-load the nodes that are connected to
// the "joined_user" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CSFieldQuery) WithJoinedUser(opts ...func(*UserQuery)) *CSFieldQuery {
	query := &UserQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withJoinedUser = query
	return cfq
}

// WithJoins tells the query-builder to eager-load the nodes that are connected to
// the "joins" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CSFieldQuery) WithJoins(opts ...func(*JoinQuery)) *CSFieldQuery {
	query := &JoinQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withJoins = query
	return cfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CSField.Query().
//		GroupBy(csfield.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cfq *CSFieldQuery) GroupBy(field string, fields ...string) *CSFieldGroupBy {
	grbuild := &CSFieldGroupBy{config: cfq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(ctx), nil
	}
	grbuild.label = csfield.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CSField.Query().
//		Select(csfield.FieldCreateTime).
//		Scan(ctx, &v)
func (cfq *CSFieldQuery) Select(fields ...string) *CSFieldSelect {
	cfq.fields = append(cfq.fields, fields...)
	selbuild := &CSFieldSelect{CSFieldQuery: cfq}
	selbuild.label = csfield.Label
	selbuild.flds, selbuild.scan = &cfq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a CSFieldSelect configured with the given aggregations.
func (cfq *CSFieldQuery) Aggregate(fns ...AggregateFunc) *CSFieldSelect {
	return cfq.Select().Aggregate(fns...)
}

func (cfq *CSFieldQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cfq.fields {
		if !csfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cfq.path != nil {
		prev, err := cfq.path(ctx)
		if err != nil {
			return err
		}
		cfq.sql = prev
	}
	return nil
}

func (cfq *CSFieldQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CSField, error) {
	var (
		nodes       = []*CSField{}
		_spec       = cfq.querySpec()
		loadedTypes = [2]bool{
			cfq.withJoinedUser != nil,
			cfq.withJoins != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CSField).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CSField{config: cfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cfq.withJoinedUser; query != nil {
		if err := cfq.loadJoinedUser(ctx, query, nodes,
			func(n *CSField) { n.Edges.JoinedUser = []*User{} },
			func(n *CSField, e *User) { n.Edges.JoinedUser = append(n.Edges.JoinedUser, e) }); err != nil {
			return nil, err
		}
	}
	if query := cfq.withJoins; query != nil {
		if err := cfq.loadJoins(ctx, query, nodes,
			func(n *CSField) { n.Edges.Joins = []*Join{} },
			func(n *CSField, e *Join) { n.Edges.Joins = append(n.Edges.Joins, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cfq *CSFieldQuery) loadJoinedUser(ctx context.Context, query *UserQuery, nodes []*CSField, init func(*CSField), assign func(*CSField, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*CSField)
	nids := make(map[uint64]map[*CSField]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(csfield.JoinedUserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(csfield.JoinedUserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(csfield.JoinedUserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(csfield.JoinedUserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*CSField]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "joined_user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cfq *CSFieldQuery) loadJoins(ctx context.Context, query *JoinQuery, nodes []*CSField, init func(*CSField), assign func(*CSField, *Join)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*CSField)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Join(func(s *sql.Selector) {
		s.Where(sql.InValues(csfield.JoinsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CsFieldID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cs_field_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cfq *CSFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cfq.querySpec()
	_spec.Node.Columns = cfq.fields
	if len(cfq.fields) > 0 {
		_spec.Unique = cfq.unique != nil && *cfq.unique
	}
	return sqlgraph.CountNodes(ctx, cfq.driver, _spec)
}

func (cfq *CSFieldQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cfq *CSFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   csfield.Table,
			Columns: csfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: csfield.FieldID,
			},
		},
		From:   cfq.sql,
		Unique: true,
	}
	if unique := cfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, csfield.FieldID)
		for i := range fields {
			if fields[i] != csfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cfq *CSFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cfq.driver.Dialect())
	t1 := builder.Table(csfield.Table)
	columns := cfq.fields
	if len(columns) == 0 {
		columns = csfield.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cfq.sql != nil {
		selector = cfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cfq.unique != nil && *cfq.unique {
		selector.Distinct()
	}
	for _, p := range cfq.predicates {
		p(selector)
	}
	for _, p := range cfq.order {
		p(selector)
	}
	if offset := cfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CSFieldGroupBy is the group-by builder for CSField entities.
type CSFieldGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cfgb *CSFieldGroupBy) Aggregate(fns ...AggregateFunc) *CSFieldGroupBy {
	cfgb.fns = append(cfgb.fns, fns...)
	return cfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cfgb *CSFieldGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cfgb.path(ctx)
	if err != nil {
		return err
	}
	cfgb.sql = query
	return cfgb.sqlScan(ctx, v)
}

func (cfgb *CSFieldGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cfgb.fields {
		if !csfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfgb *CSFieldGroupBy) sqlQuery() *sql.Selector {
	selector := cfgb.sql.Select()
	aggregation := make([]string, 0, len(cfgb.fns))
	for _, fn := range cfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cfgb.fields)+len(cfgb.fns))
		for _, f := range cfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cfgb.fields...)...)
}

// CSFieldSelect is the builder for selecting fields of CSField entities.
type CSFieldSelect struct {
	*CSFieldQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cfs *CSFieldSelect) Aggregate(fns ...AggregateFunc) *CSFieldSelect {
	cfs.fns = append(cfs.fns, fns...)
	return cfs
}

// Scan applies the selector query and scans the result into the given value.
func (cfs *CSFieldSelect) Scan(ctx context.Context, v any) error {
	if err := cfs.prepareQuery(ctx); err != nil {
		return err
	}
	cfs.sql = cfs.CSFieldQuery.sqlQuery(ctx)
	return cfs.sqlScan(ctx, v)
}

func (cfs *CSFieldSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(cfs.fns))
	for _, fn := range cfs.fns {
		aggregation = append(aggregation, fn(cfs.sql))
	}
	switch n := len(*cfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		cfs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		cfs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := cfs.sql.Query()
	if err := cfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
