// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CSFieldUpdate is the builder for updating CSField entities.
type CSFieldUpdate struct {
	config
	hooks    []Hook
	mutation *CSFieldMutation
}

// Where appends a list predicates to the CSFieldUpdate builder.
func (cfu *CSFieldUpdate) Where(ps ...predicate.CSField) *CSFieldUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetUpdateTime sets the "update_time" field.
func (cfu *CSFieldUpdate) SetUpdateTime(t time.Time) *CSFieldUpdate {
	cfu.mutation.SetUpdateTime(t)
	return cfu
}

// SetName sets the "name" field.
func (cfu *CSFieldUpdate) SetName(s string) *CSFieldUpdate {
	cfu.mutation.SetName(s)
	return cfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfu *CSFieldUpdate) SetNillableName(s *string) *CSFieldUpdate {
	if s != nil {
		cfu.SetName(*s)
	}
	return cfu
}

// ClearName clears the value of the "name" field.
func (cfu *CSFieldUpdate) ClearName() *CSFieldUpdate {
	cfu.mutation.ClearName()
	return cfu
}

// SetStatus sets the "status" field.
func (cfu *CSFieldUpdate) SetStatus(c csfield.Status) *CSFieldUpdate {
	cfu.mutation.SetStatus(c)
	return cfu
}

// SetType sets the "type" field.
func (cfu *CSFieldUpdate) SetType(c csfield.Type) *CSFieldUpdate {
	cfu.mutation.SetType(c)
	return cfu
}

// SetMode sets the "mode" field.
func (cfu *CSFieldUpdate) SetMode(c csfield.Mode) *CSFieldUpdate {
	cfu.mutation.SetMode(c)
	return cfu
}

// SetPrivateLevel sets the "private_level" field.
func (cfu *CSFieldUpdate) SetPrivateLevel(cl csfield.PrivateLevel) *CSFieldUpdate {
	cfu.mutation.SetPrivateLevel(cl)
	return cfu
}

// SetNillablePrivateLevel sets the "private_level" field if the given value is not nil.
func (cfu *CSFieldUpdate) SetNillablePrivateLevel(cl *csfield.PrivateLevel) *CSFieldUpdate {
	if cl != nil {
		cfu.SetPrivateLevel(*cl)
	}
	return cfu
}

// SetUserID sets the "user_id" field.
func (cfu *CSFieldUpdate) SetUserID(u uint64) *CSFieldUpdate {
	cfu.mutation.ResetUserID()
	cfu.mutation.SetUserID(u)
	return cfu
}

// AddUserID adds u to the "user_id" field.
func (cfu *CSFieldUpdate) AddUserID(u int64) *CSFieldUpdate {
	cfu.mutation.AddUserID(u)
	return cfu
}

// SetMasterID sets the "master_id" field.
func (cfu *CSFieldUpdate) SetMasterID(u uint64) *CSFieldUpdate {
	cfu.mutation.ResetMasterID()
	cfu.mutation.SetMasterID(u)
	return cfu
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (cfu *CSFieldUpdate) SetNillableMasterID(u *uint64) *CSFieldUpdate {
	if u != nil {
		cfu.SetMasterID(*u)
	}
	return cfu
}

// AddMasterID adds u to the "master_id" field.
func (cfu *CSFieldUpdate) AddMasterID(u int64) *CSFieldUpdate {
	cfu.mutation.AddMasterID(u)
	return cfu
}

// ClearMasterID clears the value of the "master_id" field.
func (cfu *CSFieldUpdate) ClearMasterID() *CSFieldUpdate {
	cfu.mutation.ClearMasterID()
	return cfu
}

// AddJoinedUserIDs adds the "joined_user" edge to the User entity by IDs.
func (cfu *CSFieldUpdate) AddJoinedUserIDs(ids ...uint64) *CSFieldUpdate {
	cfu.mutation.AddJoinedUserIDs(ids...)
	return cfu
}

// AddJoinedUser adds the "joined_user" edges to the User entity.
func (cfu *CSFieldUpdate) AddJoinedUser(u ...*User) *CSFieldUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfu.AddJoinedUserIDs(ids...)
}

// AddJoinIDs adds the "joins" edge to the Join entity by IDs.
func (cfu *CSFieldUpdate) AddJoinIDs(ids ...int) *CSFieldUpdate {
	cfu.mutation.AddJoinIDs(ids...)
	return cfu
}

// AddJoins adds the "joins" edges to the Join entity.
func (cfu *CSFieldUpdate) AddJoins(j ...*Join) *CSFieldUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cfu.AddJoinIDs(ids...)
}

// Mutation returns the CSFieldMutation object of the builder.
func (cfu *CSFieldUpdate) Mutation() *CSFieldMutation {
	return cfu.mutation
}

// ClearJoinedUser clears all "joined_user" edges to the User entity.
func (cfu *CSFieldUpdate) ClearJoinedUser() *CSFieldUpdate {
	cfu.mutation.ClearJoinedUser()
	return cfu
}

// RemoveJoinedUserIDs removes the "joined_user" edge to User entities by IDs.
func (cfu *CSFieldUpdate) RemoveJoinedUserIDs(ids ...uint64) *CSFieldUpdate {
	cfu.mutation.RemoveJoinedUserIDs(ids...)
	return cfu
}

// RemoveJoinedUser removes "joined_user" edges to User entities.
func (cfu *CSFieldUpdate) RemoveJoinedUser(u ...*User) *CSFieldUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfu.RemoveJoinedUserIDs(ids...)
}

// ClearJoins clears all "joins" edges to the Join entity.
func (cfu *CSFieldUpdate) ClearJoins() *CSFieldUpdate {
	cfu.mutation.ClearJoins()
	return cfu
}

// RemoveJoinIDs removes the "joins" edge to Join entities by IDs.
func (cfu *CSFieldUpdate) RemoveJoinIDs(ids ...int) *CSFieldUpdate {
	cfu.mutation.RemoveJoinIDs(ids...)
	return cfu
}

// RemoveJoins removes "joins" edges to Join entities.
func (cfu *CSFieldUpdate) RemoveJoins(j ...*Join) *CSFieldUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cfu.RemoveJoinIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CSFieldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cfu.defaults()
	if len(cfu.hooks) == 0 {
		if err = cfu.check(); err != nil {
			return 0, err
		}
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CSFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfu.check(); err != nil {
				return 0, err
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			if cfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CSFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CSFieldUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CSFieldUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CSFieldUpdate) defaults() {
	if _, ok := cfu.mutation.UpdateTime(); !ok {
		v := csfield.UpdateDefaultUpdateTime()
		cfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CSFieldUpdate) check() error {
	if v, ok := cfu.mutation.Status(); ok {
		if err := csfield.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CSField.status": %w`, err)}
		}
	}
	if v, ok := cfu.mutation.GetType(); ok {
		if err := csfield.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CSField.type": %w`, err)}
		}
	}
	if v, ok := cfu.mutation.Mode(); ok {
		if err := csfield.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CSField.mode": %w`, err)}
		}
	}
	if v, ok := cfu.mutation.PrivateLevel(); ok {
		if err := csfield.PrivateLevelValidator(v); err != nil {
			return &ValidationError{Name: "private_level", err: fmt.Errorf(`ent: validator failed for field "CSField.private_level": %w`, err)}
		}
	}
	return nil
}

func (cfu *CSFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   csfield.Table,
			Columns: csfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: csfield.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.UpdateTime(); ok {
		_spec.SetField(csfield.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cfu.mutation.Name(); ok {
		_spec.SetField(csfield.FieldName, field.TypeString, value)
	}
	if cfu.mutation.NameCleared() {
		_spec.ClearField(csfield.FieldName, field.TypeString)
	}
	if value, ok := cfu.mutation.Status(); ok {
		_spec.SetField(csfield.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cfu.mutation.GetType(); ok {
		_spec.SetField(csfield.FieldType, field.TypeEnum, value)
	}
	if value, ok := cfu.mutation.Mode(); ok {
		_spec.SetField(csfield.FieldMode, field.TypeEnum, value)
	}
	if value, ok := cfu.mutation.PrivateLevel(); ok {
		_spec.SetField(csfield.FieldPrivateLevel, field.TypeEnum, value)
	}
	if value, ok := cfu.mutation.UserID(); ok {
		_spec.SetField(csfield.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cfu.mutation.AddedUserID(); ok {
		_spec.AddField(csfield.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cfu.mutation.MasterID(); ok {
		_spec.SetField(csfield.FieldMasterID, field.TypeUint64, value)
	}
	if value, ok := cfu.mutation.AddedMasterID(); ok {
		_spec.AddField(csfield.FieldMasterID, field.TypeUint64, value)
	}
	if cfu.mutation.MasterIDCleared() {
		_spec.ClearField(csfield.FieldMasterID, field.TypeUint64)
	}
	if cfu.mutation.JoinedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		createE := &JoinCreate{config: cfu.config, mutation: newJoinMutation(cfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.RemovedJoinedUserIDs(); len(nodes) > 0 && !cfu.mutation.JoinedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: cfu.config, mutation: newJoinMutation(cfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.JoinedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: cfu.config, mutation: newJoinMutation(cfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.JoinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.RemovedJoinsIDs(); len(nodes) > 0 && !cfu.mutation.JoinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.JoinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{csfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CSFieldUpdateOne is the builder for updating a single CSField entity.
type CSFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CSFieldMutation
}

// SetUpdateTime sets the "update_time" field.
func (cfuo *CSFieldUpdateOne) SetUpdateTime(t time.Time) *CSFieldUpdateOne {
	cfuo.mutation.SetUpdateTime(t)
	return cfuo
}

// SetName sets the "name" field.
func (cfuo *CSFieldUpdateOne) SetName(s string) *CSFieldUpdateOne {
	cfuo.mutation.SetName(s)
	return cfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfuo *CSFieldUpdateOne) SetNillableName(s *string) *CSFieldUpdateOne {
	if s != nil {
		cfuo.SetName(*s)
	}
	return cfuo
}

// ClearName clears the value of the "name" field.
func (cfuo *CSFieldUpdateOne) ClearName() *CSFieldUpdateOne {
	cfuo.mutation.ClearName()
	return cfuo
}

// SetStatus sets the "status" field.
func (cfuo *CSFieldUpdateOne) SetStatus(c csfield.Status) *CSFieldUpdateOne {
	cfuo.mutation.SetStatus(c)
	return cfuo
}

// SetType sets the "type" field.
func (cfuo *CSFieldUpdateOne) SetType(c csfield.Type) *CSFieldUpdateOne {
	cfuo.mutation.SetType(c)
	return cfuo
}

// SetMode sets the "mode" field.
func (cfuo *CSFieldUpdateOne) SetMode(c csfield.Mode) *CSFieldUpdateOne {
	cfuo.mutation.SetMode(c)
	return cfuo
}

// SetPrivateLevel sets the "private_level" field.
func (cfuo *CSFieldUpdateOne) SetPrivateLevel(cl csfield.PrivateLevel) *CSFieldUpdateOne {
	cfuo.mutation.SetPrivateLevel(cl)
	return cfuo
}

// SetNillablePrivateLevel sets the "private_level" field if the given value is not nil.
func (cfuo *CSFieldUpdateOne) SetNillablePrivateLevel(cl *csfield.PrivateLevel) *CSFieldUpdateOne {
	if cl != nil {
		cfuo.SetPrivateLevel(*cl)
	}
	return cfuo
}

// SetUserID sets the "user_id" field.
func (cfuo *CSFieldUpdateOne) SetUserID(u uint64) *CSFieldUpdateOne {
	cfuo.mutation.ResetUserID()
	cfuo.mutation.SetUserID(u)
	return cfuo
}

// AddUserID adds u to the "user_id" field.
func (cfuo *CSFieldUpdateOne) AddUserID(u int64) *CSFieldUpdateOne {
	cfuo.mutation.AddUserID(u)
	return cfuo
}

// SetMasterID sets the "master_id" field.
func (cfuo *CSFieldUpdateOne) SetMasterID(u uint64) *CSFieldUpdateOne {
	cfuo.mutation.ResetMasterID()
	cfuo.mutation.SetMasterID(u)
	return cfuo
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (cfuo *CSFieldUpdateOne) SetNillableMasterID(u *uint64) *CSFieldUpdateOne {
	if u != nil {
		cfuo.SetMasterID(*u)
	}
	return cfuo
}

// AddMasterID adds u to the "master_id" field.
func (cfuo *CSFieldUpdateOne) AddMasterID(u int64) *CSFieldUpdateOne {
	cfuo.mutation.AddMasterID(u)
	return cfuo
}

// ClearMasterID clears the value of the "master_id" field.
func (cfuo *CSFieldUpdateOne) ClearMasterID() *CSFieldUpdateOne {
	cfuo.mutation.ClearMasterID()
	return cfuo
}

// AddJoinedUserIDs adds the "joined_user" edge to the User entity by IDs.
func (cfuo *CSFieldUpdateOne) AddJoinedUserIDs(ids ...uint64) *CSFieldUpdateOne {
	cfuo.mutation.AddJoinedUserIDs(ids...)
	return cfuo
}

// AddJoinedUser adds the "joined_user" edges to the User entity.
func (cfuo *CSFieldUpdateOne) AddJoinedUser(u ...*User) *CSFieldUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfuo.AddJoinedUserIDs(ids...)
}

// AddJoinIDs adds the "joins" edge to the Join entity by IDs.
func (cfuo *CSFieldUpdateOne) AddJoinIDs(ids ...int) *CSFieldUpdateOne {
	cfuo.mutation.AddJoinIDs(ids...)
	return cfuo
}

// AddJoins adds the "joins" edges to the Join entity.
func (cfuo *CSFieldUpdateOne) AddJoins(j ...*Join) *CSFieldUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cfuo.AddJoinIDs(ids...)
}

// Mutation returns the CSFieldMutation object of the builder.
func (cfuo *CSFieldUpdateOne) Mutation() *CSFieldMutation {
	return cfuo.mutation
}

// ClearJoinedUser clears all "joined_user" edges to the User entity.
func (cfuo *CSFieldUpdateOne) ClearJoinedUser() *CSFieldUpdateOne {
	cfuo.mutation.ClearJoinedUser()
	return cfuo
}

// RemoveJoinedUserIDs removes the "joined_user" edge to User entities by IDs.
func (cfuo *CSFieldUpdateOne) RemoveJoinedUserIDs(ids ...uint64) *CSFieldUpdateOne {
	cfuo.mutation.RemoveJoinedUserIDs(ids...)
	return cfuo
}

// RemoveJoinedUser removes "joined_user" edges to User entities.
func (cfuo *CSFieldUpdateOne) RemoveJoinedUser(u ...*User) *CSFieldUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cfuo.RemoveJoinedUserIDs(ids...)
}

// ClearJoins clears all "joins" edges to the Join entity.
func (cfuo *CSFieldUpdateOne) ClearJoins() *CSFieldUpdateOne {
	cfuo.mutation.ClearJoins()
	return cfuo
}

// RemoveJoinIDs removes the "joins" edge to Join entities by IDs.
func (cfuo *CSFieldUpdateOne) RemoveJoinIDs(ids ...int) *CSFieldUpdateOne {
	cfuo.mutation.RemoveJoinIDs(ids...)
	return cfuo
}

// RemoveJoins removes "joins" edges to Join entities.
func (cfuo *CSFieldUpdateOne) RemoveJoins(j ...*Join) *CSFieldUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cfuo.RemoveJoinIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CSFieldUpdateOne) Select(field string, fields ...string) *CSFieldUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CSField entity.
func (cfuo *CSFieldUpdateOne) Save(ctx context.Context) (*CSField, error) {
	var (
		err  error
		node *CSField
	)
	cfuo.defaults()
	if len(cfuo.hooks) == 0 {
		if err = cfuo.check(); err != nil {
			return nil, err
		}
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CSFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfuo.check(); err != nil {
				return nil, err
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			if cfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CSField)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CSFieldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CSFieldUpdateOne) SaveX(ctx context.Context) *CSField {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CSFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CSFieldUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CSFieldUpdateOne) defaults() {
	if _, ok := cfuo.mutation.UpdateTime(); !ok {
		v := csfield.UpdateDefaultUpdateTime()
		cfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CSFieldUpdateOne) check() error {
	if v, ok := cfuo.mutation.Status(); ok {
		if err := csfield.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CSField.status": %w`, err)}
		}
	}
	if v, ok := cfuo.mutation.GetType(); ok {
		if err := csfield.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CSField.type": %w`, err)}
		}
	}
	if v, ok := cfuo.mutation.Mode(); ok {
		if err := csfield.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CSField.mode": %w`, err)}
		}
	}
	if v, ok := cfuo.mutation.PrivateLevel(); ok {
		if err := csfield.PrivateLevelValidator(v); err != nil {
			return &ValidationError{Name: "private_level", err: fmt.Errorf(`ent: validator failed for field "CSField.private_level": %w`, err)}
		}
	}
	return nil
}

func (cfuo *CSFieldUpdateOne) sqlSave(ctx context.Context) (_node *CSField, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   csfield.Table,
			Columns: csfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: csfield.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CSField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, csfield.FieldID)
		for _, f := range fields {
			if !csfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != csfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.UpdateTime(); ok {
		_spec.SetField(csfield.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cfuo.mutation.Name(); ok {
		_spec.SetField(csfield.FieldName, field.TypeString, value)
	}
	if cfuo.mutation.NameCleared() {
		_spec.ClearField(csfield.FieldName, field.TypeString)
	}
	if value, ok := cfuo.mutation.Status(); ok {
		_spec.SetField(csfield.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cfuo.mutation.GetType(); ok {
		_spec.SetField(csfield.FieldType, field.TypeEnum, value)
	}
	if value, ok := cfuo.mutation.Mode(); ok {
		_spec.SetField(csfield.FieldMode, field.TypeEnum, value)
	}
	if value, ok := cfuo.mutation.PrivateLevel(); ok {
		_spec.SetField(csfield.FieldPrivateLevel, field.TypeEnum, value)
	}
	if value, ok := cfuo.mutation.UserID(); ok {
		_spec.SetField(csfield.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cfuo.mutation.AddedUserID(); ok {
		_spec.AddField(csfield.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := cfuo.mutation.MasterID(); ok {
		_spec.SetField(csfield.FieldMasterID, field.TypeUint64, value)
	}
	if value, ok := cfuo.mutation.AddedMasterID(); ok {
		_spec.AddField(csfield.FieldMasterID, field.TypeUint64, value)
	}
	if cfuo.mutation.MasterIDCleared() {
		_spec.ClearField(csfield.FieldMasterID, field.TypeUint64)
	}
	if cfuo.mutation.JoinedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		createE := &JoinCreate{config: cfuo.config, mutation: newJoinMutation(cfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.RemovedJoinedUserIDs(); len(nodes) > 0 && !cfuo.mutation.JoinedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: cfuo.config, mutation: newJoinMutation(cfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.JoinedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   csfield.JoinedUserTable,
			Columns: csfield.JoinedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: cfuo.config, mutation: newJoinMutation(cfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.JoinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.RemovedJoinsIDs(); len(nodes) > 0 && !cfuo.mutation.JoinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.JoinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   csfield.JoinsTable,
			Columns: []string{csfield.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CSField{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{csfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
