// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/feedback"
	"CSBackendTmp/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Feedback is the model entity for the Feedback schema.
type Feedback struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type feedback.Type `json:"type,omitempty"`
	// 反馈理由
	Reason string `json:"reason,omitempty"`
	// 反馈的对象id
	ItemID uint64 `json:"item_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedbackQuery when eager-loading is set.
	Edges FeedbackEdges `json:"edges"`
}

// FeedbackEdges holds the relations/edges for other nodes in the graph.
type FeedbackEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedbackEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID, feedback.FieldItemID, feedback.FieldUserID:
			values[i] = new(sql.NullInt64)
		case feedback.FieldType, feedback.FieldReason:
			values[i] = new(sql.NullString)
		case feedback.FieldCreateTime, feedback.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Feedback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feedback fields.
func (f *Feedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case feedback.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		case feedback.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				f.UpdateTime = value.Time
			}
		case feedback.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = feedback.Type(value.String)
			}
		case feedback.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				f.Reason = value.String
			}
		case feedback.FieldItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				f.ItemID = uint64(value.Int64)
			}
		case feedback.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				f.UserID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Feedback entity.
func (f *Feedback) QueryOwner() *UserQuery {
	return (&FeedbackClient{config: f.config}).QueryOwner(f)
}

// Update returns a builder for updating this Feedback.
// Note that you need to call Feedback.Unwrap() before calling this method if this Feedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feedback) Update() *FeedbackUpdateOne {
	return (&FeedbackClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Feedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feedback) Unwrap() *Feedback {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feedback is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feedback) String() string {
	var builder strings.Builder
	builder.WriteString("Feedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(f.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", f.Type))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(f.Reason)
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ItemID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Feedbacks is a parsable slice of Feedback.
type Feedbacks []*Feedback

func (f Feedbacks) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
