// Code generated by ent, DO NOT EDIT.

package friendship

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the friendship type in the database.
	Label = "friendship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRequestType holds the string denoting the request_type field in the database.
	FieldRequestType = "request_type"
	// FieldCurrType holds the string denoting the curr_type field in the database.
	FieldCurrType = "curr_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFriendID holds the string denoting the friend_id field in the database.
	FieldFriendID = "friend_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFriend holds the string denoting the friend edge name in mutations.
	EdgeFriend = "friend"
	// Table holds the table name of the friendship in the database.
	Table = "friendships"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "friendships"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// FriendTable is the table that holds the friend relation/edge.
	FriendTable = "friendships"
	// FriendInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FriendInverseTable = "users"
	// FriendColumn is the table column denoting the friend relation/edge.
	FriendColumn = "friend_id"
)

// Columns holds all SQL columns for friendship fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldRequestType,
	FieldCurrType,
	FieldUserID,
	FieldFriendID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusInvite      Status = "invite"
	StatusInvited     Status = "invited"
	StatusEstablished Status = "established"
	StatusRejected    Status = "rejected"
	StatusForbidden   Status = "forbidden"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInvite, StatusInvited, StatusEstablished, StatusRejected, StatusForbidden:
		return nil
	default:
		return fmt.Errorf("friendship: invalid enum value for status field: %q", s)
	}
}

// RequestType defines the type for the "request_type" enum field.
type RequestType string

// RequestTypeNone is the default value of the RequestType enum.
const DefaultRequestType = RequestTypeNone

// RequestType values.
const (
	RequestTypeNormal RequestType = "normal"
	RequestTypeGood   RequestType = "good"
	RequestTypeClose  RequestType = "close"
	RequestTypeCustom RequestType = "custom"
	RequestTypeNone   RequestType = "none"
)

func (rt RequestType) String() string {
	return string(rt)
}

// RequestTypeValidator is a validator for the "request_type" field enum values. It is called by the builders before save.
func RequestTypeValidator(rt RequestType) error {
	switch rt {
	case RequestTypeNormal, RequestTypeGood, RequestTypeClose, RequestTypeCustom, RequestTypeNone:
		return nil
	default:
		return fmt.Errorf("friendship: invalid enum value for request_type field: %q", rt)
	}
}

// CurrType defines the type for the "curr_type" enum field.
type CurrType string

// CurrTypeNone is the default value of the CurrType enum.
const DefaultCurrType = CurrTypeNone

// CurrType values.
const (
	CurrTypeNormal CurrType = "normal"
	CurrTypeGood   CurrType = "good"
	CurrTypeClose  CurrType = "close"
	CurrTypeCustom CurrType = "custom"
	CurrTypeNone   CurrType = "none"
)

func (ct CurrType) String() string {
	return string(ct)
}

// CurrTypeValidator is a validator for the "curr_type" field enum values. It is called by the builders before save.
func CurrTypeValidator(ct CurrType) error {
	switch ct {
	case CurrTypeNormal, CurrTypeGood, CurrTypeClose, CurrTypeCustom, CurrTypeNone:
		return nil
	default:
		return fmt.Errorf("friendship: invalid enum value for curr_type field: %q", ct)
	}
}
