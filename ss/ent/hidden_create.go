// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/hidden"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HiddenCreate is the builder for creating a Hidden entity.
type HiddenCreate struct {
	config
	mutation *HiddenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (hc *HiddenCreate) SetCreateTime(t time.Time) *HiddenCreate {
	hc.mutation.SetCreateTime(t)
	return hc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (hc *HiddenCreate) SetNillableCreateTime(t *time.Time) *HiddenCreate {
	if t != nil {
		hc.SetCreateTime(*t)
	}
	return hc
}

// SetUpdateTime sets the "update_time" field.
func (hc *HiddenCreate) SetUpdateTime(t time.Time) *HiddenCreate {
	hc.mutation.SetUpdateTime(t)
	return hc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (hc *HiddenCreate) SetNillableUpdateTime(t *time.Time) *HiddenCreate {
	if t != nil {
		hc.SetUpdateTime(*t)
	}
	return hc
}

// SetUserID sets the "user_id" field.
func (hc *HiddenCreate) SetUserID(u uint64) *HiddenCreate {
	hc.mutation.SetUserID(u)
	return hc
}

// SetHiddenID sets the "hidden_id" field.
func (hc *HiddenCreate) SetHiddenID(u uint64) *HiddenCreate {
	hc.mutation.SetHiddenID(u)
	return hc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hc *HiddenCreate) SetOwnerID(id uint64) *HiddenCreate {
	hc.mutation.SetOwnerID(id)
	return hc
}

// SetOwner sets the "owner" edge to the User entity.
func (hc *HiddenCreate) SetOwner(u *User) *HiddenCreate {
	return hc.SetOwnerID(u.ID)
}

// Mutation returns the HiddenMutation object of the builder.
func (hc *HiddenCreate) Mutation() *HiddenMutation {
	return hc.mutation
}

// Save creates the Hidden in the database.
func (hc *HiddenCreate) Save(ctx context.Context) (*Hidden, error) {
	var (
		err  error
		node *Hidden
	)
	hc.defaults()
	if len(hc.hooks) == 0 {
		if err = hc.check(); err != nil {
			return nil, err
		}
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiddenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hc.check(); err != nil {
				return nil, err
			}
			hc.mutation = mutation
			if node, err = hc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			if hc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Hidden)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiddenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HiddenCreate) SaveX(ctx context.Context) *Hidden {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HiddenCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HiddenCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HiddenCreate) defaults() {
	if _, ok := hc.mutation.CreateTime(); !ok {
		v := hidden.DefaultCreateTime()
		hc.mutation.SetCreateTime(v)
	}
	if _, ok := hc.mutation.UpdateTime(); !ok {
		v := hidden.DefaultUpdateTime()
		hc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HiddenCreate) check() error {
	if _, ok := hc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Hidden.create_time"`)}
	}
	if _, ok := hc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Hidden.update_time"`)}
	}
	if _, ok := hc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Hidden.user_id"`)}
	}
	if _, ok := hc.mutation.HiddenID(); !ok {
		return &ValidationError{Name: "hidden_id", err: errors.New(`ent: missing required field "Hidden.hidden_id"`)}
	}
	if _, ok := hc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Hidden.owner"`)}
	}
	return nil
}

func (hc *HiddenCreate) sqlSave(ctx context.Context) (*Hidden, error) {
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (hc *HiddenCreate) createSpec() (*Hidden, *sqlgraph.CreateSpec) {
	var (
		_node = &Hidden{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: hidden.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hidden.FieldID,
			},
		}
	)
	_spec.OnConflict = hc.conflict
	if value, ok := hc.mutation.CreateTime(); ok {
		_spec.SetField(hidden.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := hc.mutation.UpdateTime(); ok {
		_spec.SetField(hidden.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := hc.mutation.HiddenID(); ok {
		_spec.SetField(hidden.FieldHiddenID, field.TypeUint64, value)
		_node.HiddenID = value
	}
	if nodes := hc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hidden.OwnerTable,
			Columns: []string{hidden.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hidden.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HiddenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (hc *HiddenCreate) OnConflict(opts ...sql.ConflictOption) *HiddenUpsertOne {
	hc.conflict = opts
	return &HiddenUpsertOne{
		create: hc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hidden.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hc *HiddenCreate) OnConflictColumns(columns ...string) *HiddenUpsertOne {
	hc.conflict = append(hc.conflict, sql.ConflictColumns(columns...))
	return &HiddenUpsertOne{
		create: hc,
	}
}

type (
	// HiddenUpsertOne is the builder for "upsert"-ing
	//  one Hidden node.
	HiddenUpsertOne struct {
		create *HiddenCreate
	}

	// HiddenUpsert is the "OnConflict" setter.
	HiddenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *HiddenUpsert) SetUpdateTime(v time.Time) *HiddenUpsert {
	u.Set(hidden.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HiddenUpsert) UpdateUpdateTime() *HiddenUpsert {
	u.SetExcluded(hidden.FieldUpdateTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *HiddenUpsert) SetUserID(v uint64) *HiddenUpsert {
	u.Set(hidden.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *HiddenUpsert) UpdateUserID() *HiddenUpsert {
	u.SetExcluded(hidden.FieldUserID)
	return u
}

// SetHiddenID sets the "hidden_id" field.
func (u *HiddenUpsert) SetHiddenID(v uint64) *HiddenUpsert {
	u.Set(hidden.FieldHiddenID, v)
	return u
}

// UpdateHiddenID sets the "hidden_id" field to the value that was provided on create.
func (u *HiddenUpsert) UpdateHiddenID() *HiddenUpsert {
	u.SetExcluded(hidden.FieldHiddenID)
	return u
}

// AddHiddenID adds v to the "hidden_id" field.
func (u *HiddenUpsert) AddHiddenID(v uint64) *HiddenUpsert {
	u.Add(hidden.FieldHiddenID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Hidden.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HiddenUpsertOne) UpdateNewValues() *HiddenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(hidden.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hidden.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HiddenUpsertOne) Ignore() *HiddenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HiddenUpsertOne) DoNothing() *HiddenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HiddenCreate.OnConflict
// documentation for more info.
func (u *HiddenUpsertOne) Update(set func(*HiddenUpsert)) *HiddenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HiddenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *HiddenUpsertOne) SetUpdateTime(v time.Time) *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HiddenUpsertOne) UpdateUpdateTime() *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *HiddenUpsertOne) SetUserID(v uint64) *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *HiddenUpsertOne) UpdateUserID() *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateUserID()
	})
}

// SetHiddenID sets the "hidden_id" field.
func (u *HiddenUpsertOne) SetHiddenID(v uint64) *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.SetHiddenID(v)
	})
}

// AddHiddenID adds v to the "hidden_id" field.
func (u *HiddenUpsertOne) AddHiddenID(v uint64) *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.AddHiddenID(v)
	})
}

// UpdateHiddenID sets the "hidden_id" field to the value that was provided on create.
func (u *HiddenUpsertOne) UpdateHiddenID() *HiddenUpsertOne {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateHiddenID()
	})
}

// Exec executes the query.
func (u *HiddenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HiddenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HiddenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HiddenUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HiddenUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HiddenCreateBulk is the builder for creating many Hidden entities in bulk.
type HiddenCreateBulk struct {
	config
	builders []*HiddenCreate
	conflict []sql.ConflictOption
}

// Save creates the Hidden entities in the database.
func (hcb *HiddenCreateBulk) Save(ctx context.Context) ([]*Hidden, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hidden, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HiddenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HiddenCreateBulk) SaveX(ctx context.Context) []*Hidden {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HiddenCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HiddenCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hidden.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HiddenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (hcb *HiddenCreateBulk) OnConflict(opts ...sql.ConflictOption) *HiddenUpsertBulk {
	hcb.conflict = opts
	return &HiddenUpsertBulk{
		create: hcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hidden.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hcb *HiddenCreateBulk) OnConflictColumns(columns ...string) *HiddenUpsertBulk {
	hcb.conflict = append(hcb.conflict, sql.ConflictColumns(columns...))
	return &HiddenUpsertBulk{
		create: hcb,
	}
}

// HiddenUpsertBulk is the builder for "upsert"-ing
// a bulk of Hidden nodes.
type HiddenUpsertBulk struct {
	create *HiddenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Hidden.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HiddenUpsertBulk) UpdateNewValues() *HiddenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(hidden.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hidden.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HiddenUpsertBulk) Ignore() *HiddenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HiddenUpsertBulk) DoNothing() *HiddenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HiddenCreateBulk.OnConflict
// documentation for more info.
func (u *HiddenUpsertBulk) Update(set func(*HiddenUpsert)) *HiddenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HiddenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *HiddenUpsertBulk) SetUpdateTime(v time.Time) *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HiddenUpsertBulk) UpdateUpdateTime() *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *HiddenUpsertBulk) SetUserID(v uint64) *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *HiddenUpsertBulk) UpdateUserID() *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateUserID()
	})
}

// SetHiddenID sets the "hidden_id" field.
func (u *HiddenUpsertBulk) SetHiddenID(v uint64) *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.SetHiddenID(v)
	})
}

// AddHiddenID adds v to the "hidden_id" field.
func (u *HiddenUpsertBulk) AddHiddenID(v uint64) *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.AddHiddenID(v)
	})
}

// UpdateHiddenID sets the "hidden_id" field to the value that was provided on create.
func (u *HiddenUpsertBulk) UpdateHiddenID() *HiddenUpsertBulk {
	return u.Update(func(s *HiddenUpsert) {
		s.UpdateHiddenID()
	})
}

// Exec executes the query.
func (u *HiddenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HiddenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HiddenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HiddenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
