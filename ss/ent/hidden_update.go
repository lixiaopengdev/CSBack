// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/hidden"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HiddenUpdate is the builder for updating Hidden entities.
type HiddenUpdate struct {
	config
	hooks    []Hook
	mutation *HiddenMutation
}

// Where appends a list predicates to the HiddenUpdate builder.
func (hu *HiddenUpdate) Where(ps ...predicate.Hidden) *HiddenUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetUpdateTime sets the "update_time" field.
func (hu *HiddenUpdate) SetUpdateTime(t time.Time) *HiddenUpdate {
	hu.mutation.SetUpdateTime(t)
	return hu
}

// SetUserID sets the "user_id" field.
func (hu *HiddenUpdate) SetUserID(u uint64) *HiddenUpdate {
	hu.mutation.SetUserID(u)
	return hu
}

// SetHiddenID sets the "hidden_id" field.
func (hu *HiddenUpdate) SetHiddenID(u uint64) *HiddenUpdate {
	hu.mutation.ResetHiddenID()
	hu.mutation.SetHiddenID(u)
	return hu
}

// AddHiddenID adds u to the "hidden_id" field.
func (hu *HiddenUpdate) AddHiddenID(u int64) *HiddenUpdate {
	hu.mutation.AddHiddenID(u)
	return hu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (hu *HiddenUpdate) SetOwnerID(id uint64) *HiddenUpdate {
	hu.mutation.SetOwnerID(id)
	return hu
}

// SetOwner sets the "owner" edge to the User entity.
func (hu *HiddenUpdate) SetOwner(u *User) *HiddenUpdate {
	return hu.SetOwnerID(u.ID)
}

// Mutation returns the HiddenMutation object of the builder.
func (hu *HiddenUpdate) Mutation() *HiddenMutation {
	return hu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (hu *HiddenUpdate) ClearOwner() *HiddenUpdate {
	hu.mutation.ClearOwner()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HiddenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hu.defaults()
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiddenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HiddenUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HiddenUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HiddenUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HiddenUpdate) defaults() {
	if _, ok := hu.mutation.UpdateTime(); !ok {
		v := hidden.UpdateDefaultUpdateTime()
		hu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HiddenUpdate) check() error {
	if _, ok := hu.mutation.OwnerID(); hu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Hidden.owner"`)
	}
	return nil
}

func (hu *HiddenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hidden.Table,
			Columns: hidden.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hidden.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.UpdateTime(); ok {
		_spec.SetField(hidden.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := hu.mutation.HiddenID(); ok {
		_spec.SetField(hidden.FieldHiddenID, field.TypeUint64, value)
	}
	if value, ok := hu.mutation.AddedHiddenID(); ok {
		_spec.AddField(hidden.FieldHiddenID, field.TypeUint64, value)
	}
	if hu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hidden.OwnerTable,
			Columns: []string{hidden.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hidden.OwnerTable,
			Columns: []string{hidden.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hidden.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HiddenUpdateOne is the builder for updating a single Hidden entity.
type HiddenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HiddenMutation
}

// SetUpdateTime sets the "update_time" field.
func (huo *HiddenUpdateOne) SetUpdateTime(t time.Time) *HiddenUpdateOne {
	huo.mutation.SetUpdateTime(t)
	return huo
}

// SetUserID sets the "user_id" field.
func (huo *HiddenUpdateOne) SetUserID(u uint64) *HiddenUpdateOne {
	huo.mutation.SetUserID(u)
	return huo
}

// SetHiddenID sets the "hidden_id" field.
func (huo *HiddenUpdateOne) SetHiddenID(u uint64) *HiddenUpdateOne {
	huo.mutation.ResetHiddenID()
	huo.mutation.SetHiddenID(u)
	return huo
}

// AddHiddenID adds u to the "hidden_id" field.
func (huo *HiddenUpdateOne) AddHiddenID(u int64) *HiddenUpdateOne {
	huo.mutation.AddHiddenID(u)
	return huo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (huo *HiddenUpdateOne) SetOwnerID(id uint64) *HiddenUpdateOne {
	huo.mutation.SetOwnerID(id)
	return huo
}

// SetOwner sets the "owner" edge to the User entity.
func (huo *HiddenUpdateOne) SetOwner(u *User) *HiddenUpdateOne {
	return huo.SetOwnerID(u.ID)
}

// Mutation returns the HiddenMutation object of the builder.
func (huo *HiddenUpdateOne) Mutation() *HiddenMutation {
	return huo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (huo *HiddenUpdateOne) ClearOwner() *HiddenUpdateOne {
	huo.mutation.ClearOwner()
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HiddenUpdateOne) Select(field string, fields ...string) *HiddenUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hidden entity.
func (huo *HiddenUpdateOne) Save(ctx context.Context) (*Hidden, error) {
	var (
		err  error
		node *Hidden
	)
	huo.defaults()
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiddenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, huo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Hidden)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiddenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HiddenUpdateOne) SaveX(ctx context.Context) *Hidden {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HiddenUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HiddenUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HiddenUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdateTime(); !ok {
		v := hidden.UpdateDefaultUpdateTime()
		huo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HiddenUpdateOne) check() error {
	if _, ok := huo.mutation.OwnerID(); huo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Hidden.owner"`)
	}
	return nil
}

func (huo *HiddenUpdateOne) sqlSave(ctx context.Context) (_node *Hidden, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hidden.Table,
			Columns: hidden.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hidden.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hidden.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hidden.FieldID)
		for _, f := range fields {
			if !hidden.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hidden.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.UpdateTime(); ok {
		_spec.SetField(hidden.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := huo.mutation.HiddenID(); ok {
		_spec.SetField(hidden.FieldHiddenID, field.TypeUint64, value)
	}
	if value, ok := huo.mutation.AddedHiddenID(); ok {
		_spec.AddField(hidden.FieldHiddenID, field.TypeUint64, value)
	}
	if huo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hidden.OwnerTable,
			Columns: []string{hidden.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hidden.OwnerTable,
			Columns: []string{hidden.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hidden{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hidden.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
