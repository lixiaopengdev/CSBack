// Code generated by ent, DO NOT EDIT.

package hook

import (
	"CSBackendTmp/ent"
	"context"
	"fmt"
)

// The Agora_tokenFunc type is an adapter to allow the use of ordinary
// function as Agora_token mutator.
type Agora_tokenFunc func(context.Context, *ent.AgoraTokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f Agora_tokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgoraTokenMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgoraTokenMutation", m)
	}
	return f(ctx, mv)
}

// The BundleFunc type is an adapter to allow the use of ordinary
// function as Bundle mutator.
type BundleFunc func(context.Context, *ent.BundleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BundleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BundleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BundleMutation", m)
	}
	return f(ctx, mv)
}

// The CSFieldFunc type is an adapter to allow the use of ordinary
// function as CSField mutator.
type CSFieldFunc func(context.Context, *ent.CSFieldMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CSFieldFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CSFieldMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CSFieldMutation", m)
	}
	return f(ctx, mv)
}

// The CardFunc type is an adapter to allow the use of ordinary
// function as Card mutator.
type CardFunc func(context.Context, *ent.CardMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CardFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CardMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CardMutation", m)
	}
	return f(ctx, mv)
}

// The CollectionFunc type is an adapter to allow the use of ordinary
// function as Collection mutator.
type CollectionFunc func(context.Context, *ent.CollectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CollectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CollectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CollectionMutation", m)
	}
	return f(ctx, mv)
}

// The CommodityFunc type is an adapter to allow the use of ordinary
// function as Commodity mutator.
type CommodityFunc func(context.Context, *ent.CommodityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CommodityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CommodityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CommodityMutation", m)
	}
	return f(ctx, mv)
}

// The ContactFunc type is an adapter to allow the use of ordinary
// function as Contact mutator.
type ContactFunc func(context.Context, *ent.ContactMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContactFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ContactMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContactMutation", m)
	}
	return f(ctx, mv)
}

// The CreationFunc type is an adapter to allow the use of ordinary
// function as Creation mutator.
type CreationFunc func(context.Context, *ent.CreationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CreationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CreationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CreationMutation", m)
	}
	return f(ctx, mv)
}

// The DeviceFunc type is an adapter to allow the use of ordinary
// function as Device mutator.
type DeviceFunc func(context.Context, *ent.DeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeviceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceMutation", m)
	}
	return f(ctx, mv)
}

// The FeedbackFunc type is an adapter to allow the use of ordinary
// function as Feedback mutator.
type FeedbackFunc func(context.Context, *ent.FeedbackMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedbackFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FeedbackMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedbackMutation", m)
	}
	return f(ctx, mv)
}

// The FriendshipFunc type is an adapter to allow the use of ordinary
// function as Friendship mutator.
type FriendshipFunc func(context.Context, *ent.FriendshipMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FriendshipFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FriendshipMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FriendshipMutation", m)
	}
	return f(ctx, mv)
}

// The HiddenFunc type is an adapter to allow the use of ordinary
// function as Hidden mutator.
type HiddenFunc func(context.Context, *ent.HiddenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HiddenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HiddenMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HiddenMutation", m)
	}
	return f(ctx, mv)
}

// The Invite_CodeFunc type is an adapter to allow the use of ordinary
// function as Invite_Code mutator.
type Invite_CodeFunc func(context.Context, *ent.InviteCodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f Invite_CodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InviteCodeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InviteCodeMutation", m)
	}
	return f(ctx, mv)
}

// The JoinFunc type is an adapter to allow the use of ordinary
// function as Join mutator.
type JoinFunc func(context.Context, *ent.JoinMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JoinFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.JoinMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JoinMutation", m)
	}
	return f(ctx, mv)
}

// The MaskFunc type is an adapter to allow the use of ordinary
// function as Mask mutator.
type MaskFunc func(context.Context, *ent.MaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MaskMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MaskMutation", m)
	}
	return f(ctx, mv)
}

// The MessageFunc type is an adapter to allow the use of ordinary
// function as Message mutator.
type MessageFunc func(context.Context, *ent.MessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MessageMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageMutation", m)
	}
	return f(ctx, mv)
}

// The NFTFunc type is an adapter to allow the use of ordinary
// function as NFT mutator.
type NFTFunc func(context.Context, *ent.NFTMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NFTFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NFTMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NFTMutation", m)
	}
	return f(ctx, mv)
}

// The ReactionFunc type is an adapter to allow the use of ordinary
// function as Reaction mutator.
type ReactionFunc func(context.Context, *ent.ReactionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReactionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReactionMutation", m)
	}
	return f(ctx, mv)
}

// The RuleFunc type is an adapter to allow the use of ordinary
// function as Rule mutator.
type RuleFunc func(context.Context, *ent.RuleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RuleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RuleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RuleMutation", m)
	}
	return f(ctx, mv)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
	}
	return f(ctx, mv)
}

// The StreamFunc type is an adapter to allow the use of ordinary
// function as Stream mutator.
type StreamFunc func(context.Context, *ent.StreamMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StreamFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StreamMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StreamMutation", m)
	}
	return f(ctx, mv)
}

// The TimeDewFunc type is an adapter to allow the use of ordinary
// function as TimeDew mutator.
type TimeDewFunc func(context.Context, *ent.TimeDewMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TimeDewFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TimeDewMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TimeDewMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The User_authFunc type is an adapter to allow the use of ordinary
// function as User_auth mutator.
type User_authFunc func(context.Context, *ent.UserAuthMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f User_authFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserAuthMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserAuthMutation", m)
	}
	return f(ctx, mv)
}

// The User_historyFunc type is an adapter to allow the use of ordinary
// function as User_history mutator.
type User_historyFunc func(context.Context, *ent.UserHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f User_historyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserHistoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserHistoryMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
