// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/invite_code"
	"CSBackendTmp/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Invite_Code is the model entity for the Invite_Code schema.
type Invite_Code struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 邀请类型
	Type invite_code.Type `json:"type,omitempty"`
	// 邀请码状态
	Status invite_code.Status `json:"status,omitempty"`
	// 邀请码
	Code string `json:"code,omitempty"`
	// 使用邀请码的用户id
	ConsumerID uint64 `json:"consumer_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Invite_CodeQuery when eager-loading is set.
	Edges Invite_CodeEdges `json:"edges"`
}

// Invite_CodeEdges holds the relations/edges for other nodes in the graph.
type Invite_CodeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Invite_CodeEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invite_Code) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invite_code.FieldID, invite_code.FieldConsumerID, invite_code.FieldUserID:
			values[i] = new(sql.NullInt64)
		case invite_code.FieldType, invite_code.FieldStatus, invite_code.FieldCode:
			values[i] = new(sql.NullString)
		case invite_code.FieldCreateTime, invite_code.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Invite_Code", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invite_Code fields.
func (ic *Invite_Code) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invite_code.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ic.ID = int(value.Int64)
		case invite_code.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ic.CreateTime = value.Time
			}
		case invite_code.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ic.UpdateTime = value.Time
			}
		case invite_code.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ic.Type = invite_code.Type(value.String)
			}
		case invite_code.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ic.Status = invite_code.Status(value.String)
			}
		case invite_code.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ic.Code = value.String
			}
		case invite_code.FieldConsumerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consumer_id", values[i])
			} else if value.Valid {
				ic.ConsumerID = uint64(value.Int64)
			}
		case invite_code.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ic.UserID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Invite_Code entity.
func (ic *Invite_Code) QueryOwner() *UserQuery {
	return (&Invite_CodeClient{config: ic.config}).QueryOwner(ic)
}

// Update returns a builder for updating this Invite_Code.
// Note that you need to call Invite_Code.Unwrap() before calling this method if this Invite_Code
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *Invite_Code) Update() *InviteCodeUpdateOne {
	return (&Invite_CodeClient{config: ic.config}).UpdateOne(ic)
}

// Unwrap unwraps the Invite_Code entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *Invite_Code) Unwrap() *Invite_Code {
	_tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invite_Code is not a transactional entity")
	}
	ic.config.driver = _tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *Invite_Code) String() string {
	var builder strings.Builder
	builder.WriteString("Invite_Code(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ic.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ic.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ic.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ic.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ic.Status))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(ic.Code)
	builder.WriteString(", ")
	builder.WriteString("consumer_id=")
	builder.WriteString(fmt.Sprintf("%v", ic.ConsumerID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ic.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Invite_Codes is a parsable slice of Invite_Code.
type Invite_Codes []*Invite_Code

func (ic Invite_Codes) config(cfg config) {
	for _i := range ic {
		ic[_i].config = cfg
	}
}
