// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/invite_code"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteCodeCreate is the builder for creating a Invite_Code entity.
type InviteCodeCreate struct {
	config
	mutation *InviteCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (icc *InviteCodeCreate) SetCreateTime(t time.Time) *InviteCodeCreate {
	icc.mutation.SetCreateTime(t)
	return icc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableCreateTime(t *time.Time) *InviteCodeCreate {
	if t != nil {
		icc.SetCreateTime(*t)
	}
	return icc
}

// SetUpdateTime sets the "update_time" field.
func (icc *InviteCodeCreate) SetUpdateTime(t time.Time) *InviteCodeCreate {
	icc.mutation.SetUpdateTime(t)
	return icc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableUpdateTime(t *time.Time) *InviteCodeCreate {
	if t != nil {
		icc.SetUpdateTime(*t)
	}
	return icc
}

// SetType sets the "type" field.
func (icc *InviteCodeCreate) SetType(ic invite_code.Type) *InviteCodeCreate {
	icc.mutation.SetType(ic)
	return icc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableType(ic *invite_code.Type) *InviteCodeCreate {
	if ic != nil {
		icc.SetType(*ic)
	}
	return icc
}

// SetStatus sets the "status" field.
func (icc *InviteCodeCreate) SetStatus(ic invite_code.Status) *InviteCodeCreate {
	icc.mutation.SetStatus(ic)
	return icc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableStatus(ic *invite_code.Status) *InviteCodeCreate {
	if ic != nil {
		icc.SetStatus(*ic)
	}
	return icc
}

// SetCode sets the "code" field.
func (icc *InviteCodeCreate) SetCode(s string) *InviteCodeCreate {
	icc.mutation.SetCode(s)
	return icc
}

// SetConsumerID sets the "consumer_id" field.
func (icc *InviteCodeCreate) SetConsumerID(u uint64) *InviteCodeCreate {
	icc.mutation.SetConsumerID(u)
	return icc
}

// SetNillableConsumerID sets the "consumer_id" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableConsumerID(u *uint64) *InviteCodeCreate {
	if u != nil {
		icc.SetConsumerID(*u)
	}
	return icc
}

// SetUserID sets the "user_id" field.
func (icc *InviteCodeCreate) SetUserID(u uint64) *InviteCodeCreate {
	icc.mutation.SetUserID(u)
	return icc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (icc *InviteCodeCreate) SetOwnerID(id uint64) *InviteCodeCreate {
	icc.mutation.SetOwnerID(id)
	return icc
}

// SetOwner sets the "owner" edge to the User entity.
func (icc *InviteCodeCreate) SetOwner(u *User) *InviteCodeCreate {
	return icc.SetOwnerID(u.ID)
}

// Mutation returns the InviteCodeMutation object of the builder.
func (icc *InviteCodeCreate) Mutation() *InviteCodeMutation {
	return icc.mutation
}

// Save creates the Invite_Code in the database.
func (icc *InviteCodeCreate) Save(ctx context.Context) (*Invite_Code, error) {
	var (
		err  error
		node *Invite_Code
	)
	icc.defaults()
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, icc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Invite_Code)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InviteCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *InviteCodeCreate) SaveX(ctx context.Context) *Invite_Code {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *InviteCodeCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *InviteCodeCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *InviteCodeCreate) defaults() {
	if _, ok := icc.mutation.CreateTime(); !ok {
		v := invite_code.DefaultCreateTime()
		icc.mutation.SetCreateTime(v)
	}
	if _, ok := icc.mutation.UpdateTime(); !ok {
		v := invite_code.DefaultUpdateTime()
		icc.mutation.SetUpdateTime(v)
	}
	if _, ok := icc.mutation.GetType(); !ok {
		v := invite_code.DefaultType
		icc.mutation.SetType(v)
	}
	if _, ok := icc.mutation.Status(); !ok {
		v := invite_code.DefaultStatus
		icc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *InviteCodeCreate) check() error {
	if _, ok := icc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Invite_Code.create_time"`)}
	}
	if _, ok := icc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Invite_Code.update_time"`)}
	}
	if _, ok := icc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Invite_Code.type"`)}
	}
	if v, ok := icc.mutation.GetType(); ok {
		if err := invite_code.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Invite_Code.type": %w`, err)}
		}
	}
	if _, ok := icc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invite_Code.status"`)}
	}
	if v, ok := icc.mutation.Status(); ok {
		if err := invite_code.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invite_Code.status": %w`, err)}
		}
	}
	if _, ok := icc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Invite_Code.code"`)}
	}
	if _, ok := icc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Invite_Code.user_id"`)}
	}
	if _, ok := icc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Invite_Code.owner"`)}
	}
	return nil
}

func (icc *InviteCodeCreate) sqlSave(ctx context.Context) (*Invite_Code, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (icc *InviteCodeCreate) createSpec() (*Invite_Code, *sqlgraph.CreateSpec) {
	var (
		_node = &Invite_Code{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invite_code.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: invite_code.FieldID,
			},
		}
	)
	_spec.OnConflict = icc.conflict
	if value, ok := icc.mutation.CreateTime(); ok {
		_spec.SetField(invite_code.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := icc.mutation.UpdateTime(); ok {
		_spec.SetField(invite_code.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := icc.mutation.GetType(); ok {
		_spec.SetField(invite_code.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := icc.mutation.Status(); ok {
		_spec.SetField(invite_code.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := icc.mutation.Code(); ok {
		_spec.SetField(invite_code.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := icc.mutation.ConsumerID(); ok {
		_spec.SetField(invite_code.FieldConsumerID, field.TypeUint64, value)
		_node.ConsumerID = value
	}
	if nodes := icc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite_code.OwnerTable,
			Columns: []string{invite_code.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invite_Code.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Invite_CodeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (icc *InviteCodeCreate) OnConflict(opts ...sql.ConflictOption) *Invite_CodeUpsertOne {
	icc.conflict = opts
	return &Invite_CodeUpsertOne{
		create: icc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icc *InviteCodeCreate) OnConflictColumns(columns ...string) *Invite_CodeUpsertOne {
	icc.conflict = append(icc.conflict, sql.ConflictColumns(columns...))
	return &Invite_CodeUpsertOne{
		create: icc,
	}
}

type (
	// Invite_CodeUpsertOne is the builder for "upsert"-ing
	//  one Invite_Code node.
	Invite_CodeUpsertOne struct {
		create *InviteCodeCreate
	}

	// Invite_CodeUpsert is the "OnConflict" setter.
	Invite_CodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *Invite_CodeUpsert) SetUpdateTime(v time.Time) *Invite_CodeUpsert {
	u.Set(invite_code.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateUpdateTime() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldUpdateTime)
	return u
}

// SetType sets the "type" field.
func (u *Invite_CodeUpsert) SetType(v invite_code.Type) *Invite_CodeUpsert {
	u.Set(invite_code.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateType() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *Invite_CodeUpsert) SetStatus(v invite_code.Status) *Invite_CodeUpsert {
	u.Set(invite_code.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateStatus() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldStatus)
	return u
}

// SetCode sets the "code" field.
func (u *Invite_CodeUpsert) SetCode(v string) *Invite_CodeUpsert {
	u.Set(invite_code.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateCode() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldCode)
	return u
}

// SetConsumerID sets the "consumer_id" field.
func (u *Invite_CodeUpsert) SetConsumerID(v uint64) *Invite_CodeUpsert {
	u.Set(invite_code.FieldConsumerID, v)
	return u
}

// UpdateConsumerID sets the "consumer_id" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateConsumerID() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldConsumerID)
	return u
}

// AddConsumerID adds v to the "consumer_id" field.
func (u *Invite_CodeUpsert) AddConsumerID(v uint64) *Invite_CodeUpsert {
	u.Add(invite_code.FieldConsumerID, v)
	return u
}

// ClearConsumerID clears the value of the "consumer_id" field.
func (u *Invite_CodeUpsert) ClearConsumerID() *Invite_CodeUpsert {
	u.SetNull(invite_code.FieldConsumerID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *Invite_CodeUpsert) SetUserID(v uint64) *Invite_CodeUpsert {
	u.Set(invite_code.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Invite_CodeUpsert) UpdateUserID() *Invite_CodeUpsert {
	u.SetExcluded(invite_code.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Invite_CodeUpsertOne) UpdateNewValues() *Invite_CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(invite_code.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Invite_CodeUpsertOne) Ignore() *Invite_CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Invite_CodeUpsertOne) DoNothing() *Invite_CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InviteCodeCreate.OnConflict
// documentation for more info.
func (u *Invite_CodeUpsertOne) Update(set func(*Invite_CodeUpsert)) *Invite_CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Invite_CodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *Invite_CodeUpsertOne) SetUpdateTime(v time.Time) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateUpdateTime() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *Invite_CodeUpsertOne) SetType(v invite_code.Type) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateType() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *Invite_CodeUpsertOne) SetStatus(v invite_code.Status) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateStatus() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateStatus()
	})
}

// SetCode sets the "code" field.
func (u *Invite_CodeUpsertOne) SetCode(v string) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateCode() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateCode()
	})
}

// SetConsumerID sets the "consumer_id" field.
func (u *Invite_CodeUpsertOne) SetConsumerID(v uint64) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetConsumerID(v)
	})
}

// AddConsumerID adds v to the "consumer_id" field.
func (u *Invite_CodeUpsertOne) AddConsumerID(v uint64) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.AddConsumerID(v)
	})
}

// UpdateConsumerID sets the "consumer_id" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateConsumerID() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateConsumerID()
	})
}

// ClearConsumerID clears the value of the "consumer_id" field.
func (u *Invite_CodeUpsertOne) ClearConsumerID() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.ClearConsumerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *Invite_CodeUpsertOne) SetUserID(v uint64) *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Invite_CodeUpsertOne) UpdateUserID() *Invite_CodeUpsertOne {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *Invite_CodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InviteCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Invite_CodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Invite_CodeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Invite_CodeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InviteCodeCreateBulk is the builder for creating many Invite_Code entities in bulk.
type InviteCodeCreateBulk struct {
	config
	builders []*InviteCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Invite_Code entities in the database.
func (iccb *InviteCodeCreateBulk) Save(ctx context.Context) ([]*Invite_Code, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*Invite_Code, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *InviteCodeCreateBulk) SaveX(ctx context.Context) []*Invite_Code {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *InviteCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *InviteCodeCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invite_Code.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Invite_CodeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (iccb *InviteCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *Invite_CodeUpsertBulk {
	iccb.conflict = opts
	return &Invite_CodeUpsertBulk{
		create: iccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iccb *InviteCodeCreateBulk) OnConflictColumns(columns ...string) *Invite_CodeUpsertBulk {
	iccb.conflict = append(iccb.conflict, sql.ConflictColumns(columns...))
	return &Invite_CodeUpsertBulk{
		create: iccb,
	}
}

// Invite_CodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Invite_Code nodes.
type Invite_CodeUpsertBulk struct {
	create *InviteCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Invite_CodeUpsertBulk) UpdateNewValues() *Invite_CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(invite_code.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invite_Code.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Invite_CodeUpsertBulk) Ignore() *Invite_CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Invite_CodeUpsertBulk) DoNothing() *Invite_CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InviteCodeCreateBulk.OnConflict
// documentation for more info.
func (u *Invite_CodeUpsertBulk) Update(set func(*Invite_CodeUpsert)) *Invite_CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Invite_CodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *Invite_CodeUpsertBulk) SetUpdateTime(v time.Time) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateUpdateTime() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *Invite_CodeUpsertBulk) SetType(v invite_code.Type) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateType() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *Invite_CodeUpsertBulk) SetStatus(v invite_code.Status) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateStatus() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateStatus()
	})
}

// SetCode sets the "code" field.
func (u *Invite_CodeUpsertBulk) SetCode(v string) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateCode() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateCode()
	})
}

// SetConsumerID sets the "consumer_id" field.
func (u *Invite_CodeUpsertBulk) SetConsumerID(v uint64) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetConsumerID(v)
	})
}

// AddConsumerID adds v to the "consumer_id" field.
func (u *Invite_CodeUpsertBulk) AddConsumerID(v uint64) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.AddConsumerID(v)
	})
}

// UpdateConsumerID sets the "consumer_id" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateConsumerID() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateConsumerID()
	})
}

// ClearConsumerID clears the value of the "consumer_id" field.
func (u *Invite_CodeUpsertBulk) ClearConsumerID() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.ClearConsumerID()
	})
}

// SetUserID sets the "user_id" field.
func (u *Invite_CodeUpsertBulk) SetUserID(v uint64) *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *Invite_CodeUpsertBulk) UpdateUserID() *Invite_CodeUpsertBulk {
	return u.Update(func(s *Invite_CodeUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *Invite_CodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InviteCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InviteCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Invite_CodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
