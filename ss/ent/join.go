// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Join is the model entity for the Join schema.
type Join struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// JoinAt holds the value of the "join_at" field.
	JoinAt time.Time `json:"join_at,omitempty"`
	// LeaveAt holds the value of the "leave_at" field.
	LeaveAt time.Time `json:"leave_at,omitempty"`
	// Status holds the value of the "status" field.
	Status join.Status `json:"status,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// CsFieldID holds the value of the "cs_field_id" field.
	CsFieldID uint64 `json:"cs_field_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JoinQuery when eager-loading is set.
	Edges JoinEdges `json:"edges"`
}

// JoinEdges holds the relations/edges for other nodes in the graph.
type JoinEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CsField holds the value of the cs_field edge.
	CsField *CSField `json:"cs_field,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JoinEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CsFieldOrErr returns the CsField value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JoinEdges) CsFieldOrErr() (*CSField, error) {
	if e.loadedTypes[1] {
		if e.CsField == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: csfield.Label}
		}
		return e.CsField, nil
	}
	return nil, &NotLoadedError{edge: "cs_field"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Join) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case join.FieldID, join.FieldUserID, join.FieldCsFieldID:
			values[i] = new(sql.NullInt64)
		case join.FieldStatus:
			values[i] = new(sql.NullString)
		case join.FieldCreateTime, join.FieldUpdateTime, join.FieldJoinAt, join.FieldLeaveAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Join", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Join fields.
func (j *Join) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case join.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case join.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				j.CreateTime = value.Time
			}
		case join.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				j.UpdateTime = value.Time
			}
		case join.FieldJoinAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field join_at", values[i])
			} else if value.Valid {
				j.JoinAt = value.Time
			}
		case join.FieldLeaveAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field leave_at", values[i])
			} else if value.Valid {
				j.LeaveAt = value.Time
			}
		case join.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				j.Status = join.Status(value.String)
			}
		case join.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				j.UserID = uint64(value.Int64)
			}
		case join.FieldCsFieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cs_field_id", values[i])
			} else if value.Valid {
				j.CsFieldID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Join entity.
func (j *Join) QueryUser() *UserQuery {
	return (&JoinClient{config: j.config}).QueryUser(j)
}

// QueryCsField queries the "cs_field" edge of the Join entity.
func (j *Join) QueryCsField() *CSFieldQuery {
	return (&JoinClient{config: j.config}).QueryCsField(j)
}

// Update returns a builder for updating this Join.
// Note that you need to call Join.Unwrap() before calling this method if this Join
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Join) Update() *JoinUpdateOne {
	return (&JoinClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Join entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Join) Unwrap() *Join {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Join is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Join) String() string {
	var builder strings.Builder
	builder.WriteString("Join(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("create_time=")
	builder.WriteString(j.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(j.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("join_at=")
	builder.WriteString(j.JoinAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("leave_at=")
	builder.WriteString(j.LeaveAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", j.Status))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", j.UserID))
	builder.WriteString(", ")
	builder.WriteString("cs_field_id=")
	builder.WriteString(fmt.Sprintf("%v", j.CsFieldID))
	builder.WriteByte(')')
	return builder.String()
}

// Joins is a parsable slice of Join.
type Joins []*Join

func (j Joins) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
