// Code generated by ent, DO NOT EDIT.

package join

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// JoinAt applies equality check predicate on the "join_at" field. It's identical to JoinAtEQ.
func JoinAt(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinAt), v))
	})
}

// LeaveAt applies equality check predicate on the "leave_at" field. It's identical to LeaveAtEQ.
func LeaveAt(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeaveAt), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CsFieldID applies equality check predicate on the "cs_field_id" field. It's identical to CsFieldIDEQ.
func CsFieldID(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsFieldID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// JoinAtEQ applies the EQ predicate on the "join_at" field.
func JoinAtEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinAt), v))
	})
}

// JoinAtNEQ applies the NEQ predicate on the "join_at" field.
func JoinAtNEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinAt), v))
	})
}

// JoinAtIn applies the In predicate on the "join_at" field.
func JoinAtIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinAt), v...))
	})
}

// JoinAtNotIn applies the NotIn predicate on the "join_at" field.
func JoinAtNotIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinAt), v...))
	})
}

// JoinAtGT applies the GT predicate on the "join_at" field.
func JoinAtGT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinAt), v))
	})
}

// JoinAtGTE applies the GTE predicate on the "join_at" field.
func JoinAtGTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinAt), v))
	})
}

// JoinAtLT applies the LT predicate on the "join_at" field.
func JoinAtLT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinAt), v))
	})
}

// JoinAtLTE applies the LTE predicate on the "join_at" field.
func JoinAtLTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinAt), v))
	})
}

// LeaveAtEQ applies the EQ predicate on the "leave_at" field.
func LeaveAtEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtNEQ applies the NEQ predicate on the "leave_at" field.
func LeaveAtNEQ(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtIn applies the In predicate on the "leave_at" field.
func LeaveAtIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLeaveAt), v...))
	})
}

// LeaveAtNotIn applies the NotIn predicate on the "leave_at" field.
func LeaveAtNotIn(vs ...time.Time) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLeaveAt), v...))
	})
}

// LeaveAtGT applies the GT predicate on the "leave_at" field.
func LeaveAtGT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtGTE applies the GTE predicate on the "leave_at" field.
func LeaveAtGTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtLT applies the LT predicate on the "leave_at" field.
func LeaveAtLT(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtLTE applies the LTE predicate on the "leave_at" field.
func LeaveAtLTE(v time.Time) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeaveAt), v))
	})
}

// LeaveAtIsNil applies the IsNil predicate on the "leave_at" field.
func LeaveAtIsNil() predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLeaveAt)))
	})
}

// LeaveAtNotNil applies the NotNil predicate on the "leave_at" field.
func LeaveAtNotNil() predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLeaveAt)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// CsFieldIDEQ applies the EQ predicate on the "cs_field_id" field.
func CsFieldIDEQ(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDNEQ applies the NEQ predicate on the "cs_field_id" field.
func CsFieldIDNEQ(v uint64) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDIn applies the In predicate on the "cs_field_id" field.
func CsFieldIDIn(vs ...uint64) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCsFieldID), v...))
	})
}

// CsFieldIDNotIn applies the NotIn predicate on the "cs_field_id" field.
func CsFieldIDNotIn(vs ...uint64) predicate.Join {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Join(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCsFieldID), v...))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCsField applies the HasEdge predicate on the "cs_field" edge.
func HasCsField() predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CsFieldTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CsFieldTable, CsFieldColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCsFieldWith applies the HasEdge predicate on the "cs_field" edge with a given conditions (other predicates).
func HasCsFieldWith(preds ...predicate.CSField) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CsFieldInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CsFieldTable, CsFieldColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Join) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Join) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Join) predicate.Join {
	return predicate.Join(func(s *sql.Selector) {
		p(s.Not())
	})
}
