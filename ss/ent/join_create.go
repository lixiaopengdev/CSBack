// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JoinCreate is the builder for creating a Join entity.
type JoinCreate struct {
	config
	mutation *JoinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (jc *JoinCreate) SetCreateTime(t time.Time) *JoinCreate {
	jc.mutation.SetCreateTime(t)
	return jc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (jc *JoinCreate) SetNillableCreateTime(t *time.Time) *JoinCreate {
	if t != nil {
		jc.SetCreateTime(*t)
	}
	return jc
}

// SetUpdateTime sets the "update_time" field.
func (jc *JoinCreate) SetUpdateTime(t time.Time) *JoinCreate {
	jc.mutation.SetUpdateTime(t)
	return jc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (jc *JoinCreate) SetNillableUpdateTime(t *time.Time) *JoinCreate {
	if t != nil {
		jc.SetUpdateTime(*t)
	}
	return jc
}

// SetJoinAt sets the "join_at" field.
func (jc *JoinCreate) SetJoinAt(t time.Time) *JoinCreate {
	jc.mutation.SetJoinAt(t)
	return jc
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (jc *JoinCreate) SetNillableJoinAt(t *time.Time) *JoinCreate {
	if t != nil {
		jc.SetJoinAt(*t)
	}
	return jc
}

// SetLeaveAt sets the "leave_at" field.
func (jc *JoinCreate) SetLeaveAt(t time.Time) *JoinCreate {
	jc.mutation.SetLeaveAt(t)
	return jc
}

// SetNillableLeaveAt sets the "leave_at" field if the given value is not nil.
func (jc *JoinCreate) SetNillableLeaveAt(t *time.Time) *JoinCreate {
	if t != nil {
		jc.SetLeaveAt(*t)
	}
	return jc
}

// SetStatus sets the "status" field.
func (jc *JoinCreate) SetStatus(j join.Status) *JoinCreate {
	jc.mutation.SetStatus(j)
	return jc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jc *JoinCreate) SetNillableStatus(j *join.Status) *JoinCreate {
	if j != nil {
		jc.SetStatus(*j)
	}
	return jc
}

// SetUserID sets the "user_id" field.
func (jc *JoinCreate) SetUserID(u uint64) *JoinCreate {
	jc.mutation.SetUserID(u)
	return jc
}

// SetCsFieldID sets the "cs_field_id" field.
func (jc *JoinCreate) SetCsFieldID(u uint64) *JoinCreate {
	jc.mutation.SetCsFieldID(u)
	return jc
}

// SetUser sets the "user" edge to the User entity.
func (jc *JoinCreate) SetUser(u *User) *JoinCreate {
	return jc.SetUserID(u.ID)
}

// SetCsField sets the "cs_field" edge to the CSField entity.
func (jc *JoinCreate) SetCsField(c *CSField) *JoinCreate {
	return jc.SetCsFieldID(c.ID)
}

// Mutation returns the JoinMutation object of the builder.
func (jc *JoinCreate) Mutation() *JoinMutation {
	return jc.mutation
}

// Save creates the Join in the database.
func (jc *JoinCreate) Save(ctx context.Context) (*Join, error) {
	var (
		err  error
		node *Join
	)
	jc.defaults()
	if len(jc.hooks) == 0 {
		if err = jc.check(); err != nil {
			return nil, err
		}
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jc.check(); err != nil {
				return nil, err
			}
			jc.mutation = mutation
			if node, err = jc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			if jc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, jc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Join)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JoinCreate) SaveX(ctx context.Context) *Join {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JoinCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JoinCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JoinCreate) defaults() {
	if _, ok := jc.mutation.CreateTime(); !ok {
		v := join.DefaultCreateTime()
		jc.mutation.SetCreateTime(v)
	}
	if _, ok := jc.mutation.UpdateTime(); !ok {
		v := join.DefaultUpdateTime()
		jc.mutation.SetUpdateTime(v)
	}
	if _, ok := jc.mutation.JoinAt(); !ok {
		v := join.DefaultJoinAt()
		jc.mutation.SetJoinAt(v)
	}
	if _, ok := jc.mutation.Status(); !ok {
		v := join.DefaultStatus
		jc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JoinCreate) check() error {
	if _, ok := jc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Join.create_time"`)}
	}
	if _, ok := jc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Join.update_time"`)}
	}
	if _, ok := jc.mutation.JoinAt(); !ok {
		return &ValidationError{Name: "join_at", err: errors.New(`ent: missing required field "Join.join_at"`)}
	}
	if _, ok := jc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Join.status"`)}
	}
	if v, ok := jc.mutation.Status(); ok {
		if err := join.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Join.status": %w`, err)}
		}
	}
	if _, ok := jc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Join.user_id"`)}
	}
	if _, ok := jc.mutation.CsFieldID(); !ok {
		return &ValidationError{Name: "cs_field_id", err: errors.New(`ent: missing required field "Join.cs_field_id"`)}
	}
	if _, ok := jc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Join.user"`)}
	}
	if _, ok := jc.mutation.CsFieldID(); !ok {
		return &ValidationError{Name: "cs_field", err: errors.New(`ent: missing required edge "Join.cs_field"`)}
	}
	return nil
}

func (jc *JoinCreate) sqlSave(ctx context.Context) (*Join, error) {
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (jc *JoinCreate) createSpec() (*Join, *sqlgraph.CreateSpec) {
	var (
		_node = &Join{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: join.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: join.FieldID,
			},
		}
	)
	_spec.OnConflict = jc.conflict
	if value, ok := jc.mutation.CreateTime(); ok {
		_spec.SetField(join.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := jc.mutation.UpdateTime(); ok {
		_spec.SetField(join.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := jc.mutation.JoinAt(); ok {
		_spec.SetField(join.FieldJoinAt, field.TypeTime, value)
		_node.JoinAt = value
	}
	if value, ok := jc.mutation.LeaveAt(); ok {
		_spec.SetField(join.FieldLeaveAt, field.TypeTime, value)
		_node.LeaveAt = value
	}
	if value, ok := jc.mutation.Status(); ok {
		_spec.SetField(join.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := jc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.UserTable,
			Columns: []string{join.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.CsFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.CsFieldTable,
			Columns: []string{join.CsFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CsFieldID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Join.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JoinUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (jc *JoinCreate) OnConflict(opts ...sql.ConflictOption) *JoinUpsertOne {
	jc.conflict = opts
	return &JoinUpsertOne{
		create: jc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Join.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jc *JoinCreate) OnConflictColumns(columns ...string) *JoinUpsertOne {
	jc.conflict = append(jc.conflict, sql.ConflictColumns(columns...))
	return &JoinUpsertOne{
		create: jc,
	}
}

type (
	// JoinUpsertOne is the builder for "upsert"-ing
	//  one Join node.
	JoinUpsertOne struct {
		create *JoinCreate
	}

	// JoinUpsert is the "OnConflict" setter.
	JoinUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *JoinUpsert) SetUpdateTime(v time.Time) *JoinUpsert {
	u.Set(join.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *JoinUpsert) UpdateUpdateTime() *JoinUpsert {
	u.SetExcluded(join.FieldUpdateTime)
	return u
}

// SetJoinAt sets the "join_at" field.
func (u *JoinUpsert) SetJoinAt(v time.Time) *JoinUpsert {
	u.Set(join.FieldJoinAt, v)
	return u
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *JoinUpsert) UpdateJoinAt() *JoinUpsert {
	u.SetExcluded(join.FieldJoinAt)
	return u
}

// SetLeaveAt sets the "leave_at" field.
func (u *JoinUpsert) SetLeaveAt(v time.Time) *JoinUpsert {
	u.Set(join.FieldLeaveAt, v)
	return u
}

// UpdateLeaveAt sets the "leave_at" field to the value that was provided on create.
func (u *JoinUpsert) UpdateLeaveAt() *JoinUpsert {
	u.SetExcluded(join.FieldLeaveAt)
	return u
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (u *JoinUpsert) ClearLeaveAt() *JoinUpsert {
	u.SetNull(join.FieldLeaveAt)
	return u
}

// SetStatus sets the "status" field.
func (u *JoinUpsert) SetStatus(v join.Status) *JoinUpsert {
	u.Set(join.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JoinUpsert) UpdateStatus() *JoinUpsert {
	u.SetExcluded(join.FieldStatus)
	return u
}

// SetUserID sets the "user_id" field.
func (u *JoinUpsert) SetUserID(v uint64) *JoinUpsert {
	u.Set(join.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *JoinUpsert) UpdateUserID() *JoinUpsert {
	u.SetExcluded(join.FieldUserID)
	return u
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *JoinUpsert) SetCsFieldID(v uint64) *JoinUpsert {
	u.Set(join.FieldCsFieldID, v)
	return u
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *JoinUpsert) UpdateCsFieldID() *JoinUpsert {
	u.SetExcluded(join.FieldCsFieldID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Join.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JoinUpsertOne) UpdateNewValues() *JoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(join.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Join.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JoinUpsertOne) Ignore() *JoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JoinUpsertOne) DoNothing() *JoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JoinCreate.OnConflict
// documentation for more info.
func (u *JoinUpsertOne) Update(set func(*JoinUpsert)) *JoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *JoinUpsertOne) SetUpdateTime(v time.Time) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateUpdateTime() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetJoinAt sets the "join_at" field.
func (u *JoinUpsertOne) SetJoinAt(v time.Time) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetJoinAt(v)
	})
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateJoinAt() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateJoinAt()
	})
}

// SetLeaveAt sets the "leave_at" field.
func (u *JoinUpsertOne) SetLeaveAt(v time.Time) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetLeaveAt(v)
	})
}

// UpdateLeaveAt sets the "leave_at" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateLeaveAt() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateLeaveAt()
	})
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (u *JoinUpsertOne) ClearLeaveAt() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.ClearLeaveAt()
	})
}

// SetStatus sets the "status" field.
func (u *JoinUpsertOne) SetStatus(v join.Status) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateStatus() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateStatus()
	})
}

// SetUserID sets the "user_id" field.
func (u *JoinUpsertOne) SetUserID(v uint64) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateUserID() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateUserID()
	})
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *JoinUpsertOne) SetCsFieldID(v uint64) *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.SetCsFieldID(v)
	})
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *JoinUpsertOne) UpdateCsFieldID() *JoinUpsertOne {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateCsFieldID()
	})
}

// Exec executes the query.
func (u *JoinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JoinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JoinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JoinUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JoinUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JoinCreateBulk is the builder for creating many Join entities in bulk.
type JoinCreateBulk struct {
	config
	builders []*JoinCreate
	conflict []sql.ConflictOption
}

// Save creates the Join entities in the database.
func (jcb *JoinCreateBulk) Save(ctx context.Context) ([]*Join, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Join, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JoinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JoinCreateBulk) SaveX(ctx context.Context) []*Join {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JoinCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JoinCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Join.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JoinUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (jcb *JoinCreateBulk) OnConflict(opts ...sql.ConflictOption) *JoinUpsertBulk {
	jcb.conflict = opts
	return &JoinUpsertBulk{
		create: jcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Join.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (jcb *JoinCreateBulk) OnConflictColumns(columns ...string) *JoinUpsertBulk {
	jcb.conflict = append(jcb.conflict, sql.ConflictColumns(columns...))
	return &JoinUpsertBulk{
		create: jcb,
	}
}

// JoinUpsertBulk is the builder for "upsert"-ing
// a bulk of Join nodes.
type JoinUpsertBulk struct {
	create *JoinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Join.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JoinUpsertBulk) UpdateNewValues() *JoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(join.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Join.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JoinUpsertBulk) Ignore() *JoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JoinUpsertBulk) DoNothing() *JoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JoinCreateBulk.OnConflict
// documentation for more info.
func (u *JoinUpsertBulk) Update(set func(*JoinUpsert)) *JoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *JoinUpsertBulk) SetUpdateTime(v time.Time) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateUpdateTime() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetJoinAt sets the "join_at" field.
func (u *JoinUpsertBulk) SetJoinAt(v time.Time) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetJoinAt(v)
	})
}

// UpdateJoinAt sets the "join_at" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateJoinAt() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateJoinAt()
	})
}

// SetLeaveAt sets the "leave_at" field.
func (u *JoinUpsertBulk) SetLeaveAt(v time.Time) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetLeaveAt(v)
	})
}

// UpdateLeaveAt sets the "leave_at" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateLeaveAt() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateLeaveAt()
	})
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (u *JoinUpsertBulk) ClearLeaveAt() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.ClearLeaveAt()
	})
}

// SetStatus sets the "status" field.
func (u *JoinUpsertBulk) SetStatus(v join.Status) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateStatus() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateStatus()
	})
}

// SetUserID sets the "user_id" field.
func (u *JoinUpsertBulk) SetUserID(v uint64) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateUserID() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateUserID()
	})
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *JoinUpsertBulk) SetCsFieldID(v uint64) *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.SetCsFieldID(v)
	})
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *JoinUpsertBulk) UpdateCsFieldID() *JoinUpsertBulk {
	return u.Update(func(s *JoinUpsert) {
		s.UpdateCsFieldID()
	})
}

// Exec executes the query.
func (u *JoinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JoinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JoinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JoinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
