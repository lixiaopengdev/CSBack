// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JoinUpdate is the builder for updating Join entities.
type JoinUpdate struct {
	config
	hooks    []Hook
	mutation *JoinMutation
}

// Where appends a list predicates to the JoinUpdate builder.
func (ju *JoinUpdate) Where(ps ...predicate.Join) *JoinUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetUpdateTime sets the "update_time" field.
func (ju *JoinUpdate) SetUpdateTime(t time.Time) *JoinUpdate {
	ju.mutation.SetUpdateTime(t)
	return ju
}

// SetJoinAt sets the "join_at" field.
func (ju *JoinUpdate) SetJoinAt(t time.Time) *JoinUpdate {
	ju.mutation.SetJoinAt(t)
	return ju
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (ju *JoinUpdate) SetNillableJoinAt(t *time.Time) *JoinUpdate {
	if t != nil {
		ju.SetJoinAt(*t)
	}
	return ju
}

// SetLeaveAt sets the "leave_at" field.
func (ju *JoinUpdate) SetLeaveAt(t time.Time) *JoinUpdate {
	ju.mutation.SetLeaveAt(t)
	return ju
}

// SetNillableLeaveAt sets the "leave_at" field if the given value is not nil.
func (ju *JoinUpdate) SetNillableLeaveAt(t *time.Time) *JoinUpdate {
	if t != nil {
		ju.SetLeaveAt(*t)
	}
	return ju
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (ju *JoinUpdate) ClearLeaveAt() *JoinUpdate {
	ju.mutation.ClearLeaveAt()
	return ju
}

// SetStatus sets the "status" field.
func (ju *JoinUpdate) SetStatus(j join.Status) *JoinUpdate {
	ju.mutation.SetStatus(j)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JoinUpdate) SetNillableStatus(j *join.Status) *JoinUpdate {
	if j != nil {
		ju.SetStatus(*j)
	}
	return ju
}

// SetUserID sets the "user_id" field.
func (ju *JoinUpdate) SetUserID(u uint64) *JoinUpdate {
	ju.mutation.SetUserID(u)
	return ju
}

// SetCsFieldID sets the "cs_field_id" field.
func (ju *JoinUpdate) SetCsFieldID(u uint64) *JoinUpdate {
	ju.mutation.SetCsFieldID(u)
	return ju
}

// SetUser sets the "user" edge to the User entity.
func (ju *JoinUpdate) SetUser(u *User) *JoinUpdate {
	return ju.SetUserID(u.ID)
}

// SetCsField sets the "cs_field" edge to the CSField entity.
func (ju *JoinUpdate) SetCsField(c *CSField) *JoinUpdate {
	return ju.SetCsFieldID(c.ID)
}

// Mutation returns the JoinMutation object of the builder.
func (ju *JoinUpdate) Mutation() *JoinMutation {
	return ju.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ju *JoinUpdate) ClearUser() *JoinUpdate {
	ju.mutation.ClearUser()
	return ju
}

// ClearCsField clears the "cs_field" edge to the CSField entity.
func (ju *JoinUpdate) ClearCsField() *JoinUpdate {
	ju.mutation.ClearCsField()
	return ju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JoinUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ju.defaults()
	if len(ju.hooks) == 0 {
		if err = ju.check(); err != nil {
			return 0, err
		}
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ju.check(); err != nil {
				return 0, err
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			if ju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JoinUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JoinUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JoinUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JoinUpdate) defaults() {
	if _, ok := ju.mutation.UpdateTime(); !ok {
		v := join.UpdateDefaultUpdateTime()
		ju.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JoinUpdate) check() error {
	if v, ok := ju.mutation.Status(); ok {
		if err := join.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Join.status": %w`, err)}
		}
	}
	if _, ok := ju.mutation.UserID(); ju.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Join.user"`)
	}
	if _, ok := ju.mutation.CsFieldID(); ju.mutation.CsFieldCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Join.cs_field"`)
	}
	return nil
}

func (ju *JoinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   join.Table,
			Columns: join.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: join.FieldID,
			},
		},
	}
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.UpdateTime(); ok {
		_spec.SetField(join.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.JoinAt(); ok {
		_spec.SetField(join.FieldJoinAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.LeaveAt(); ok {
		_spec.SetField(join.FieldLeaveAt, field.TypeTime, value)
	}
	if ju.mutation.LeaveAtCleared() {
		_spec.ClearField(join.FieldLeaveAt, field.TypeTime)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(join.FieldStatus, field.TypeEnum, value)
	}
	if ju.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.UserTable,
			Columns: []string{join.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.UserTable,
			Columns: []string{join.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.CsFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.CsFieldTable,
			Columns: []string{join.CsFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.CsFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.CsFieldTable,
			Columns: []string{join.CsFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{join.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// JoinUpdateOne is the builder for updating a single Join entity.
type JoinUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JoinMutation
}

// SetUpdateTime sets the "update_time" field.
func (juo *JoinUpdateOne) SetUpdateTime(t time.Time) *JoinUpdateOne {
	juo.mutation.SetUpdateTime(t)
	return juo
}

// SetJoinAt sets the "join_at" field.
func (juo *JoinUpdateOne) SetJoinAt(t time.Time) *JoinUpdateOne {
	juo.mutation.SetJoinAt(t)
	return juo
}

// SetNillableJoinAt sets the "join_at" field if the given value is not nil.
func (juo *JoinUpdateOne) SetNillableJoinAt(t *time.Time) *JoinUpdateOne {
	if t != nil {
		juo.SetJoinAt(*t)
	}
	return juo
}

// SetLeaveAt sets the "leave_at" field.
func (juo *JoinUpdateOne) SetLeaveAt(t time.Time) *JoinUpdateOne {
	juo.mutation.SetLeaveAt(t)
	return juo
}

// SetNillableLeaveAt sets the "leave_at" field if the given value is not nil.
func (juo *JoinUpdateOne) SetNillableLeaveAt(t *time.Time) *JoinUpdateOne {
	if t != nil {
		juo.SetLeaveAt(*t)
	}
	return juo
}

// ClearLeaveAt clears the value of the "leave_at" field.
func (juo *JoinUpdateOne) ClearLeaveAt() *JoinUpdateOne {
	juo.mutation.ClearLeaveAt()
	return juo
}

// SetStatus sets the "status" field.
func (juo *JoinUpdateOne) SetStatus(j join.Status) *JoinUpdateOne {
	juo.mutation.SetStatus(j)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JoinUpdateOne) SetNillableStatus(j *join.Status) *JoinUpdateOne {
	if j != nil {
		juo.SetStatus(*j)
	}
	return juo
}

// SetUserID sets the "user_id" field.
func (juo *JoinUpdateOne) SetUserID(u uint64) *JoinUpdateOne {
	juo.mutation.SetUserID(u)
	return juo
}

// SetCsFieldID sets the "cs_field_id" field.
func (juo *JoinUpdateOne) SetCsFieldID(u uint64) *JoinUpdateOne {
	juo.mutation.SetCsFieldID(u)
	return juo
}

// SetUser sets the "user" edge to the User entity.
func (juo *JoinUpdateOne) SetUser(u *User) *JoinUpdateOne {
	return juo.SetUserID(u.ID)
}

// SetCsField sets the "cs_field" edge to the CSField entity.
func (juo *JoinUpdateOne) SetCsField(c *CSField) *JoinUpdateOne {
	return juo.SetCsFieldID(c.ID)
}

// Mutation returns the JoinMutation object of the builder.
func (juo *JoinUpdateOne) Mutation() *JoinMutation {
	return juo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (juo *JoinUpdateOne) ClearUser() *JoinUpdateOne {
	juo.mutation.ClearUser()
	return juo
}

// ClearCsField clears the "cs_field" edge to the CSField entity.
func (juo *JoinUpdateOne) ClearCsField() *JoinUpdateOne {
	juo.mutation.ClearCsField()
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JoinUpdateOne) Select(field string, fields ...string) *JoinUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Join entity.
func (juo *JoinUpdateOne) Save(ctx context.Context) (*Join, error) {
	var (
		err  error
		node *Join
	)
	juo.defaults()
	if len(juo.hooks) == 0 {
		if err = juo.check(); err != nil {
			return nil, err
		}
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = juo.check(); err != nil {
				return nil, err
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			if juo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = juo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, juo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Join)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JoinUpdateOne) SaveX(ctx context.Context) *Join {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JoinUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JoinUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JoinUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdateTime(); !ok {
		v := join.UpdateDefaultUpdateTime()
		juo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JoinUpdateOne) check() error {
	if v, ok := juo.mutation.Status(); ok {
		if err := join.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Join.status": %w`, err)}
		}
	}
	if _, ok := juo.mutation.UserID(); juo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Join.user"`)
	}
	if _, ok := juo.mutation.CsFieldID(); juo.mutation.CsFieldCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Join.cs_field"`)
	}
	return nil
}

func (juo *JoinUpdateOne) sqlSave(ctx context.Context) (_node *Join, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   join.Table,
			Columns: join.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: join.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Join.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, join.FieldID)
		for _, f := range fields {
			if !join.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != join.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.UpdateTime(); ok {
		_spec.SetField(join.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.JoinAt(); ok {
		_spec.SetField(join.FieldJoinAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.LeaveAt(); ok {
		_spec.SetField(join.FieldLeaveAt, field.TypeTime, value)
	}
	if juo.mutation.LeaveAtCleared() {
		_spec.ClearField(join.FieldLeaveAt, field.TypeTime)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(join.FieldStatus, field.TypeEnum, value)
	}
	if juo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.UserTable,
			Columns: []string{join.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.UserTable,
			Columns: []string{join.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.CsFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.CsFieldTable,
			Columns: []string{join.CsFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.CsFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   join.CsFieldTable,
			Columns: []string{join.CsFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Join{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{join.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
