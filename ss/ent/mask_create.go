// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/bundle"
	"CSBackendTmp/ent/mask"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MaskCreate is the builder for creating a Mask entity.
type MaskCreate struct {
	config
	mutation *MaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mc *MaskCreate) SetCreateTime(t time.Time) *MaskCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MaskCreate) SetNillableCreateTime(t *time.Time) *MaskCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MaskCreate) SetUpdateTime(t time.Time) *MaskCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MaskCreate) SetNillableUpdateTime(t *time.Time) *MaskCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MaskCreate) SetName(s string) *MaskCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetDesc sets the "desc" field.
func (mc *MaskCreate) SetDesc(s string) *MaskCreate {
	mc.mutation.SetDesc(s)
	return mc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mc *MaskCreate) SetNillableDesc(s *string) *MaskCreate {
	if s != nil {
		mc.SetDesc(*s)
	}
	return mc
}

// SetGUID sets the "GUID" field.
func (mc *MaskCreate) SetGUID(s string) *MaskCreate {
	mc.mutation.SetGUID(s)
	return mc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (mc *MaskCreate) SetThumbnailURL(s string) *MaskCreate {
	mc.mutation.SetThumbnailURL(s)
	return mc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (mc *MaskCreate) SetNillableThumbnailURL(s *string) *MaskCreate {
	if s != nil {
		mc.SetThumbnailURL(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MaskCreate) SetStatus(m mask.Status) *MaskCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MaskCreate) SetNillableStatus(m *mask.Status) *MaskCreate {
	if m != nil {
		mc.SetStatus(*m)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MaskCreate) SetType(m mask.Type) *MaskCreate {
	mc.mutation.SetType(m)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MaskCreate) SetNillableType(m *mask.Type) *MaskCreate {
	if m != nil {
		mc.SetType(*m)
	}
	return mc
}

// SetUserID sets the "user_id" field.
func (mc *MaskCreate) SetUserID(u uint64) *MaskCreate {
	mc.mutation.SetUserID(u)
	return mc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mc *MaskCreate) SetNillableUserID(u *uint64) *MaskCreate {
	if u != nil {
		mc.SetUserID(*u)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MaskCreate) SetID(u uint64) *MaskCreate {
	mc.mutation.SetID(u)
	return mc
}

// AddBundleIDs adds the "bundle" edge to the Bundle entity by IDs.
func (mc *MaskCreate) AddBundleIDs(ids ...uint64) *MaskCreate {
	mc.mutation.AddBundleIDs(ids...)
	return mc
}

// AddBundle adds the "bundle" edges to the Bundle entity.
func (mc *MaskCreate) AddBundle(b ...*Bundle) *MaskCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mc.AddBundleIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (mc *MaskCreate) SetOwnerID(id uint64) *MaskCreate {
	mc.mutation.SetOwnerID(id)
	return mc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (mc *MaskCreate) SetNillableOwnerID(id *uint64) *MaskCreate {
	if id != nil {
		mc = mc.SetOwnerID(*id)
	}
	return mc
}

// SetOwner sets the "owner" edge to the User entity.
func (mc *MaskCreate) SetOwner(u *User) *MaskCreate {
	return mc.SetOwnerID(u.ID)
}

// Mutation returns the MaskMutation object of the builder.
func (mc *MaskCreate) Mutation() *MaskMutation {
	return mc.mutation
}

// Save creates the Mask in the database.
func (mc *MaskCreate) Save(ctx context.Context) (*Mask, error) {
	var (
		err  error
		node *Mask
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Mask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MaskCreate) SaveX(ctx context.Context) *Mask {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MaskCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MaskCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MaskCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := mask.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := mask.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Desc(); !ok {
		v := mask.DefaultDesc
		mc.mutation.SetDesc(v)
	}
	if _, ok := mc.mutation.ThumbnailURL(); !ok {
		v := mask.DefaultThumbnailURL
		mc.mutation.SetThumbnailURL(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mask.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.GetType(); !ok {
		v := mask.DefaultType
		mc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MaskCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Mask.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Mask.update_time"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mask.name"`)}
	}
	if _, ok := mc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Mask.desc"`)}
	}
	if _, ok := mc.mutation.GUID(); !ok {
		return &ValidationError{Name: "GUID", err: errors.New(`ent: missing required field "Mask.GUID"`)}
	}
	if _, ok := mc.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "Mask.thumbnail_url"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Mask.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := mask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Mask.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Mask.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := mask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Mask.type": %w`, err)}
		}
	}
	return nil
}

func (mc *MaskCreate) sqlSave(ctx context.Context) (*Mask, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (mc *MaskCreate) createSpec() (*Mask, *sqlgraph.CreateSpec) {
	var (
		_node = &Mask{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: mask.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(mask.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(mask.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mask.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Desc(); ok {
		_spec.SetField(mask.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := mc.mutation.GUID(); ok {
		_spec.SetField(mask.FieldGUID, field.TypeString, value)
		_node.GUID = value
	}
	if value, ok := mc.mutation.ThumbnailURL(); ok {
		_spec.SetField(mask.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mask.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(mask.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := mc.mutation.BundleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mask.BundleTable,
			Columns: []string{mask.BundleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bundle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mask.OwnerTable,
			Columns: []string{mask.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mask.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mc *MaskCreate) OnConflict(opts ...sql.ConflictOption) *MaskUpsertOne {
	mc.conflict = opts
	return &MaskUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MaskCreate) OnConflictColumns(columns ...string) *MaskUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MaskUpsertOne{
		create: mc,
	}
}

type (
	// MaskUpsertOne is the builder for "upsert"-ing
	//  one Mask node.
	MaskUpsertOne struct {
		create *MaskCreate
	}

	// MaskUpsert is the "OnConflict" setter.
	MaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *MaskUpsert) SetUpdateTime(v time.Time) *MaskUpsert {
	u.Set(mask.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MaskUpsert) UpdateUpdateTime() *MaskUpsert {
	u.SetExcluded(mask.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *MaskUpsert) SetName(v string) *MaskUpsert {
	u.Set(mask.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaskUpsert) UpdateName() *MaskUpsert {
	u.SetExcluded(mask.FieldName)
	return u
}

// SetDesc sets the "desc" field.
func (u *MaskUpsert) SetDesc(v string) *MaskUpsert {
	u.Set(mask.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MaskUpsert) UpdateDesc() *MaskUpsert {
	u.SetExcluded(mask.FieldDesc)
	return u
}

// SetGUID sets the "GUID" field.
func (u *MaskUpsert) SetGUID(v string) *MaskUpsert {
	u.Set(mask.FieldGUID, v)
	return u
}

// UpdateGUID sets the "GUID" field to the value that was provided on create.
func (u *MaskUpsert) UpdateGUID() *MaskUpsert {
	u.SetExcluded(mask.FieldGUID)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MaskUpsert) SetThumbnailURL(v string) *MaskUpsert {
	u.Set(mask.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MaskUpsert) UpdateThumbnailURL() *MaskUpsert {
	u.SetExcluded(mask.FieldThumbnailURL)
	return u
}

// SetStatus sets the "status" field.
func (u *MaskUpsert) SetStatus(v mask.Status) *MaskUpsert {
	u.Set(mask.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MaskUpsert) UpdateStatus() *MaskUpsert {
	u.SetExcluded(mask.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *MaskUpsert) SetType(v mask.Type) *MaskUpsert {
	u.Set(mask.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaskUpsert) UpdateType() *MaskUpsert {
	u.SetExcluded(mask.FieldType)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MaskUpsert) SetUserID(v uint64) *MaskUpsert {
	u.Set(mask.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MaskUpsert) UpdateUserID() *MaskUpsert {
	u.SetExcluded(mask.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *MaskUpsert) ClearUserID() *MaskUpsert {
	u.SetNull(mask.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MaskUpsertOne) UpdateNewValues() *MaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mask.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(mask.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MaskUpsertOne) Ignore() *MaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaskUpsertOne) DoNothing() *MaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaskCreate.OnConflict
// documentation for more info.
func (u *MaskUpsertOne) Update(set func(*MaskUpsert)) *MaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MaskUpsertOne) SetUpdateTime(v time.Time) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateUpdateTime() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *MaskUpsertOne) SetName(v string) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateName() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *MaskUpsertOne) SetDesc(v string) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateDesc() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateDesc()
	})
}

// SetGUID sets the "GUID" field.
func (u *MaskUpsertOne) SetGUID(v string) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetGUID(v)
	})
}

// UpdateGUID sets the "GUID" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateGUID() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateGUID()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MaskUpsertOne) SetThumbnailURL(v string) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateThumbnailURL() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetStatus sets the "status" field.
func (u *MaskUpsertOne) SetStatus(v mask.Status) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateStatus() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *MaskUpsertOne) SetType(v mask.Type) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateType() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateType()
	})
}

// SetUserID sets the "user_id" field.
func (u *MaskUpsertOne) SetUserID(v uint64) *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MaskUpsertOne) UpdateUserID() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *MaskUpsertOne) ClearUserID() *MaskUpsertOne {
	return u.Update(func(s *MaskUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *MaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MaskUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MaskUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MaskCreateBulk is the builder for creating many Mask entities in bulk.
type MaskCreateBulk struct {
	config
	builders []*MaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Mask entities in the database.
func (mcb *MaskCreateBulk) Save(ctx context.Context) ([]*Mask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mask, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MaskCreateBulk) SaveX(ctx context.Context) []*Mask {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MaskCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MaskCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mcb *MaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *MaskUpsertBulk {
	mcb.conflict = opts
	return &MaskUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MaskCreateBulk) OnConflictColumns(columns ...string) *MaskUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MaskUpsertBulk{
		create: mcb,
	}
}

// MaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Mask nodes.
type MaskUpsertBulk struct {
	create *MaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MaskUpsertBulk) UpdateNewValues() *MaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mask.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(mask.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MaskUpsertBulk) Ignore() *MaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaskUpsertBulk) DoNothing() *MaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaskCreateBulk.OnConflict
// documentation for more info.
func (u *MaskUpsertBulk) Update(set func(*MaskUpsert)) *MaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MaskUpsertBulk) SetUpdateTime(v time.Time) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateUpdateTime() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *MaskUpsertBulk) SetName(v string) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateName() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *MaskUpsertBulk) SetDesc(v string) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateDesc() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateDesc()
	})
}

// SetGUID sets the "GUID" field.
func (u *MaskUpsertBulk) SetGUID(v string) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetGUID(v)
	})
}

// UpdateGUID sets the "GUID" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateGUID() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateGUID()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MaskUpsertBulk) SetThumbnailURL(v string) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateThumbnailURL() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetStatus sets the "status" field.
func (u *MaskUpsertBulk) SetStatus(v mask.Status) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateStatus() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *MaskUpsertBulk) SetType(v mask.Type) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateType() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateType()
	})
}

// SetUserID sets the "user_id" field.
func (u *MaskUpsertBulk) SetUserID(v uint64) *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MaskUpsertBulk) UpdateUserID() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *MaskUpsertBulk) ClearUserID() *MaskUpsertBulk {
	return u.Update(func(s *MaskUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *MaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
