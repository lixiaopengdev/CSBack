// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AgoraTokensColumns holds the columns for the "agora_tokens" table.
	AgoraTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// AgoraTokensTable holds the schema information for the "agora_tokens" table.
	AgoraTokensTable = &schema.Table{
		Name:       "agora_tokens",
		Columns:    AgoraTokensColumns,
		PrimaryKey: []*schema.Column{AgoraTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agora_tokens_users_token",
				Columns:    []*schema.Column{AgoraTokensColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BundlesColumns holds the columns for the "bundles" table.
	BundlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "verion_id", Type: field.TypeUint64, Nullable: true},
		{Name: "bundle_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3"}, Default: "status1"},
		{Name: "platform", Type: field.TypeEnum, Enums: []string{"iPhone", "Android"}, Default: "iPhone"},
		{Name: "mask_id", Type: field.TypeUint64, Nullable: true},
	}
	// BundlesTable holds the schema information for the "bundles" table.
	BundlesTable = &schema.Table{
		Name:       "bundles",
		Columns:    BundlesColumns,
		PrimaryKey: []*schema.Column{BundlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bundles_masks_bundle",
				Columns:    []*schema.Column{BundlesColumns[7]},
				RefColumns: []*schema.Column{MasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CsFieldsColumns holds the columns for the "cs_fields" table.
	CsFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"creating", "opening", "end"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"empty", "video", "audio", "text", "mixed"}},
		{Name: "mode", Type: field.TypeEnum, Enums: []string{"single", "multi"}},
		{Name: "private_level", Type: field.TypeEnum, Enums: []string{"public", "ghost", "private"}, Default: "public"},
		{Name: "user_id", Type: field.TypeUint64},
		{Name: "master_id", Type: field.TypeUint64, Nullable: true},
	}
	// CsFieldsTable holds the schema information for the "cs_fields" table.
	CsFieldsTable = &schema.Table{
		Name:       "cs_fields",
		Columns:    CsFieldsColumns,
		PrimaryKey: []*schema.Column{CsFieldsColumns[0]},
	}
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "pic_url", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "resource_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3"}, Default: "status1"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"type1", "type2", "type3"}, Default: "type1"},
		{Name: "script", Type: field.TypeJSON, Nullable: true},
		{Name: "script_raw", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "script_url", Type: field.TypeString, Nullable: true},
		{Name: "commodity_card", Type: field.TypeUint64, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64, Nullable: true},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cards_commodities_card",
				Columns:    []*schema.Column{CardsColumns[13]},
				RefColumns: []*schema.Column{CommoditiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cards_users_card",
				Columns:    []*schema.Column{CardsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CollectionsColumns holds the columns for the "collections" table.
	CollectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"timedew"}, Default: "timedew"},
		{Name: "item_id", Type: field.TypeUint64},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// CollectionsTable holds the schema information for the "collections" table.
	CollectionsTable = &schema.Table{
		Name:       "collections",
		Columns:    CollectionsColumns,
		PrimaryKey: []*schema.Column{CollectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "collections_users_collection",
				Columns:    []*schema.Column{CollectionsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "collection_user_id_item_id",
				Unique:  true,
				Columns: []*schema.Column{CollectionsColumns[5], CollectionsColumns[4]},
			},
		},
	}
	// CommoditiesColumns holds the columns for the "commodities" table.
	CommoditiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// CommoditiesTable holds the schema information for the "commodities" table.
	CommoditiesTable = &schema.Table{
		Name:       "commodities",
		Columns:    CommoditiesColumns,
		PrimaryKey: []*schema.Column{CommoditiesColumns[0]},
	}
	// ContactsColumns holds the columns for the "contacts" table.
	ContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "mobile_no", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// ContactsTable holds the schema information for the "contacts" table.
	ContactsTable = &schema.Table{
		Name:       "contacts",
		Columns:    ContactsColumns,
		PrimaryKey: []*schema.Column{ContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contacts_users_contact",
				Columns:    []*schema.Column{ContactsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CreationsColumns holds the columns for the "creations" table.
	CreationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// CreationsTable holds the schema information for the "creations" table.
	CreationsTable = &schema.Table{
		Name:       "creations",
		Columns:    CreationsColumns,
		PrimaryKey: []*schema.Column{CreationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "creations_users_creation",
				Columns:    []*schema.Column{CreationsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"iPhone", "android", "unknown"}},
		{Name: "code", Type: field.TypeString, Nullable: true},
		{Name: "push_token", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:       "devices",
		Columns:    DevicesColumns,
		PrimaryKey: []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "devices_users_device",
				Columns:    []*schema.Column{DevicesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FeedbacksColumns holds the columns for the "feedbacks" table.
	FeedbacksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"cs_field", "time_dew", "user"}},
		{Name: "reason", Type: field.TypeString},
		{Name: "item_id", Type: field.TypeUint64, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// FeedbacksTable holds the schema information for the "feedbacks" table.
	FeedbacksTable = &schema.Table{
		Name:       "feedbacks",
		Columns:    FeedbacksColumns,
		PrimaryKey: []*schema.Column{FeedbacksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "feedbacks_users_feedback",
				Columns:    []*schema.Column{FeedbacksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FriendshipsColumns holds the columns for the "friendships" table.
	FriendshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"invite", "invited", "established", "rejected", "forbidden"}},
		{Name: "request_type", Type: field.TypeEnum, Enums: []string{"normal", "good", "close", "custom", "none"}, Default: "none"},
		{Name: "curr_type", Type: field.TypeEnum, Enums: []string{"normal", "good", "close", "custom", "none"}, Default: "none"},
		{Name: "user_id", Type: field.TypeUint64},
		{Name: "friend_id", Type: field.TypeUint64},
	}
	// FriendshipsTable holds the schema information for the "friendships" table.
	FriendshipsTable = &schema.Table{
		Name:       "friendships",
		Columns:    FriendshipsColumns,
		PrimaryKey: []*schema.Column{FriendshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "friendships_users_user",
				Columns:    []*schema.Column{FriendshipsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "friendships_users_friend",
				Columns:    []*schema.Column{FriendshipsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "friendship_user_id_friend_id",
				Unique:  true,
				Columns: []*schema.Column{FriendshipsColumns[6], FriendshipsColumns[7]},
			},
		},
	}
	// HiddensColumns holds the columns for the "hiddens" table.
	HiddensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "hidden_id", Type: field.TypeUint64},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// HiddensTable holds the schema information for the "hiddens" table.
	HiddensTable = &schema.Table{
		Name:       "hiddens",
		Columns:    HiddensColumns,
		PrimaryKey: []*schema.Column{HiddensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hiddens_users_hidden",
				Columns:    []*schema.Column{HiddensColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "hidden_user_id_hidden_id",
				Unique:  true,
				Columns: []*schema.Column{HiddensColumns[4], HiddensColumns[3]},
			},
		},
	}
	// InviteCodesColumns holds the columns for the "invite_codes" table.
	InviteCodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"register"}, Default: "register"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"generated", "used"}, Default: "generated"},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "consumer_id", Type: field.TypeUint64, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// InviteCodesTable holds the schema information for the "invite_codes" table.
	InviteCodesTable = &schema.Table{
		Name:       "invite_codes",
		Columns:    InviteCodesColumns,
		PrimaryKey: []*schema.Column{InviteCodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invite_codes_users_invite_code",
				Columns:    []*schema.Column{InviteCodesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// JoinsColumns holds the columns for the "joins" table.
	JoinsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "join_at", Type: field.TypeTime},
		{Name: "leave_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"infield", "temp_leaving", "invited", "leave", "host", "admin"}, Default: "host"},
		{Name: "user_id", Type: field.TypeUint64},
		{Name: "cs_field_id", Type: field.TypeUint64},
	}
	// JoinsTable holds the schema information for the "joins" table.
	JoinsTable = &schema.Table{
		Name:       "joins",
		Columns:    JoinsColumns,
		PrimaryKey: []*schema.Column{JoinsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "joins_users_user",
				Columns:    []*schema.Column{JoinsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "joins_cs_fields_cs_field",
				Columns:    []*schema.Column{JoinsColumns[7]},
				RefColumns: []*schema.Column{CsFieldsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "join_user_id_cs_field_id",
				Unique:  true,
				Columns: []*schema.Column{JoinsColumns[6], JoinsColumns[7]},
			},
		},
	}
	// MasksColumns holds the columns for the "masks" table.
	MasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "desc", Type: field.TypeString, Default: "description for a mask"},
		{Name: "guid", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString, Default: "http://192.168.50.193/assets/favicon.ico"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3"}, Default: "status1"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"type1", "type2", "type3"}, Default: "type1"},
		{Name: "user_id", Type: field.TypeUint64, Nullable: true},
	}
	// MasksTable holds the schema information for the "masks" table.
	MasksTable = &schema.Table{
		Name:       "masks",
		Columns:    MasksColumns,
		PrimaryKey: []*schema.Column{MasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "masks_users_mask",
				Columns:    []*schema.Column{MasksColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"text", "pic", "unknown"}, Default: "text"},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_users_message",
				Columns:    []*schema.Column{MessagesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NFTsColumns holds the columns for the "NFTs" table.
	NFTsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Default: "nft name"},
		{Name: "desc", Type: field.TypeString, Default: "default desc"},
		{Name: "creator_id", Type: field.TypeUint64, Nullable: true},
		{Name: "media_info_json", Type: field.TypeJSON},
		{Name: "media_url", Type: field.TypeString, Nullable: true},
		{Name: "media_durl", Type: field.TypeString, Nullable: true},
		{Name: "token_id", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3", "status4"}, Default: "status1"},
		{Name: "desc_json_url", Type: field.TypeString, Nullable: true},
		{Name: "desc_json_durl", Type: field.TypeString, Nullable: true},
		{Name: "pin_status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3", "status4"}, Default: "status1"},
		{Name: "contract_address", Type: field.TypeString, Default: ""},
		{Name: "mint_card_num", Type: field.TypeUint64, Default: 0},
		{Name: "commodity_nft", Type: field.TypeUint64, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64, Nullable: true},
	}
	// NFTsTable holds the schema information for the "NFTs" table.
	NFTsTable = &schema.Table{
		Name:       "NFTs",
		Columns:    NFTsColumns,
		PrimaryKey: []*schema.Column{NFTsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "NFTs_commodities_NFT",
				Columns:    []*schema.Column{NFTsColumns[16]},
				RefColumns: []*schema.Column{CommoditiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "NFTs_users_nft",
				Columns:    []*schema.Column{NFTsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReactionsColumns holds the columns for the "reactions" table.
	ReactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "is_lol", Type: field.TypeBool, Default: false},
		{Name: "is_omg", Type: field.TypeBool, Default: false},
		{Name: "is_cool", Type: field.TypeBool, Default: false},
		{Name: "is_nooo", Type: field.TypeBool, Default: false},
		{Name: "is_damn", Type: field.TypeBool, Default: false},
		{Name: "time_dew_id", Type: field.TypeUint64},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// ReactionsTable holds the schema information for the "reactions" table.
	ReactionsTable = &schema.Table{
		Name:       "reactions",
		Columns:    ReactionsColumns,
		PrimaryKey: []*schema.Column{ReactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reactions_time_dews_timedew",
				Columns:    []*schema.Column{ReactionsColumns[8]},
				RefColumns: []*schema.Column{TimeDewsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "reactions_users_user",
				Columns:    []*schema.Column{ReactionsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "reaction_time_dew_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{ReactionsColumns[8], ReactionsColumns[9]},
			},
		},
	}
	// RulesColumns holds the columns for the "rules" table.
	RulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// RulesTable holds the schema information for the "rules" table.
	RulesTable = &schema.Table{
		Name:       "rules",
		Columns:    RulesColumns,
		PrimaryKey: []*schema.Column{RulesColumns[0]},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "friends_online", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "time_dew_from_friends", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "detailed_notification", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "receive_field_invitation", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "see_my_location", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "camera", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "microphone", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "health_data", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "time_dew_location", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "time_dew_microphone", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "time_dew_lora", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "public_collection", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "settings_users_setting",
				Columns:    []*schema.Column{SettingsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// StreamsColumns holds the columns for the "streams" table.
	StreamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"video", "audio", "custom"}},
		{Name: "stream_url", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// StreamsTable holds the schema information for the "streams" table.
	StreamsTable = &schema.Table{
		Name:       "streams",
		Columns:    StreamsColumns,
		PrimaryKey: []*schema.Column{StreamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "streams_users_stream",
				Columns:    []*schema.Column{StreamsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TimeDewsColumns holds the columns for the "time_dews" table.
	TimeDewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "raw_data", Type: field.TypeJSON, Nullable: true},
		{Name: "speechs", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "place", Type: field.TypeString, Nullable: true},
		{Name: "generated_content", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "prompt_seq", Type: field.TypeString, Nullable: true},
		{Name: "prompt_seq_full_text", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "joined_label", Type: field.TypeString, Nullable: true},
		{Name: "pic_url", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "resource_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"status1", "status2", "status3"}, Default: "status1"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"user", "cs_field", "system", "invite"}, Default: "user"},
		{Name: "cs_field_id", Type: field.TypeUint64, Nullable: true},
		{Name: "target_id", Type: field.TypeUint64, Nullable: true},
		{Name: "members", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// TimeDewsTable holds the schema information for the "time_dews" table.
	TimeDewsTable = &schema.Table{
		Name:       "time_dews",
		Columns:    TimeDewsColumns,
		PrimaryKey: []*schema.Column{TimeDewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "time_dews_users_timedew",
				Columns:    []*schema.Column{TimeDewsColumns[20]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "open_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "nick_name", Type: field.TypeString, Nullable: true},
		{Name: "system_name", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_url", Type: field.TypeString, Default: "http://thumbnail_placeholder.neoworld.com"},
		{Name: "sex", Type: field.TypeString, Nullable: true},
		{Name: "mobile_no", Type: field.TypeString, Nullable: true},
		{Name: "region_code", Type: field.TypeString, Nullable: true},
		{Name: "email_address", Type: field.TypeString, Nullable: true},
		{Name: "birthday", Type: field.TypeString, Nullable: true},
		{Name: "school_name", Type: field.TypeString, Nullable: true},
		{Name: "bio", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"infield", "standalone", "forbidden", "multi_mode"}, Default: "standalone"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"host", "admin", "client"}, Default: "client"},
		{Name: "is_online", Type: field.TypeBool, Nullable: true},
		{Name: "is_show_collections", Type: field.TypeBool, Default: false},
		{Name: "is_invited", Type: field.TypeBool, Default: false},
		{Name: "need_privacy_confirm", Type: field.TypeBool, Default: true},
		{Name: "current_cs_field_id", Type: field.TypeUint64, Nullable: true},
		{Name: "current_cs_field_name", Type: field.TypeString, Nullable: true},
		{Name: "private_cs_field_id", Type: field.TypeUint64, Nullable: true},
		{Name: "private_cs_field_name", Type: field.TypeString, Nullable: true},
		{Name: "register_ip", Type: field.TypeString, Nullable: true},
		{Name: "constellation", Type: field.TypeString, Nullable: true},
		{Name: "total_connections", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserAuthsColumns holds the columns for the "user_auths" table.
	UserAuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"oauth2", "email", "mobile", "jwt"}},
		{Name: "oauth_source", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "mobile_no", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "access_token", Type: field.TypeString, Nullable: true},
		{Name: "oauth_token_type", Type: field.TypeString, Nullable: true},
		{Name: "oauth_refresh_token", Type: field.TypeString, Nullable: true},
		{Name: "oauth_id", Type: field.TypeString, Nullable: true},
		{Name: "is_finished", Type: field.TypeBool, Nullable: true},
		{Name: "oauth_expiry", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// UserAuthsTable holds the schema information for the "user_auths" table.
	UserAuthsTable = &schema.Table{
		Name:       "user_auths",
		Columns:    UserAuthsColumns,
		PrimaryKey: []*schema.Column{UserAuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_auths_users_user_auth",
				Columns:    []*schema.Column{UserAuthsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserHistoriesColumns holds the columns for the "user_histories" table.
	UserHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"csfield", "action", "unknown"}},
		{Name: "name", Type: field.TypeString},
		{Name: "resource_url", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// UserHistoriesTable holds the schema information for the "user_histories" table.
	UserHistoriesTable = &schema.Table{
		Name:       "user_histories",
		Columns:    UserHistoriesColumns,
		PrimaryKey: []*schema.Column{UserHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_histories_users_history",
				Columns:    []*schema.Column{UserHistoriesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CardRuleColumns holds the columns for the "card_rule" table.
	CardRuleColumns = []*schema.Column{
		{Name: "card_id", Type: field.TypeUint64},
		{Name: "rule_id", Type: field.TypeUint64},
	}
	// CardRuleTable holds the schema information for the "card_rule" table.
	CardRuleTable = &schema.Table{
		Name:       "card_rule",
		Columns:    CardRuleColumns,
		PrimaryKey: []*schema.Column{CardRuleColumns[0], CardRuleColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "card_rule_card_id",
				Columns:    []*schema.Column{CardRuleColumns[0]},
				RefColumns: []*schema.Column{CardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "card_rule_rule_id",
				Columns:    []*schema.Column{CardRuleColumns[1]},
				RefColumns: []*schema.Column{RulesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AgoraTokensTable,
		BundlesTable,
		CsFieldsTable,
		CardsTable,
		CollectionsTable,
		CommoditiesTable,
		ContactsTable,
		CreationsTable,
		DevicesTable,
		FeedbacksTable,
		FriendshipsTable,
		HiddensTable,
		InviteCodesTable,
		JoinsTable,
		MasksTable,
		MessagesTable,
		NFTsTable,
		ReactionsTable,
		RulesTable,
		SettingsTable,
		StreamsTable,
		TimeDewsTable,
		UsersTable,
		UserAuthsTable,
		UserHistoriesTable,
		CardRuleTable,
	}
)

func init() {
	AgoraTokensTable.ForeignKeys[0].RefTable = UsersTable
	BundlesTable.ForeignKeys[0].RefTable = MasksTable
	CardsTable.ForeignKeys[0].RefTable = CommoditiesTable
	CardsTable.ForeignKeys[1].RefTable = UsersTable
	CollectionsTable.ForeignKeys[0].RefTable = UsersTable
	ContactsTable.ForeignKeys[0].RefTable = UsersTable
	CreationsTable.ForeignKeys[0].RefTable = UsersTable
	DevicesTable.ForeignKeys[0].RefTable = UsersTable
	FeedbacksTable.ForeignKeys[0].RefTable = UsersTable
	FriendshipsTable.ForeignKeys[0].RefTable = UsersTable
	FriendshipsTable.ForeignKeys[1].RefTable = UsersTable
	HiddensTable.ForeignKeys[0].RefTable = UsersTable
	InviteCodesTable.ForeignKeys[0].RefTable = UsersTable
	JoinsTable.ForeignKeys[0].RefTable = UsersTable
	JoinsTable.ForeignKeys[1].RefTable = CsFieldsTable
	MasksTable.ForeignKeys[0].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = UsersTable
	NFTsTable.ForeignKeys[0].RefTable = CommoditiesTable
	NFTsTable.ForeignKeys[1].RefTable = UsersTable
	NFTsTable.Annotation = &entsql.Annotation{
		Table: "NFTs",
	}
	ReactionsTable.ForeignKeys[0].RefTable = TimeDewsTable
	ReactionsTable.ForeignKeys[1].RefTable = UsersTable
	SettingsTable.ForeignKeys[0].RefTable = UsersTable
	StreamsTable.ForeignKeys[0].RefTable = UsersTable
	TimeDewsTable.ForeignKeys[0].RefTable = UsersTable
	UserAuthsTable.ForeignKeys[0].RefTable = UsersTable
	UserHistoriesTable.ForeignKeys[0].RefTable = UsersTable
	CardRuleTable.ForeignKeys[0].RefTable = CardsTable
	CardRuleTable.ForeignKeys[1].RefTable = RulesTable
}
