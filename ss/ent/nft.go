// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NFT is the model entity for the NFT schema.
type NFT struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 描述
	Desc string `json:"desc,omitempty"`
	// 所有者
	UserID uint64 `json:"user_id,omitempty"`
	// 创造者
	CreatorID uint64 `json:"creator_id,omitempty"`
	// 媒体文件信息（ 类型、大小、分辨率 ... ）
	MediaInfoJSON []string `json:"media_info_json,omitempty"`
	// 媒体文件链接-中心化存储
	MediaURL string `json:"media_url,omitempty"`
	// 媒体文件链接-去中心化存储
	MediaDurl string `json:"media_durl,omitempty"`
	// TokenID
	TokenID string `json:"token_id,omitempty"`
	// 链上处理状态
	Status nft.Status `json:"status,omitempty"`
	// Json 描述文件链接-中心化存储
	DescJSONURL string `json:"desc_json_url,omitempty"`
	// Json 描述文件链接-去中心化存储
	DescJSONDurl string `json:"desc_json_durl,omitempty"`
	// 文件的 Pin 状态
	PinStatus nft.PinStatus `json:"pin_status,omitempty"`
	// 智能合约地址
	ContractAddress string `json:"contract_address,omitempty"`
	// 消耗的 Mint Card 数量
	MintCardNum uint64 `json:"mint_card_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NFTQuery when eager-loading is set.
	Edges         NFTEdges `json:"edges"`
	commodity_nft *uint64
}

// NFTEdges holds the relations/edges for other nodes in the graph.
type NFTEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NFTEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NFT) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nft.FieldMediaInfoJSON:
			values[i] = new([]byte)
		case nft.FieldID, nft.FieldUserID, nft.FieldCreatorID, nft.FieldMintCardNum:
			values[i] = new(sql.NullInt64)
		case nft.FieldName, nft.FieldDesc, nft.FieldMediaURL, nft.FieldMediaDurl, nft.FieldTokenID, nft.FieldStatus, nft.FieldDescJSONURL, nft.FieldDescJSONDurl, nft.FieldPinStatus, nft.FieldContractAddress:
			values[i] = new(sql.NullString)
		case nft.FieldCreateTime, nft.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case nft.ForeignKeys[0]: // commodity_nft
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NFT", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NFT fields.
func (n *NFT) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint64(value.Int64)
		case nft.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				n.CreateTime = value.Time
			}
		case nft.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				n.UpdateTime = value.Time
			}
		case nft.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case nft.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				n.Desc = value.String
			}
		case nft.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				n.UserID = uint64(value.Int64)
			}
		case nft.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				n.CreatorID = uint64(value.Int64)
			}
		case nft.FieldMediaInfoJSON:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_info_json", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.MediaInfoJSON); err != nil {
					return fmt.Errorf("unmarshal field media_info_json: %w", err)
				}
			}
		case nft.FieldMediaURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_url", values[i])
			} else if value.Valid {
				n.MediaURL = value.String
			}
		case nft.FieldMediaDurl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_durl", values[i])
			} else if value.Valid {
				n.MediaDurl = value.String
			}
		case nft.FieldTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				n.TokenID = value.String
			}
		case nft.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				n.Status = nft.Status(value.String)
			}
		case nft.FieldDescJSONURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc_json_url", values[i])
			} else if value.Valid {
				n.DescJSONURL = value.String
			}
		case nft.FieldDescJSONDurl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc_json_durl", values[i])
			} else if value.Valid {
				n.DescJSONDurl = value.String
			}
		case nft.FieldPinStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pin_status", values[i])
			} else if value.Valid {
				n.PinStatus = nft.PinStatus(value.String)
			}
		case nft.FieldContractAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_address", values[i])
			} else if value.Valid {
				n.ContractAddress = value.String
			}
		case nft.FieldMintCardNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mint_card_num", values[i])
			} else if value.Valid {
				n.MintCardNum = uint64(value.Int64)
			}
		case nft.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field commodity_nft", value)
			} else if value.Valid {
				n.commodity_nft = new(uint64)
				*n.commodity_nft = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the NFT entity.
func (n *NFT) QueryOwner() *UserQuery {
	return (&NFTClient{config: n.config}).QueryOwner(n)
}

// Update returns a builder for updating this NFT.
// Note that you need to call NFT.Unwrap() before calling this method if this NFT
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *NFT) Update() *NFTUpdateOne {
	return (&NFTClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the NFT entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *NFT) Unwrap() *NFT {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: NFT is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *NFT) String() string {
	var builder strings.Builder
	builder.WriteString("NFT(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("create_time=")
	builder.WriteString(n.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(n.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(n.Desc)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", n.UserID))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", n.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("media_info_json=")
	builder.WriteString(fmt.Sprintf("%v", n.MediaInfoJSON))
	builder.WriteString(", ")
	builder.WriteString("media_url=")
	builder.WriteString(n.MediaURL)
	builder.WriteString(", ")
	builder.WriteString("media_durl=")
	builder.WriteString(n.MediaDurl)
	builder.WriteString(", ")
	builder.WriteString("token_id=")
	builder.WriteString(n.TokenID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", n.Status))
	builder.WriteString(", ")
	builder.WriteString("desc_json_url=")
	builder.WriteString(n.DescJSONURL)
	builder.WriteString(", ")
	builder.WriteString("desc_json_durl=")
	builder.WriteString(n.DescJSONDurl)
	builder.WriteString(", ")
	builder.WriteString("pin_status=")
	builder.WriteString(fmt.Sprintf("%v", n.PinStatus))
	builder.WriteString(", ")
	builder.WriteString("contract_address=")
	builder.WriteString(n.ContractAddress)
	builder.WriteString(", ")
	builder.WriteString("mint_card_num=")
	builder.WriteString(fmt.Sprintf("%v", n.MintCardNum))
	builder.WriteByte(')')
	return builder.String()
}

// NFTs is a parsable slice of NFT.
type NFTs []*NFT

func (n NFTs) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
