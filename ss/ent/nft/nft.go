// Code generated by ent, DO NOT EDIT.

package nft

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the nft type in the database.
	Label = "nft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldMediaInfoJSON holds the string denoting the media_info_json field in the database.
	FieldMediaInfoJSON = "media_info_json"
	// FieldMediaURL holds the string denoting the media_url field in the database.
	FieldMediaURL = "media_url"
	// FieldMediaDurl holds the string denoting the media_durl field in the database.
	FieldMediaDurl = "media_durl"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescJSONURL holds the string denoting the desc_json_url field in the database.
	FieldDescJSONURL = "desc_json_url"
	// FieldDescJSONDurl holds the string denoting the desc_json_durl field in the database.
	FieldDescJSONDurl = "desc_json_durl"
	// FieldPinStatus holds the string denoting the pin_status field in the database.
	FieldPinStatus = "pin_status"
	// FieldContractAddress holds the string denoting the contract_address field in the database.
	FieldContractAddress = "contract_address"
	// FieldMintCardNum holds the string denoting the mint_card_num field in the database.
	FieldMintCardNum = "mint_card_num"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the nft in the database.
	Table = "NFTs"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "NFTs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
)

// Columns holds all SQL columns for nft fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDesc,
	FieldUserID,
	FieldCreatorID,
	FieldMediaInfoJSON,
	FieldMediaURL,
	FieldMediaDurl,
	FieldTokenID,
	FieldStatus,
	FieldDescJSONURL,
	FieldDescJSONDurl,
	FieldPinStatus,
	FieldContractAddress,
	FieldMintCardNum,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "NFTs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"commodity_nft",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultDesc holds the default value on creation for the "desc" field.
	DefaultDesc string
	// DefaultContractAddress holds the default value on creation for the "contract_address" field.
	DefaultContractAddress string
	// DefaultMintCardNum holds the default value on creation for the "mint_card_num" field.
	DefaultMintCardNum uint64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusStatus1 is the default value of the Status enum.
const DefaultStatus = StatusStatus1

// Status values.
const (
	StatusStatus1 Status = "status1"
	StatusStatus2 Status = "status2"
	StatusStatus3 Status = "status3"
	StatusStatus4 Status = "status4"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStatus1, StatusStatus2, StatusStatus3, StatusStatus4:
		return nil
	default:
		return fmt.Errorf("nft: invalid enum value for status field: %q", s)
	}
}

// PinStatus defines the type for the "pin_status" enum field.
type PinStatus string

// PinStatusStatus1 is the default value of the PinStatus enum.
const DefaultPinStatus = PinStatusStatus1

// PinStatus values.
const (
	PinStatusStatus1 PinStatus = "status1"
	PinStatusStatus2 PinStatus = "status2"
	PinStatusStatus3 PinStatus = "status3"
	PinStatusStatus4 PinStatus = "status4"
)

func (ps PinStatus) String() string {
	return string(ps)
}

// PinStatusValidator is a validator for the "pin_status" field enum values. It is called by the builders before save.
func PinStatusValidator(ps PinStatus) error {
	switch ps {
	case PinStatusStatus1, PinStatusStatus2, PinStatusStatus3, PinStatusStatus4:
		return nil
	default:
		return fmt.Errorf("nft: invalid enum value for pin_status field: %q", ps)
	}
}
