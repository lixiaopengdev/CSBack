// Code generated by ent, DO NOT EDIT.

package nft

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorID), v))
	})
}

// MediaURL applies equality check predicate on the "media_url" field. It's identical to MediaURLEQ.
func MediaURL(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// MediaDurl applies equality check predicate on the "media_durl" field. It's identical to MediaDurlEQ.
func MediaDurl(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaDurl), v))
	})
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// DescJSONURL applies equality check predicate on the "desc_json_url" field. It's identical to DescJSONURLEQ.
func DescJSONURL(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONDurl applies equality check predicate on the "desc_json_durl" field. It's identical to DescJSONDurlEQ.
func DescJSONDurl(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescJSONDurl), v))
	})
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractAddress), v))
	})
}

// MintCardNum applies equality check predicate on the "mint_card_num" field. It's identical to MintCardNumEQ.
func MintCardNum(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMintCardNum), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorID), v))
	})
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatorID), v))
	})
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatorID), v...))
	})
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatorID), v...))
	})
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatorID), v))
	})
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatorID), v))
	})
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatorID), v))
	})
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatorID), v))
	})
}

// CreatorIDIsNil applies the IsNil predicate on the "creator_id" field.
func CreatorIDIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatorID)))
	})
}

// CreatorIDNotNil applies the NotNil predicate on the "creator_id" field.
func CreatorIDNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatorID)))
	})
}

// MediaURLEQ applies the EQ predicate on the "media_url" field.
func MediaURLEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLNEQ applies the NEQ predicate on the "media_url" field.
func MediaURLNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLIn applies the In predicate on the "media_url" field.
func MediaURLIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMediaURL), v...))
	})
}

// MediaURLNotIn applies the NotIn predicate on the "media_url" field.
func MediaURLNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMediaURL), v...))
	})
}

// MediaURLGT applies the GT predicate on the "media_url" field.
func MediaURLGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaURL), v))
	})
}

// MediaURLGTE applies the GTE predicate on the "media_url" field.
func MediaURLGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLLT applies the LT predicate on the "media_url" field.
func MediaURLLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaURL), v))
	})
}

// MediaURLLTE applies the LTE predicate on the "media_url" field.
func MediaURLLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLContains applies the Contains predicate on the "media_url" field.
func MediaURLContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasPrefix applies the HasPrefix predicate on the "media_url" field.
func MediaURLHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasSuffix applies the HasSuffix predicate on the "media_url" field.
func MediaURLHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaURL), v))
	})
}

// MediaURLIsNil applies the IsNil predicate on the "media_url" field.
func MediaURLIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaURL)))
	})
}

// MediaURLNotNil applies the NotNil predicate on the "media_url" field.
func MediaURLNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaURL)))
	})
}

// MediaURLEqualFold applies the EqualFold predicate on the "media_url" field.
func MediaURLEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaURL), v))
	})
}

// MediaURLContainsFold applies the ContainsFold predicate on the "media_url" field.
func MediaURLContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaURL), v))
	})
}

// MediaDurlEQ applies the EQ predicate on the "media_durl" field.
func MediaDurlEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlNEQ applies the NEQ predicate on the "media_durl" field.
func MediaDurlNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlIn applies the In predicate on the "media_durl" field.
func MediaDurlIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMediaDurl), v...))
	})
}

// MediaDurlNotIn applies the NotIn predicate on the "media_durl" field.
func MediaDurlNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMediaDurl), v...))
	})
}

// MediaDurlGT applies the GT predicate on the "media_durl" field.
func MediaDurlGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlGTE applies the GTE predicate on the "media_durl" field.
func MediaDurlGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlLT applies the LT predicate on the "media_durl" field.
func MediaDurlLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlLTE applies the LTE predicate on the "media_durl" field.
func MediaDurlLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlContains applies the Contains predicate on the "media_durl" field.
func MediaDurlContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlHasPrefix applies the HasPrefix predicate on the "media_durl" field.
func MediaDurlHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlHasSuffix applies the HasSuffix predicate on the "media_durl" field.
func MediaDurlHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlIsNil applies the IsNil predicate on the "media_durl" field.
func MediaDurlIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaDurl)))
	})
}

// MediaDurlNotNil applies the NotNil predicate on the "media_durl" field.
func MediaDurlNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaDurl)))
	})
}

// MediaDurlEqualFold applies the EqualFold predicate on the "media_durl" field.
func MediaDurlEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaDurl), v))
	})
}

// MediaDurlContainsFold applies the ContainsFold predicate on the "media_durl" field.
func MediaDurlContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaDurl), v))
	})
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenID), v))
	})
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenID), v...))
	})
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenID), v...))
	})
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenID), v))
	})
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenID), v))
	})
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenID), v))
	})
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenID), v))
	})
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenID), v))
	})
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenID), v))
	})
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenID), v))
	})
}

// TokenIDIsNil applies the IsNil predicate on the "token_id" field.
func TokenIDIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTokenID)))
	})
}

// TokenIDNotNil applies the NotNil predicate on the "token_id" field.
func TokenIDNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTokenID)))
	})
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenID), v))
	})
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// DescJSONURLEQ applies the EQ predicate on the "desc_json_url" field.
func DescJSONURLEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLNEQ applies the NEQ predicate on the "desc_json_url" field.
func DescJSONURLNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLIn applies the In predicate on the "desc_json_url" field.
func DescJSONURLIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescJSONURL), v...))
	})
}

// DescJSONURLNotIn applies the NotIn predicate on the "desc_json_url" field.
func DescJSONURLNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescJSONURL), v...))
	})
}

// DescJSONURLGT applies the GT predicate on the "desc_json_url" field.
func DescJSONURLGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLGTE applies the GTE predicate on the "desc_json_url" field.
func DescJSONURLGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLLT applies the LT predicate on the "desc_json_url" field.
func DescJSONURLLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLLTE applies the LTE predicate on the "desc_json_url" field.
func DescJSONURLLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLContains applies the Contains predicate on the "desc_json_url" field.
func DescJSONURLContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLHasPrefix applies the HasPrefix predicate on the "desc_json_url" field.
func DescJSONURLHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLHasSuffix applies the HasSuffix predicate on the "desc_json_url" field.
func DescJSONURLHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLIsNil applies the IsNil predicate on the "desc_json_url" field.
func DescJSONURLIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescJSONURL)))
	})
}

// DescJSONURLNotNil applies the NotNil predicate on the "desc_json_url" field.
func DescJSONURLNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescJSONURL)))
	})
}

// DescJSONURLEqualFold applies the EqualFold predicate on the "desc_json_url" field.
func DescJSONURLEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONURLContainsFold applies the ContainsFold predicate on the "desc_json_url" field.
func DescJSONURLContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescJSONURL), v))
	})
}

// DescJSONDurlEQ applies the EQ predicate on the "desc_json_durl" field.
func DescJSONDurlEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlNEQ applies the NEQ predicate on the "desc_json_durl" field.
func DescJSONDurlNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlIn applies the In predicate on the "desc_json_durl" field.
func DescJSONDurlIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescJSONDurl), v...))
	})
}

// DescJSONDurlNotIn applies the NotIn predicate on the "desc_json_durl" field.
func DescJSONDurlNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescJSONDurl), v...))
	})
}

// DescJSONDurlGT applies the GT predicate on the "desc_json_durl" field.
func DescJSONDurlGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlGTE applies the GTE predicate on the "desc_json_durl" field.
func DescJSONDurlGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlLT applies the LT predicate on the "desc_json_durl" field.
func DescJSONDurlLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlLTE applies the LTE predicate on the "desc_json_durl" field.
func DescJSONDurlLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlContains applies the Contains predicate on the "desc_json_durl" field.
func DescJSONDurlContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlHasPrefix applies the HasPrefix predicate on the "desc_json_durl" field.
func DescJSONDurlHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlHasSuffix applies the HasSuffix predicate on the "desc_json_durl" field.
func DescJSONDurlHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlIsNil applies the IsNil predicate on the "desc_json_durl" field.
func DescJSONDurlIsNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescJSONDurl)))
	})
}

// DescJSONDurlNotNil applies the NotNil predicate on the "desc_json_durl" field.
func DescJSONDurlNotNil() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescJSONDurl)))
	})
}

// DescJSONDurlEqualFold applies the EqualFold predicate on the "desc_json_durl" field.
func DescJSONDurlEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescJSONDurl), v))
	})
}

// DescJSONDurlContainsFold applies the ContainsFold predicate on the "desc_json_durl" field.
func DescJSONDurlContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescJSONDurl), v))
	})
}

// PinStatusEQ applies the EQ predicate on the "pin_status" field.
func PinStatusEQ(v PinStatus) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPinStatus), v))
	})
}

// PinStatusNEQ applies the NEQ predicate on the "pin_status" field.
func PinStatusNEQ(v PinStatus) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPinStatus), v))
	})
}

// PinStatusIn applies the In predicate on the "pin_status" field.
func PinStatusIn(vs ...PinStatus) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPinStatus), v...))
	})
}

// PinStatusNotIn applies the NotIn predicate on the "pin_status" field.
func PinStatusNotIn(vs ...PinStatus) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPinStatus), v...))
	})
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractAddress), v))
	})
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContractAddress), v))
	})
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContractAddress), v...))
	})
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContractAddress), v...))
	})
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContractAddress), v))
	})
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContractAddress), v))
	})
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContractAddress), v))
	})
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContractAddress), v))
	})
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContractAddress), v))
	})
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContractAddress), v))
	})
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContractAddress), v))
	})
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContractAddress), v))
	})
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContractAddress), v))
	})
}

// MintCardNumEQ applies the EQ predicate on the "mint_card_num" field.
func MintCardNumEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMintCardNum), v))
	})
}

// MintCardNumNEQ applies the NEQ predicate on the "mint_card_num" field.
func MintCardNumNEQ(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMintCardNum), v))
	})
}

// MintCardNumIn applies the In predicate on the "mint_card_num" field.
func MintCardNumIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMintCardNum), v...))
	})
}

// MintCardNumNotIn applies the NotIn predicate on the "mint_card_num" field.
func MintCardNumNotIn(vs ...uint64) predicate.NFT {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMintCardNum), v...))
	})
}

// MintCardNumGT applies the GT predicate on the "mint_card_num" field.
func MintCardNumGT(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMintCardNum), v))
	})
}

// MintCardNumGTE applies the GTE predicate on the "mint_card_num" field.
func MintCardNumGTE(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMintCardNum), v))
	})
}

// MintCardNumLT applies the LT predicate on the "mint_card_num" field.
func MintCardNumLT(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMintCardNum), v))
	})
}

// MintCardNumLTE applies the LTE predicate on the "mint_card_num" field.
func MintCardNumLTE(v uint64) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMintCardNum), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NFT) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NFT) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NFT) predicate.NFT {
	return predicate.NFT(func(s *sql.Selector) {
		p(s.Not())
	})
}
