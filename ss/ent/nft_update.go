// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// NFTUpdate is the builder for updating NFT entities.
type NFTUpdate struct {
	config
	hooks    []Hook
	mutation *NFTMutation
}

// Where appends a list predicates to the NFTUpdate builder.
func (nu *NFTUpdate) Where(ps ...predicate.NFT) *NFTUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdateTime sets the "update_time" field.
func (nu *NFTUpdate) SetUpdateTime(t time.Time) *NFTUpdate {
	nu.mutation.SetUpdateTime(t)
	return nu
}

// SetName sets the "name" field.
func (nu *NFTUpdate) SetName(s string) *NFTUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableName(s *string) *NFTUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetDesc sets the "desc" field.
func (nu *NFTUpdate) SetDesc(s string) *NFTUpdate {
	nu.mutation.SetDesc(s)
	return nu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableDesc(s *string) *NFTUpdate {
	if s != nil {
		nu.SetDesc(*s)
	}
	return nu
}

// SetUserID sets the "user_id" field.
func (nu *NFTUpdate) SetUserID(u uint64) *NFTUpdate {
	nu.mutation.SetUserID(u)
	return nu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableUserID(u *uint64) *NFTUpdate {
	if u != nil {
		nu.SetUserID(*u)
	}
	return nu
}

// ClearUserID clears the value of the "user_id" field.
func (nu *NFTUpdate) ClearUserID() *NFTUpdate {
	nu.mutation.ClearUserID()
	return nu
}

// SetCreatorID sets the "creator_id" field.
func (nu *NFTUpdate) SetCreatorID(u uint64) *NFTUpdate {
	nu.mutation.ResetCreatorID()
	nu.mutation.SetCreatorID(u)
	return nu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableCreatorID(u *uint64) *NFTUpdate {
	if u != nil {
		nu.SetCreatorID(*u)
	}
	return nu
}

// AddCreatorID adds u to the "creator_id" field.
func (nu *NFTUpdate) AddCreatorID(u int64) *NFTUpdate {
	nu.mutation.AddCreatorID(u)
	return nu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nu *NFTUpdate) ClearCreatorID() *NFTUpdate {
	nu.mutation.ClearCreatorID()
	return nu
}

// SetMediaInfoJSON sets the "media_info_json" field.
func (nu *NFTUpdate) SetMediaInfoJSON(s []string) *NFTUpdate {
	nu.mutation.SetMediaInfoJSON(s)
	return nu
}

// AppendMediaInfoJSON appends s to the "media_info_json" field.
func (nu *NFTUpdate) AppendMediaInfoJSON(s []string) *NFTUpdate {
	nu.mutation.AppendMediaInfoJSON(s)
	return nu
}

// SetMediaURL sets the "media_url" field.
func (nu *NFTUpdate) SetMediaURL(s string) *NFTUpdate {
	nu.mutation.SetMediaURL(s)
	return nu
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableMediaURL(s *string) *NFTUpdate {
	if s != nil {
		nu.SetMediaURL(*s)
	}
	return nu
}

// ClearMediaURL clears the value of the "media_url" field.
func (nu *NFTUpdate) ClearMediaURL() *NFTUpdate {
	nu.mutation.ClearMediaURL()
	return nu
}

// SetMediaDurl sets the "media_durl" field.
func (nu *NFTUpdate) SetMediaDurl(s string) *NFTUpdate {
	nu.mutation.SetMediaDurl(s)
	return nu
}

// SetNillableMediaDurl sets the "media_durl" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableMediaDurl(s *string) *NFTUpdate {
	if s != nil {
		nu.SetMediaDurl(*s)
	}
	return nu
}

// ClearMediaDurl clears the value of the "media_durl" field.
func (nu *NFTUpdate) ClearMediaDurl() *NFTUpdate {
	nu.mutation.ClearMediaDurl()
	return nu
}

// SetTokenID sets the "token_id" field.
func (nu *NFTUpdate) SetTokenID(s string) *NFTUpdate {
	nu.mutation.SetTokenID(s)
	return nu
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableTokenID(s *string) *NFTUpdate {
	if s != nil {
		nu.SetTokenID(*s)
	}
	return nu
}

// ClearTokenID clears the value of the "token_id" field.
func (nu *NFTUpdate) ClearTokenID() *NFTUpdate {
	nu.mutation.ClearTokenID()
	return nu
}

// SetStatus sets the "status" field.
func (nu *NFTUpdate) SetStatus(n nft.Status) *NFTUpdate {
	nu.mutation.SetStatus(n)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableStatus(n *nft.Status) *NFTUpdate {
	if n != nil {
		nu.SetStatus(*n)
	}
	return nu
}

// SetDescJSONURL sets the "desc_json_url" field.
func (nu *NFTUpdate) SetDescJSONURL(s string) *NFTUpdate {
	nu.mutation.SetDescJSONURL(s)
	return nu
}

// SetNillableDescJSONURL sets the "desc_json_url" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableDescJSONURL(s *string) *NFTUpdate {
	if s != nil {
		nu.SetDescJSONURL(*s)
	}
	return nu
}

// ClearDescJSONURL clears the value of the "desc_json_url" field.
func (nu *NFTUpdate) ClearDescJSONURL() *NFTUpdate {
	nu.mutation.ClearDescJSONURL()
	return nu
}

// SetDescJSONDurl sets the "desc_json_durl" field.
func (nu *NFTUpdate) SetDescJSONDurl(s string) *NFTUpdate {
	nu.mutation.SetDescJSONDurl(s)
	return nu
}

// SetNillableDescJSONDurl sets the "desc_json_durl" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableDescJSONDurl(s *string) *NFTUpdate {
	if s != nil {
		nu.SetDescJSONDurl(*s)
	}
	return nu
}

// ClearDescJSONDurl clears the value of the "desc_json_durl" field.
func (nu *NFTUpdate) ClearDescJSONDurl() *NFTUpdate {
	nu.mutation.ClearDescJSONDurl()
	return nu
}

// SetPinStatus sets the "pin_status" field.
func (nu *NFTUpdate) SetPinStatus(ns nft.PinStatus) *NFTUpdate {
	nu.mutation.SetPinStatus(ns)
	return nu
}

// SetNillablePinStatus sets the "pin_status" field if the given value is not nil.
func (nu *NFTUpdate) SetNillablePinStatus(ns *nft.PinStatus) *NFTUpdate {
	if ns != nil {
		nu.SetPinStatus(*ns)
	}
	return nu
}

// SetContractAddress sets the "contract_address" field.
func (nu *NFTUpdate) SetContractAddress(s string) *NFTUpdate {
	nu.mutation.SetContractAddress(s)
	return nu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableContractAddress(s *string) *NFTUpdate {
	if s != nil {
		nu.SetContractAddress(*s)
	}
	return nu
}

// SetMintCardNum sets the "mint_card_num" field.
func (nu *NFTUpdate) SetMintCardNum(u uint64) *NFTUpdate {
	nu.mutation.ResetMintCardNum()
	nu.mutation.SetMintCardNum(u)
	return nu
}

// SetNillableMintCardNum sets the "mint_card_num" field if the given value is not nil.
func (nu *NFTUpdate) SetNillableMintCardNum(u *uint64) *NFTUpdate {
	if u != nil {
		nu.SetMintCardNum(*u)
	}
	return nu
}

// AddMintCardNum adds u to the "mint_card_num" field.
func (nu *NFTUpdate) AddMintCardNum(u int64) *NFTUpdate {
	nu.mutation.AddMintCardNum(u)
	return nu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nu *NFTUpdate) SetOwnerID(id uint64) *NFTUpdate {
	nu.mutation.SetOwnerID(id)
	return nu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (nu *NFTUpdate) SetNillableOwnerID(id *uint64) *NFTUpdate {
	if id != nil {
		nu = nu.SetOwnerID(*id)
	}
	return nu
}

// SetOwner sets the "owner" edge to the User entity.
func (nu *NFTUpdate) SetOwner(u *User) *NFTUpdate {
	return nu.SetOwnerID(u.ID)
}

// Mutation returns the NFTMutation object of the builder.
func (nu *NFTUpdate) Mutation() *NFTMutation {
	return nu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nu *NFTUpdate) ClearOwner() *NFTUpdate {
	nu.mutation.ClearOwner()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NFTUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NFTMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NFTUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NFTUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NFTUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NFTUpdate) defaults() {
	if _, ok := nu.mutation.UpdateTime(); !ok {
		v := nft.UpdateDefaultUpdateTime()
		nu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NFTUpdate) check() error {
	if v, ok := nu.mutation.Status(); ok {
		if err := nft.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NFT.status": %w`, err)}
		}
	}
	if v, ok := nu.mutation.PinStatus(); ok {
		if err := nft.PinStatusValidator(v); err != nil {
			return &ValidationError{Name: "pin_status", err: fmt.Errorf(`ent: validator failed for field "NFT.pin_status": %w`, err)}
		}
	}
	return nil
}

func (nu *NFTUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nft.Table,
			Columns: nft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nft.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdateTime(); ok {
		_spec.SetField(nft.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(nft.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Desc(); ok {
		_spec.SetField(nft.FieldDesc, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatorID(); ok {
		_spec.SetField(nft.FieldCreatorID, field.TypeUint64, value)
	}
	if value, ok := nu.mutation.AddedCreatorID(); ok {
		_spec.AddField(nft.FieldCreatorID, field.TypeUint64, value)
	}
	if nu.mutation.CreatorIDCleared() {
		_spec.ClearField(nft.FieldCreatorID, field.TypeUint64)
	}
	if value, ok := nu.mutation.MediaInfoJSON(); ok {
		_spec.SetField(nft.FieldMediaInfoJSON, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedMediaInfoJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nft.FieldMediaInfoJSON, value)
		})
	}
	if value, ok := nu.mutation.MediaURL(); ok {
		_spec.SetField(nft.FieldMediaURL, field.TypeString, value)
	}
	if nu.mutation.MediaURLCleared() {
		_spec.ClearField(nft.FieldMediaURL, field.TypeString)
	}
	if value, ok := nu.mutation.MediaDurl(); ok {
		_spec.SetField(nft.FieldMediaDurl, field.TypeString, value)
	}
	if nu.mutation.MediaDurlCleared() {
		_spec.ClearField(nft.FieldMediaDurl, field.TypeString)
	}
	if value, ok := nu.mutation.TokenID(); ok {
		_spec.SetField(nft.FieldTokenID, field.TypeString, value)
	}
	if nu.mutation.TokenIDCleared() {
		_spec.ClearField(nft.FieldTokenID, field.TypeString)
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.SetField(nft.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.DescJSONURL(); ok {
		_spec.SetField(nft.FieldDescJSONURL, field.TypeString, value)
	}
	if nu.mutation.DescJSONURLCleared() {
		_spec.ClearField(nft.FieldDescJSONURL, field.TypeString)
	}
	if value, ok := nu.mutation.DescJSONDurl(); ok {
		_spec.SetField(nft.FieldDescJSONDurl, field.TypeString, value)
	}
	if nu.mutation.DescJSONDurlCleared() {
		_spec.ClearField(nft.FieldDescJSONDurl, field.TypeString)
	}
	if value, ok := nu.mutation.PinStatus(); ok {
		_spec.SetField(nft.FieldPinStatus, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.ContractAddress(); ok {
		_spec.SetField(nft.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.MintCardNum(); ok {
		_spec.SetField(nft.FieldMintCardNum, field.TypeUint64, value)
	}
	if value, ok := nu.mutation.AddedMintCardNum(); ok {
		_spec.AddField(nft.FieldMintCardNum, field.TypeUint64, value)
	}
	if nu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NFTUpdateOne is the builder for updating a single NFT entity.
type NFTUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NFTMutation
}

// SetUpdateTime sets the "update_time" field.
func (nuo *NFTUpdateOne) SetUpdateTime(t time.Time) *NFTUpdateOne {
	nuo.mutation.SetUpdateTime(t)
	return nuo
}

// SetName sets the "name" field.
func (nuo *NFTUpdateOne) SetName(s string) *NFTUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableName(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetDesc sets the "desc" field.
func (nuo *NFTUpdateOne) SetDesc(s string) *NFTUpdateOne {
	nuo.mutation.SetDesc(s)
	return nuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableDesc(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetDesc(*s)
	}
	return nuo
}

// SetUserID sets the "user_id" field.
func (nuo *NFTUpdateOne) SetUserID(u uint64) *NFTUpdateOne {
	nuo.mutation.SetUserID(u)
	return nuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableUserID(u *uint64) *NFTUpdateOne {
	if u != nil {
		nuo.SetUserID(*u)
	}
	return nuo
}

// ClearUserID clears the value of the "user_id" field.
func (nuo *NFTUpdateOne) ClearUserID() *NFTUpdateOne {
	nuo.mutation.ClearUserID()
	return nuo
}

// SetCreatorID sets the "creator_id" field.
func (nuo *NFTUpdateOne) SetCreatorID(u uint64) *NFTUpdateOne {
	nuo.mutation.ResetCreatorID()
	nuo.mutation.SetCreatorID(u)
	return nuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableCreatorID(u *uint64) *NFTUpdateOne {
	if u != nil {
		nuo.SetCreatorID(*u)
	}
	return nuo
}

// AddCreatorID adds u to the "creator_id" field.
func (nuo *NFTUpdateOne) AddCreatorID(u int64) *NFTUpdateOne {
	nuo.mutation.AddCreatorID(u)
	return nuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nuo *NFTUpdateOne) ClearCreatorID() *NFTUpdateOne {
	nuo.mutation.ClearCreatorID()
	return nuo
}

// SetMediaInfoJSON sets the "media_info_json" field.
func (nuo *NFTUpdateOne) SetMediaInfoJSON(s []string) *NFTUpdateOne {
	nuo.mutation.SetMediaInfoJSON(s)
	return nuo
}

// AppendMediaInfoJSON appends s to the "media_info_json" field.
func (nuo *NFTUpdateOne) AppendMediaInfoJSON(s []string) *NFTUpdateOne {
	nuo.mutation.AppendMediaInfoJSON(s)
	return nuo
}

// SetMediaURL sets the "media_url" field.
func (nuo *NFTUpdateOne) SetMediaURL(s string) *NFTUpdateOne {
	nuo.mutation.SetMediaURL(s)
	return nuo
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableMediaURL(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetMediaURL(*s)
	}
	return nuo
}

// ClearMediaURL clears the value of the "media_url" field.
func (nuo *NFTUpdateOne) ClearMediaURL() *NFTUpdateOne {
	nuo.mutation.ClearMediaURL()
	return nuo
}

// SetMediaDurl sets the "media_durl" field.
func (nuo *NFTUpdateOne) SetMediaDurl(s string) *NFTUpdateOne {
	nuo.mutation.SetMediaDurl(s)
	return nuo
}

// SetNillableMediaDurl sets the "media_durl" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableMediaDurl(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetMediaDurl(*s)
	}
	return nuo
}

// ClearMediaDurl clears the value of the "media_durl" field.
func (nuo *NFTUpdateOne) ClearMediaDurl() *NFTUpdateOne {
	nuo.mutation.ClearMediaDurl()
	return nuo
}

// SetTokenID sets the "token_id" field.
func (nuo *NFTUpdateOne) SetTokenID(s string) *NFTUpdateOne {
	nuo.mutation.SetTokenID(s)
	return nuo
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableTokenID(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetTokenID(*s)
	}
	return nuo
}

// ClearTokenID clears the value of the "token_id" field.
func (nuo *NFTUpdateOne) ClearTokenID() *NFTUpdateOne {
	nuo.mutation.ClearTokenID()
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NFTUpdateOne) SetStatus(n nft.Status) *NFTUpdateOne {
	nuo.mutation.SetStatus(n)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableStatus(n *nft.Status) *NFTUpdateOne {
	if n != nil {
		nuo.SetStatus(*n)
	}
	return nuo
}

// SetDescJSONURL sets the "desc_json_url" field.
func (nuo *NFTUpdateOne) SetDescJSONURL(s string) *NFTUpdateOne {
	nuo.mutation.SetDescJSONURL(s)
	return nuo
}

// SetNillableDescJSONURL sets the "desc_json_url" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableDescJSONURL(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetDescJSONURL(*s)
	}
	return nuo
}

// ClearDescJSONURL clears the value of the "desc_json_url" field.
func (nuo *NFTUpdateOne) ClearDescJSONURL() *NFTUpdateOne {
	nuo.mutation.ClearDescJSONURL()
	return nuo
}

// SetDescJSONDurl sets the "desc_json_durl" field.
func (nuo *NFTUpdateOne) SetDescJSONDurl(s string) *NFTUpdateOne {
	nuo.mutation.SetDescJSONDurl(s)
	return nuo
}

// SetNillableDescJSONDurl sets the "desc_json_durl" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableDescJSONDurl(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetDescJSONDurl(*s)
	}
	return nuo
}

// ClearDescJSONDurl clears the value of the "desc_json_durl" field.
func (nuo *NFTUpdateOne) ClearDescJSONDurl() *NFTUpdateOne {
	nuo.mutation.ClearDescJSONDurl()
	return nuo
}

// SetPinStatus sets the "pin_status" field.
func (nuo *NFTUpdateOne) SetPinStatus(ns nft.PinStatus) *NFTUpdateOne {
	nuo.mutation.SetPinStatus(ns)
	return nuo
}

// SetNillablePinStatus sets the "pin_status" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillablePinStatus(ns *nft.PinStatus) *NFTUpdateOne {
	if ns != nil {
		nuo.SetPinStatus(*ns)
	}
	return nuo
}

// SetContractAddress sets the "contract_address" field.
func (nuo *NFTUpdateOne) SetContractAddress(s string) *NFTUpdateOne {
	nuo.mutation.SetContractAddress(s)
	return nuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableContractAddress(s *string) *NFTUpdateOne {
	if s != nil {
		nuo.SetContractAddress(*s)
	}
	return nuo
}

// SetMintCardNum sets the "mint_card_num" field.
func (nuo *NFTUpdateOne) SetMintCardNum(u uint64) *NFTUpdateOne {
	nuo.mutation.ResetMintCardNum()
	nuo.mutation.SetMintCardNum(u)
	return nuo
}

// SetNillableMintCardNum sets the "mint_card_num" field if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableMintCardNum(u *uint64) *NFTUpdateOne {
	if u != nil {
		nuo.SetMintCardNum(*u)
	}
	return nuo
}

// AddMintCardNum adds u to the "mint_card_num" field.
func (nuo *NFTUpdateOne) AddMintCardNum(u int64) *NFTUpdateOne {
	nuo.mutation.AddMintCardNum(u)
	return nuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nuo *NFTUpdateOne) SetOwnerID(id uint64) *NFTUpdateOne {
	nuo.mutation.SetOwnerID(id)
	return nuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (nuo *NFTUpdateOne) SetNillableOwnerID(id *uint64) *NFTUpdateOne {
	if id != nil {
		nuo = nuo.SetOwnerID(*id)
	}
	return nuo
}

// SetOwner sets the "owner" edge to the User entity.
func (nuo *NFTUpdateOne) SetOwner(u *User) *NFTUpdateOne {
	return nuo.SetOwnerID(u.ID)
}

// Mutation returns the NFTMutation object of the builder.
func (nuo *NFTUpdateOne) Mutation() *NFTMutation {
	return nuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nuo *NFTUpdateOne) ClearOwner() *NFTUpdateOne {
	nuo.mutation.ClearOwner()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NFTUpdateOne) Select(field string, fields ...string) *NFTUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated NFT entity.
func (nuo *NFTUpdateOne) Save(ctx context.Context) (*NFT, error) {
	var (
		err  error
		node *NFT
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NFTMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NFT)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NFTMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NFTUpdateOne) SaveX(ctx context.Context) *NFT {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NFTUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NFTUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NFTUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdateTime(); !ok {
		v := nft.UpdateDefaultUpdateTime()
		nuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NFTUpdateOne) check() error {
	if v, ok := nuo.mutation.Status(); ok {
		if err := nft.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NFT.status": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.PinStatus(); ok {
		if err := nft.PinStatusValidator(v); err != nil {
			return &ValidationError{Name: "pin_status", err: fmt.Errorf(`ent: validator failed for field "NFT.pin_status": %w`, err)}
		}
	}
	return nil
}

func (nuo *NFTUpdateOne) sqlSave(ctx context.Context) (_node *NFT, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nft.Table,
			Columns: nft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nft.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NFT.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nft.FieldID)
		for _, f := range fields {
			if !nft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdateTime(); ok {
		_spec.SetField(nft.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(nft.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Desc(); ok {
		_spec.SetField(nft.FieldDesc, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatorID(); ok {
		_spec.SetField(nft.FieldCreatorID, field.TypeUint64, value)
	}
	if value, ok := nuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(nft.FieldCreatorID, field.TypeUint64, value)
	}
	if nuo.mutation.CreatorIDCleared() {
		_spec.ClearField(nft.FieldCreatorID, field.TypeUint64)
	}
	if value, ok := nuo.mutation.MediaInfoJSON(); ok {
		_spec.SetField(nft.FieldMediaInfoJSON, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedMediaInfoJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nft.FieldMediaInfoJSON, value)
		})
	}
	if value, ok := nuo.mutation.MediaURL(); ok {
		_spec.SetField(nft.FieldMediaURL, field.TypeString, value)
	}
	if nuo.mutation.MediaURLCleared() {
		_spec.ClearField(nft.FieldMediaURL, field.TypeString)
	}
	if value, ok := nuo.mutation.MediaDurl(); ok {
		_spec.SetField(nft.FieldMediaDurl, field.TypeString, value)
	}
	if nuo.mutation.MediaDurlCleared() {
		_spec.ClearField(nft.FieldMediaDurl, field.TypeString)
	}
	if value, ok := nuo.mutation.TokenID(); ok {
		_spec.SetField(nft.FieldTokenID, field.TypeString, value)
	}
	if nuo.mutation.TokenIDCleared() {
		_spec.ClearField(nft.FieldTokenID, field.TypeString)
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.SetField(nft.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.DescJSONURL(); ok {
		_spec.SetField(nft.FieldDescJSONURL, field.TypeString, value)
	}
	if nuo.mutation.DescJSONURLCleared() {
		_spec.ClearField(nft.FieldDescJSONURL, field.TypeString)
	}
	if value, ok := nuo.mutation.DescJSONDurl(); ok {
		_spec.SetField(nft.FieldDescJSONDurl, field.TypeString, value)
	}
	if nuo.mutation.DescJSONDurlCleared() {
		_spec.ClearField(nft.FieldDescJSONDurl, field.TypeString)
	}
	if value, ok := nuo.mutation.PinStatus(); ok {
		_spec.SetField(nft.FieldPinStatus, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.ContractAddress(); ok {
		_spec.SetField(nft.FieldContractAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.MintCardNum(); ok {
		_spec.SetField(nft.FieldMintCardNum, field.TypeUint64, value)
	}
	if value, ok := nuo.mutation.AddedMintCardNum(); ok {
		_spec.AddField(nft.FieldMintCardNum, field.TypeUint64, value)
	}
	if nuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.OwnerTable,
			Columns: []string{nft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NFT{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
