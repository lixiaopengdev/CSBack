{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "servers": [{"url": "http://192.168.50.193/api/v0"}],
  "paths": {
    "/agora-tokens": {
      "get": {
        "tags": [
          "Agora_token"
        ],
        "summary": "List Agora_tokens",
        "description": "List Agora_tokens.",
        "operationId": "listAgora_token",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Agora_token list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agora_tokenList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Agora_token"
        ],
        "summary": "Create a new Agora_token",
        "description": "Creates a new Agora_token and persists it to storage.",
        "operationId": "createAgora_token",
        "requestBody": {
          "description": "Agora_token to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "token",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agora_token created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agora_tokenCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/agora-tokens/{id}": {
      "get": {
        "tags": [
          "Agora_token"
        ],
        "summary": "Find a Agora_token by ID",
        "description": "Finds the Agora_token with the requested ID and returns it.",
        "operationId": "readAgora_token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Agora_token",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Agora_token with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agora_tokenRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Agora_token"
        ],
        "summary": "Deletes a Agora_token by ID",
        "description": "Deletes the Agora_token with the requested ID.",
        "operationId": "deleteAgora_token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Agora_token",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Agora_token with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Agora_token"
        ],
        "summary": "Updates a Agora_token",
        "description": "Updates a Agora_token and persists changes to storage.",
        "operationId": "updateAgora_token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Agora_token",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Agora_token properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agora_token updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agora_tokenUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/agora-tokens/{id}/owner": {
      "get": {
        "tags": [
          "Agora_token"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Agora_token with the given ID",
        "operationId": "readAgora_tokenOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Agora_token",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Agora_token with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agora_token_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "List Cards",
        "description": "List Cards.",
        "operationId": "listCard",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Card list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Create a new Card",
        "description": "Creates a new Card and persists it to storage.",
        "operationId": "createCard",
        "requestBody": {
          "description": "Card to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "pic_url": {
                    "type": "string"
                  },
                  "thumbnail_url": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "status1",
                      "status2",
                      "status3"
                    ],
                    "default": "status1"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "type1",
                      "type2",
                      "type3"
                    ],
                    "default": "type1"
                  },
                  "script": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "script_raw": {
                    "type": "string"
                  },
                  "script_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "rule": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "status",
                  "type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Card created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Find a Card by ID",
        "description": "Finds the Card with the requested ID and returns it.",
        "operationId": "readCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Card",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Card with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Card"
        ],
        "summary": "Deletes a Card by ID",
        "description": "Deletes the Card with the requested ID.",
        "operationId": "deleteCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Card",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Card with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Card"
        ],
        "summary": "Updates a Card",
        "description": "Updates a Card and persists changes to storage.",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Card",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Card properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "pic_url": {
                    "type": "string"
                  },
                  "thumbnail_url": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "status1",
                      "status2",
                      "status3"
                    ],
                    "default": "status1"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "type1",
                      "type2",
                      "type3"
                    ],
                    "default": "type1"
                  },
                  "script": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "script_raw": {
                    "type": "string"
                  },
                  "script_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "rule": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Card updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/{id}/owner": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Card with the given ID",
        "operationId": "readCardOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Card",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Card with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/{id}/rule": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "List attached Rules",
        "description": "List attached Rules.",
        "operationId": "listCardRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Card",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Cards list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card_RuleList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/commodities": {
      "get": {
        "tags": [
          "Commodity"
        ],
        "summary": "List Commodities",
        "description": "List Commodities.",
        "operationId": "listCommodity",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Commodity list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommodityList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Commodity"
        ],
        "summary": "Create a new Commodity",
        "description": "Creates a new Commodity and persists it to storage.",
        "operationId": "createCommodity",
        "requestBody": {
          "description": "Commodity to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "card": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "NFT": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Commodity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommodityCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/commodities/{id}": {
      "get": {
        "tags": [
          "Commodity"
        ],
        "summary": "Find a Commodity by ID",
        "description": "Finds the Commodity with the requested ID and returns it.",
        "operationId": "readCommodity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Commodity",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Commodity with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommodityRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Commodity"
        ],
        "summary": "Deletes a Commodity by ID",
        "description": "Deletes the Commodity with the requested ID.",
        "operationId": "deleteCommodity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Commodity",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Commodity with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Commodity"
        ],
        "summary": "Updates a Commodity",
        "description": "Updates a Commodity and persists changes to storage.",
        "operationId": "updateCommodity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Commodity",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Commodity properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "card": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "NFT": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Commodity updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommodityUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/commodities/{id}/card": {
      "get": {
        "tags": [
          "Commodity"
        ],
        "summary": "List attached Cards",
        "description": "List attached Cards.",
        "operationId": "listCommodityCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Commodity",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Commodities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Commodity_CardList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/commodities/{id}/nft": {
      "get": {
        "tags": [
          "Commodity"
        ],
        "summary": "List attached Nfts",
        "description": "List attached Nfts.",
        "operationId": "listCommodityNft",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Commodity",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Commodities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Commodity_NFTList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/creations": {
      "get": {
        "tags": [
          "Creation"
        ],
        "summary": "List Creations",
        "description": "List Creations.",
        "operationId": "listCreation",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Creation list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Creation"
        ],
        "summary": "Create a new Creation",
        "description": "Creates a new Creation and persists it to storage.",
        "operationId": "createCreation",
        "requestBody": {
          "description": "Creation to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Creation created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/creations/{id}": {
      "get": {
        "tags": [
          "Creation"
        ],
        "summary": "Find a Creation by ID",
        "description": "Finds the Creation with the requested ID and returns it.",
        "operationId": "readCreation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Creation",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Creation with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Creation"
        ],
        "summary": "Deletes a Creation by ID",
        "description": "Deletes the Creation with the requested ID.",
        "operationId": "deleteCreation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Creation",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Creation with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Creation"
        ],
        "summary": "Updates a Creation",
        "description": "Updates a Creation and persists changes to storage.",
        "operationId": "updateCreation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Creation",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creation properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Creation updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/creations/{id}/owner": {
      "get": {
        "tags": [
          "Creation"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Creation with the given ID",
        "operationId": "readCreationOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Creation",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Creation with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Creation_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cs-fields": {
      "get": {
        "tags": [
          "CSField"
        ],
        "summary": "List CSFields",
        "description": "List CSFields.",
        "operationId": "listCSField",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result CSField list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSFieldList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "CSField"
        ],
        "summary": "Create a new CSField",
        "description": "Creates a new CSField and persists it to storage.",
        "operationId": "createCSField",
        "requestBody": {
          "description": "CSField to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "creating",
                      "opening",
                      "end"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "empty",
                      "video",
                      "audio",
                      "text",
                      "mixed"
                    ]
                  },
                  "joined_user": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joins": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "status",
                  "type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CSField created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSFieldCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cs-fields/{id}": {
      "get": {
        "tags": [
          "CSField"
        ],
        "summary": "Find a CSField by ID",
        "description": "Finds the CSField with the requested ID and returns it.",
        "operationId": "readCSField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CSField",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CSField with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSFieldRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "CSField"
        ],
        "summary": "Deletes a CSField by ID",
        "description": "Deletes the CSField with the requested ID.",
        "operationId": "deleteCSField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CSField",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "CSField with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "CSField"
        ],
        "summary": "Updates a CSField",
        "description": "Updates a CSField and persists changes to storage.",
        "operationId": "updateCSField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CSField",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "CSField properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "creating",
                      "opening",
                      "end"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "empty",
                      "video",
                      "audio",
                      "text",
                      "mixed"
                    ]
                  },
                  "joined_user": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joins": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CSField updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSFieldUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cs-fields/{id}/joined-user": {
      "get": {
        "tags": [
          "CSField"
        ],
        "summary": "List attached JoinedUsers",
        "description": "List attached JoinedUsers.",
        "operationId": "listCSFieldJoinedUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CSField",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Csfields list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSField_JoinedUserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cs-fields/{id}/joins": {
      "get": {
        "tags": [
          "CSField"
        ],
        "summary": "List attached Joins",
        "description": "List attached Joins.",
        "operationId": "listCSFieldJoins",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CSField",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Csfields list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSField_JoinsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "List Devices",
        "description": "List Devices.",
        "operationId": "listDevice",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Device list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Create a new Device",
        "description": "Creates a new Device and persists it to storage.",
        "operationId": "createDevice",
        "requestBody": {
          "description": "Device to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "iPhone",
                      "android",
                      "unknown"
                    ]
                  },
                  "code": {
                    "type": "string"
                  },
                  "push_token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "type",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Device created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Find a Device by ID",
        "description": "Finds the Device with the requested ID and returns it.",
        "operationId": "readDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Device with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "summary": "Deletes a Device by ID",
        "description": "Deletes the Device with the requested ID.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Device with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Device"
        ],
        "summary": "Updates a Device",
        "description": "Updates a Device and persists changes to storage.",
        "operationId": "updateDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Device properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "iPhone",
                      "android",
                      "unknown"
                    ]
                  },
                  "code": {
                    "type": "string"
                  },
                  "push_token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Device updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/devices/{id}/owner": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Device with the given ID",
        "operationId": "readDeviceOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Device",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Device with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/friendships": {
      "get": {
        "tags": [
          "Friendship"
        ],
        "summary": "List Friendships",
        "description": "List Friendships.",
        "operationId": "listFriendship",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Friendship list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendshipList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Friendship"
        ],
        "summary": "Create a new Friendship",
        "description": "Creates a new Friendship and persists it to storage.",
        "operationId": "createFriendship",
        "requestBody": {
          "description": "Friendship to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "invited",
                      "established",
                      "rejected",
                      "forbidden"
                    ]
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "friend_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "user": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "friend": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "status",
                  "user_id",
                  "friend_id",
                  "user",
                  "friend"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Friendship created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendshipCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/friendships/{id}": {
      "get": {
        "tags": [
          "Friendship"
        ],
        "summary": "Find a Friendship by ID",
        "description": "Finds the Friendship with the requested ID and returns it.",
        "operationId": "readFriendship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Friendship",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Friendship with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendshipRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Friendship"
        ],
        "summary": "Deletes a Friendship by ID",
        "description": "Deletes the Friendship with the requested ID.",
        "operationId": "deleteFriendship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Friendship",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Friendship with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Friendship"
        ],
        "summary": "Updates a Friendship",
        "description": "Updates a Friendship and persists changes to storage.",
        "operationId": "updateFriendship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Friendship",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Friendship properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "invited",
                      "established",
                      "rejected",
                      "forbidden"
                    ]
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "friend_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "user": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "friend": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Friendship updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendshipUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/friendships/{id}/friend": {
      "get": {
        "tags": [
          "Friendship"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Friendship with the given ID",
        "operationId": "readFriendshipFriend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Friendship",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Friendship with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Friendship_FriendRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/friendships/{id}/user": {
      "get": {
        "tags": [
          "Friendship"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Friendship with the given ID",
        "operationId": "readFriendshipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Friendship",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Friendship with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Friendship_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/joins": {
      "get": {
        "tags": [
          "Join"
        ],
        "summary": "List Joins",
        "description": "List Joins.",
        "operationId": "listJoin",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Join list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JoinList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Join"
        ],
        "summary": "Create a new Join",
        "description": "Creates a new Join and persists it to storage.",
        "operationId": "createJoin",
        "requestBody": {
          "description": "Join to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "join_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "leave_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "infield",
                      "temp_leaving",
                      "invited",
                      "leave",
                      "host",
                      "admin"
                    ],
                    "default": "host"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "cs_field_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "user": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "cs_field": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "join_at",
                  "status",
                  "user_id",
                  "cs_field_id",
                  "user",
                  "cs_field"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Join created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/joins/{id}": {
      "get": {
        "tags": [
          "Join"
        ],
        "summary": "Find a Join by ID",
        "description": "Finds the Join with the requested ID and returns it.",
        "operationId": "readJoin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Join",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Join with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Join"
        ],
        "summary": "Deletes a Join by ID",
        "description": "Deletes the Join with the requested ID.",
        "operationId": "deleteJoin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Join",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Join with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Join"
        ],
        "summary": "Updates a Join",
        "description": "Updates a Join and persists changes to storage.",
        "operationId": "updateJoin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Join",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Join properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "join_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "leave_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "infield",
                      "temp_leaving",
                      "invited",
                      "leave",
                      "host",
                      "admin"
                    ],
                    "default": "host"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "cs_field_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "user": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "cs_field": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Join updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/joins/{id}/cs-field": {
      "get": {
        "tags": [
          "Join"
        ],
        "summary": "Find the attached CSField",
        "description": "Find the attached CSField of the Join with the given ID",
        "operationId": "readJoinCsField",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Join",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CSField attached to Join with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Join_CsFieldRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/joins/{id}/user": {
      "get": {
        "tags": [
          "Join"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Join with the given ID",
        "operationId": "readJoinUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Join",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Join with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Join_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "List Messages",
        "description": "List Messages.",
        "operationId": "listMessage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Message list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Create a new Message",
        "description": "Creates a new Message and persists it to storage.",
        "operationId": "createMessage",
        "requestBody": {
          "description": "Message to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "text",
                      "pic",
                      "unknown"
                    ],
                    "default": "text"
                  },
                  "content": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "type",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Find a Message by ID",
        "description": "Finds the Message with the requested ID and returns it.",
        "operationId": "readMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Message",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Message with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Message"
        ],
        "summary": "Deletes a Message by ID",
        "description": "Deletes the Message with the requested ID.",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Message",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Message with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Message"
        ],
        "summary": "Updates a Message",
        "description": "Updates a Message and persists changes to storage.",
        "operationId": "updateMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Message",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Message properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "text",
                      "pic",
                      "unknown"
                    ],
                    "default": "text"
                  },
                  "content": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/messages/{id}/owner": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Message with the given ID",
        "operationId": "readMessageOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Message",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Message with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nfts": {
      "get": {
        "tags": [
          "NFT"
        ],
        "summary": "List NFTs",
        "description": "List NFTs.",
        "operationId": "listNFT",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result NFT list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFTList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "NFT"
        ],
        "summary": "Create a new NFT",
        "description": "Creates a new NFT and persists it to storage.",
        "operationId": "createNFT",
        "requestBody": {
          "description": "NFT to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "NFT created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NFTCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nfts/{id}": {
      "get": {
        "tags": [
          "NFT"
        ],
        "summary": "Find a NFT by ID",
        "description": "Finds the NFT with the requested ID and returns it.",
        "operationId": "readNFT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the NFT",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NFT with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NFTRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "NFT"
        ],
        "summary": "Deletes a NFT by ID",
        "description": "Deletes the NFT with the requested ID.",
        "operationId": "deleteNFT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the NFT",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "NFT with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "NFT"
        ],
        "summary": "Updates a NFT",
        "description": "Updates a NFT and persists changes to storage.",
        "operationId": "updateNFT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the NFT",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "NFT properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "NFT updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NFTUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nfts/{id}/owner": {
      "get": {
        "tags": [
          "NFT"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the NFT with the given ID",
        "operationId": "readNFTOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the NFT",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to NFT with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NFT_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rules": {
      "get": {
        "tags": [
          "Rule"
        ],
        "summary": "List Rules",
        "description": "List Rules.",
        "operationId": "listRule",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Rule list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Rule"
        ],
        "summary": "Create a new Rule",
        "description": "Creates a new Rule and persists it to storage.",
        "operationId": "createRule",
        "requestBody": {
          "description": "Rule to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "used": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Rule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rules/{id}": {
      "get": {
        "tags": [
          "Rule"
        ],
        "summary": "Find a Rule by ID",
        "description": "Finds the Rule with the requested ID and returns it.",
        "operationId": "readRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Rule",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Rule with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Rule"
        ],
        "summary": "Deletes a Rule by ID",
        "description": "Deletes the Rule with the requested ID.",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Rule",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Rule with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Rule"
        ],
        "summary": "Updates a Rule",
        "description": "Updates a Rule and persists changes to storage.",
        "operationId": "updateRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Rule",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Rule properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "used": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Rule updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rules/{id}/used": {
      "get": {
        "tags": [
          "Rule"
        ],
        "summary": "List attached Useds",
        "description": "List attached Useds.",
        "operationId": "listRuleUsed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Rule",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Rules list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule_UsedList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "List Settings",
        "description": "List Settings.",
        "operationId": "listSetting",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Setting list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Setting"
        ],
        "summary": "Create a new Setting",
        "description": "Creates a new Setting and persists it to storage.",
        "operationId": "createSetting",
        "requestBody": {
          "description": "Setting to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Setting created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/settings/{id}": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "Find a Setting by ID",
        "description": "Finds the Setting with the requested ID and returns it.",
        "operationId": "readSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Setting",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Setting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Setting"
        ],
        "summary": "Deletes a Setting by ID",
        "description": "Deletes the Setting with the requested ID.",
        "operationId": "deleteSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Setting",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Setting with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Setting"
        ],
        "summary": "Updates a Setting",
        "description": "Updates a Setting and persists changes to storage.",
        "operationId": "updateSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Setting",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Setting properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Setting updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/settings/{id}/owner": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Setting with the given ID",
        "operationId": "readSettingOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Setting",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Setting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/streams": {
      "get": {
        "tags": [
          "Stream"
        ],
        "summary": "List Streams",
        "description": "List Streams.",
        "operationId": "listStream",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Stream list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StreamList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Stream"
        ],
        "summary": "Create a new Stream",
        "description": "Creates a new Stream and persists it to storage.",
        "operationId": "createStream",
        "requestBody": {
          "description": "Stream to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "video",
                      "audio",
                      "custom"
                    ]
                  },
                  "stream_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "type",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Stream created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/streams/{id}": {
      "get": {
        "tags": [
          "Stream"
        ],
        "summary": "Find a Stream by ID",
        "description": "Finds the Stream with the requested ID and returns it.",
        "operationId": "readStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Stream",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Stream with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Stream"
        ],
        "summary": "Deletes a Stream by ID",
        "description": "Deletes the Stream with the requested ID.",
        "operationId": "deleteStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Stream",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Stream with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Stream"
        ],
        "summary": "Updates a Stream",
        "description": "Updates a Stream and persists changes to storage.",
        "operationId": "updateStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Stream",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Stream properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "video",
                      "audio",
                      "custom"
                    ]
                  },
                  "stream_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Stream updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/streams/{id}/owner": {
      "get": {
        "tags": [
          "Stream"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Stream with the given ID",
        "operationId": "readStreamOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Stream",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Stream with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-auths": {
      "get": {
        "tags": [
          "User_auth"
        ],
        "summary": "List User_auths",
        "description": "List User_auths.",
        "operationId": "listUser_auth",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User_auth list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_authList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User_auth"
        ],
        "summary": "Create a new User_auth",
        "description": "Creates a new User_auth and persists it to storage.",
        "operationId": "createUser_auth",
        "requestBody": {
          "description": "User_auth to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "oauth2",
                      "email",
                      "mobile",
                      "jwt"
                    ]
                  },
                  "email": {
                    "type": "string"
                  },
                  "mobile_no": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "type",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User_auth created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_authCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-auths/{id}": {
      "get": {
        "tags": [
          "User_auth"
        ],
        "summary": "Find a User_auth by ID",
        "description": "Finds the User_auth with the requested ID and returns it.",
        "operationId": "readUser_auth",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_auth",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User_auth with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_authRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User_auth"
        ],
        "summary": "Deletes a User_auth by ID",
        "description": "Deletes the User_auth with the requested ID.",
        "operationId": "deleteUser_auth",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_auth",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User_auth with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User_auth"
        ],
        "summary": "Updates a User_auth",
        "description": "Updates a User_auth and persists changes to storage.",
        "operationId": "updateUser_auth",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_auth",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "User_auth properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "oauth2",
                      "email",
                      "mobile",
                      "jwt"
                    ]
                  },
                  "email": {
                    "type": "string"
                  },
                  "mobile_no": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User_auth updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_authUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-auths/{id}/owner": {
      "get": {
        "tags": [
          "User_auth"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the User_auth with the given ID",
        "operationId": "readUser_authOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_auth",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to User_auth with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_auth_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-histories": {
      "get": {
        "tags": [
          "User_history"
        ],
        "summary": "List User_histories",
        "description": "List User_histories.",
        "operationId": "listUser_history",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User_history list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_historyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User_history"
        ],
        "summary": "Create a new User_history",
        "description": "Creates a new User_history and persists it to storage.",
        "operationId": "createUser_history",
        "requestBody": {
          "description": "User_history to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "csfield",
                      "action",
                      "unknown"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "type",
                  "name",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User_history created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_historyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-histories/{id}": {
      "get": {
        "tags": [
          "User_history"
        ],
        "summary": "Find a User_history by ID",
        "description": "Finds the User_history with the requested ID and returns it.",
        "operationId": "readUser_history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_history",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User_history with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_historyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User_history"
        ],
        "summary": "Deletes a User_history by ID",
        "description": "Deletes the User_history with the requested ID.",
        "operationId": "deleteUser_history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_history",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User_history with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User_history"
        ],
        "summary": "Updates a User_history",
        "description": "Updates a User_history and persists changes to storage.",
        "operationId": "updateUser_history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_history",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "User_history properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "csfield",
                      "action",
                      "unknown"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "resource_url": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User_history updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_historyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-histories/{id}/owner": {
      "get": {
        "tags": [
          "User_history"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the User_history with the given ID",
        "operationId": "readUser_historyOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User_history",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to User_history with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_history_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "open_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nick_name": {
                    "type": "string"
                  },
                  "avatar": {
                    "type": "string"
                  },
                  "thumbnail_url": {
                    "type": "string"
                  },
                  "sex": {
                    "type": "string"
                  },
                  "mobile_no": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "infield",
                      "standalone",
                      "forbidden"
                    ],
                    "default": "standalone"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "host",
                      "admin",
                      "client"
                    ],
                    "default": "client"
                  },
                  "user_auth": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "card": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "message": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joined_csfield": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "device": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "history": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "token": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "creation": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "setting": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "nft": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "stream": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joins": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "friendships": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "create_time",
                  "update_time",
                  "name",
                  "thumbnail_url",
                  "mobile_no",
                  "status",
                  "role"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "open_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nick_name": {
                    "type": "string"
                  },
                  "avatar": {
                    "type": "string"
                  },
                  "thumbnail_url": {
                    "type": "string"
                  },
                  "sex": {
                    "type": "string"
                  },
                  "mobile_no": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "infield",
                      "standalone",
                      "forbidden"
                    ],
                    "default": "standalone"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "host",
                      "admin",
                      "client"
                    ],
                    "default": "client"
                  },
                  "user_auth": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "card": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "message": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joined_csfield": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "device": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "history": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "token": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "creation": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "setting": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "nft": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "stream": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    }
                  },
                  "joins": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "friendships": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/card": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Cards",
        "description": "List attached Cards.",
        "operationId": "listUserCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_CardList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/creation": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Creations",
        "description": "List attached Creations.",
        "operationId": "listUserCreation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_CreationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/device": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Devices",
        "description": "List attached Devices.",
        "operationId": "listUserDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_DeviceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/friends": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Friends",
        "description": "List attached Friends.",
        "operationId": "listUserFriends",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_FriendsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/friendships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Friendships",
        "description": "List attached Friendships.",
        "operationId": "listUserFriendships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_FriendshipsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/history": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Histories",
        "description": "List attached Histories.",
        "operationId": "listUserHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_HistoryList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/joined-csfield": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached JoinedCsfields",
        "description": "List attached JoinedCsfields.",
        "operationId": "listUserJoinedCsfield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_JoinedCsfieldList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/joins": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Joins",
        "description": "List attached Joins.",
        "operationId": "listUserJoins",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_JoinsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/message": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Messages",
        "description": "List attached Messages.",
        "operationId": "listUserMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_MessageList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/nft": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Nfts",
        "description": "List attached Nfts.",
        "operationId": "listUserNft",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_NftList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/setting": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Settings",
        "description": "List attached Settings.",
        "operationId": "listUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_SettingList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/stream": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Streams",
        "description": "List attached Streams.",
        "operationId": "listUserStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_StreamList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/token": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Tokens",
        "description": "List attached Tokens.",
        "operationId": "listUserToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_TokenList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/user-auth": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached UserAuths",
        "description": "List attached UserAuths.",
        "operationId": "listUserUserAuth",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_UserAuthList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Agora_token": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id",
          "owner"
        ]
      },
      "Agora_tokenCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id"
        ]
      },
      "Agora_tokenList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id"
        ]
      },
      "Agora_tokenRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id"
        ]
      },
      "Agora_tokenUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id"
        ]
      },
      "Agora_token_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "CSField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          },
          "joined_user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "joins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Join"
            }
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CSFieldCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CSFieldList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CSFieldRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CSFieldUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CSField_JoinedUserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "CSField_JoinsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "rule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CardCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CardList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CardRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "CardUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "Card_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Card_RuleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "Commodity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "card": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "NFT": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            }
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "CommodityCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "CommodityList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "CommodityRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "CommodityUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "Commodity_CardList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "Commodity_NFTList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Creation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id",
          "owner"
        ]
      },
      "CreationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "CreationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "CreationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "CreationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "Creation_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id",
          "owner"
        ]
      },
      "DeviceCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "DeviceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "DeviceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "DeviceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "Device_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Friendship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "friend": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id",
          "user",
          "friend"
        ]
      },
      "FriendshipCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id"
        ]
      },
      "FriendshipList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id"
        ]
      },
      "FriendshipRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id"
        ]
      },
      "FriendshipUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id"
        ]
      },
      "Friendship_FriendRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Friendship_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Join": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "cs_field": {
            "$ref": "#/components/schemas/CSField"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id",
          "user",
          "cs_field"
        ]
      },
      "JoinCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "JoinList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "JoinRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "JoinUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "Join_CsFieldRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "Join_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id",
          "owner"
        ]
      },
      "MessageCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "MessageList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "MessageRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "MessageUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "Message_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "NFT": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NFTCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NFTList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NFTRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NFTUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NFT_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Rule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "used": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "RuleCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "RuleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "RuleRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "RuleUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name"
        ]
      },
      "Rule_UsedList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "Setting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id",
          "owner"
        ]
      },
      "SettingCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "SettingList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "SettingRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "SettingUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "Setting_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "Stream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id",
          "owner"
        ]
      },
      "StreamCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id"
        ]
      },
      "StreamList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id"
        ]
      },
      "StreamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id"
        ]
      },
      "StreamUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id"
        ]
      },
      "Stream_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          },
          "user_auth": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User_auth"
            }
          },
          "card": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "message": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "joined_csfield": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSField"
            }
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "device": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User_history"
            }
          },
          "token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agora_token"
            }
          },
          "creation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Creation"
            }
          },
          "setting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Setting"
            }
          },
          "nft": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            }
          },
          "stream": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stream"
            }
          },
          "joins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Join"
            }
          },
          "friendships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Friendship"
            }
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "User_CardList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pic_url": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "status1",
              "status2",
              "status3"
            ],
            "default": "status1"
          },
          "type": {
            "type": "string",
            "enum": [
              "type1",
              "type2",
              "type3"
            ],
            "default": "type1"
          },
          "script": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "script_raw": {
            "type": "string"
          },
          "script_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "User_CreationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "User_DeviceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "iPhone",
              "android",
              "unknown"
            ]
          },
          "code": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_FriendsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "User_FriendshipsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "invited",
              "established",
              "rejected",
              "forbidden"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "friend_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "status",
          "user_id",
          "friend_id"
        ]
      },
      "User_HistoryList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id"
        ]
      },
      "User_JoinedCsfieldList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "opening",
              "end"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "empty",
              "video",
              "audio",
              "text",
              "mixed"
            ]
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "status",
          "type"
        ]
      },
      "User_JoinsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_at": {
            "type": "string",
            "format": "date-time"
          },
          "leave_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "temp_leaving",
              "invited",
              "leave",
              "host",
              "admin"
            ],
            "default": "host"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "cs_field_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "join_at",
          "status",
          "user_id",
          "cs_field_id"
        ]
      },
      "User_MessageList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "pic",
              "unknown"
            ],
            "default": "text"
          },
          "content": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_NftList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "User_SettingList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "user_id"
        ]
      },
      "User_StreamList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "video",
              "audio",
              "custom"
            ]
          },
          "stream_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "type",
          "user_id"
        ]
      },
      "User_TokenList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "token",
          "user_id"
        ]
      },
      "User_UserAuthList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_auth": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id",
          "owner"
        ]
      },
      "User_authCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_authList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_authRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_authUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth2",
              "email",
              "mobile",
              "jwt"
            ]
          },
          "email": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "user_id"
        ]
      },
      "User_auth_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      },
      "User_history": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id",
          "owner"
        ]
      },
      "User_historyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id"
        ]
      },
      "User_historyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id"
        ]
      },
      "User_historyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id"
        ]
      },
      "User_historyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "csfield",
              "action",
              "unknown"
            ]
          },
          "name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "type",
          "name",
          "user_id"
        ]
      },
      "User_history_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "open_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nick_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "mobile_no": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "infield",
              "standalone",
              "forbidden"
            ],
            "default": "standalone"
          },
          "role": {
            "type": "string",
            "enum": [
              "host",
              "admin",
              "client"
            ],
            "default": "client"
          }
        },
        "required": [
          "id",
          "create_time",
          "update_time",
          "name",
          "thumbnail_url",
          "mobile_no",
          "status",
          "role"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}