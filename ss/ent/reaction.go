// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Reaction is the model entity for the Reaction schema.
type Reaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// IsLOL holds the value of the "isLOL" field.
	IsLOL bool `json:"isLOL,omitempty"`
	// IsOMG holds the value of the "isOMG" field.
	IsOMG bool `json:"isOMG,omitempty"`
	// IsCool holds the value of the "isCool" field.
	IsCool bool `json:"isCool,omitempty"`
	// IsNooo holds the value of the "isNooo" field.
	IsNooo bool `json:"isNooo,omitempty"`
	// IsDAMN holds the value of the "isDAMN" field.
	IsDAMN bool `json:"isDAMN,omitempty"`
	// TimeDewID holds the value of the "time_dew_id" field.
	TimeDewID uint64 `json:"time_dew_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReactionQuery when eager-loading is set.
	Edges ReactionEdges `json:"edges"`
}

// ReactionEdges holds the relations/edges for other nodes in the graph.
type ReactionEdges struct {
	// Timedew holds the value of the timedew edge.
	Timedew *TimeDew `json:"timedew,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TimedewOrErr returns the Timedew value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) TimedewOrErr() (*TimeDew, error) {
	if e.loadedTypes[0] {
		if e.Timedew == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: timedew.Label}
		}
		return e.Timedew, nil
	}
	return nil, &NotLoadedError{edge: "timedew"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reaction.FieldIsLOL, reaction.FieldIsOMG, reaction.FieldIsCool, reaction.FieldIsNooo, reaction.FieldIsDAMN:
			values[i] = new(sql.NullBool)
		case reaction.FieldID, reaction.FieldTimeDewID, reaction.FieldUserID:
			values[i] = new(sql.NullInt64)
		case reaction.FieldCreateTime, reaction.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reaction fields.
func (r *Reaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reaction.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case reaction.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case reaction.FieldIsLOL:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isLOL", values[i])
			} else if value.Valid {
				r.IsLOL = value.Bool
			}
		case reaction.FieldIsOMG:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isOMG", values[i])
			} else if value.Valid {
				r.IsOMG = value.Bool
			}
		case reaction.FieldIsCool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isCool", values[i])
			} else if value.Valid {
				r.IsCool = value.Bool
			}
		case reaction.FieldIsNooo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isNooo", values[i])
			} else if value.Valid {
				r.IsNooo = value.Bool
			}
		case reaction.FieldIsDAMN:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isDAMN", values[i])
			} else if value.Valid {
				r.IsDAMN = value.Bool
			}
		case reaction.FieldTimeDewID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_dew_id", values[i])
			} else if value.Valid {
				r.TimeDewID = uint64(value.Int64)
			}
		case reaction.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTimedew queries the "timedew" edge of the Reaction entity.
func (r *Reaction) QueryTimedew() *TimeDewQuery {
	return (&ReactionClient{config: r.config}).QueryTimedew(r)
}

// QueryUser queries the "user" edge of the Reaction entity.
func (r *Reaction) QueryUser() *UserQuery {
	return (&ReactionClient{config: r.config}).QueryUser(r)
}

// Update returns a builder for updating this Reaction.
// Note that you need to call Reaction.Unwrap() before calling this method if this Reaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reaction) Update() *ReactionUpdateOne {
	return (&ReactionClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reaction) Unwrap() *Reaction {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reaction is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reaction) String() string {
	var builder strings.Builder
	builder.WriteString("Reaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("isLOL=")
	builder.WriteString(fmt.Sprintf("%v", r.IsLOL))
	builder.WriteString(", ")
	builder.WriteString("isOMG=")
	builder.WriteString(fmt.Sprintf("%v", r.IsOMG))
	builder.WriteString(", ")
	builder.WriteString("isCool=")
	builder.WriteString(fmt.Sprintf("%v", r.IsCool))
	builder.WriteString(", ")
	builder.WriteString("isNooo=")
	builder.WriteString(fmt.Sprintf("%v", r.IsNooo))
	builder.WriteString(", ")
	builder.WriteString("isDAMN=")
	builder.WriteString(fmt.Sprintf("%v", r.IsDAMN))
	builder.WriteString(", ")
	builder.WriteString("time_dew_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TimeDewID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Reactions is a parsable slice of Reaction.
type Reactions []*Reaction

func (r Reactions) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
