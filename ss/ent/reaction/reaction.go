// Code generated by ent, DO NOT EDIT.

package reaction

import (
	"time"
)

const (
	// Label holds the string label denoting the reaction type in the database.
	Label = "reaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldIsLOL holds the string denoting the islol field in the database.
	FieldIsLOL = "is_lol"
	// FieldIsOMG holds the string denoting the isomg field in the database.
	FieldIsOMG = "is_omg"
	// FieldIsCool holds the string denoting the iscool field in the database.
	FieldIsCool = "is_cool"
	// FieldIsNooo holds the string denoting the isnooo field in the database.
	FieldIsNooo = "is_nooo"
	// FieldIsDAMN holds the string denoting the isdamn field in the database.
	FieldIsDAMN = "is_damn"
	// FieldTimeDewID holds the string denoting the time_dew_id field in the database.
	FieldTimeDewID = "time_dew_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeTimedew holds the string denoting the timedew edge name in mutations.
	EdgeTimedew = "timedew"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the reaction in the database.
	Table = "reactions"
	// TimedewTable is the table that holds the timedew relation/edge.
	TimedewTable = "reactions"
	// TimedewInverseTable is the table name for the TimeDew entity.
	// It exists in this package in order to avoid circular dependency with the "timedew" package.
	TimedewInverseTable = "time_dews"
	// TimedewColumn is the table column denoting the timedew relation/edge.
	TimedewColumn = "time_dew_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "reactions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for reaction fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIsLOL,
	FieldIsOMG,
	FieldIsCool,
	FieldIsNooo,
	FieldIsDAMN,
	FieldTimeDewID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsLOL holds the default value on creation for the "isLOL" field.
	DefaultIsLOL bool
	// DefaultIsOMG holds the default value on creation for the "isOMG" field.
	DefaultIsOMG bool
	// DefaultIsCool holds the default value on creation for the "isCool" field.
	DefaultIsCool bool
	// DefaultIsNooo holds the default value on creation for the "isNooo" field.
	DefaultIsNooo bool
	// DefaultIsDAMN holds the default value on creation for the "isDAMN" field.
	DefaultIsDAMN bool
)
