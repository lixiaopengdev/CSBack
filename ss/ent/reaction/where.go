// Code generated by ent, DO NOT EDIT.

package reaction

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// IsLOL applies equality check predicate on the "isLOL" field. It's identical to IsLOLEQ.
func IsLOL(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLOL), v))
	})
}

// IsOMG applies equality check predicate on the "isOMG" field. It's identical to IsOMGEQ.
func IsOMG(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOMG), v))
	})
}

// IsCool applies equality check predicate on the "isCool" field. It's identical to IsCoolEQ.
func IsCool(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCool), v))
	})
}

// IsNooo applies equality check predicate on the "isNooo" field. It's identical to IsNoooEQ.
func IsNooo(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNooo), v))
	})
}

// IsDAMN applies equality check predicate on the "isDAMN" field. It's identical to IsDAMNEQ.
func IsDAMN(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDAMN), v))
	})
}

// TimeDewID applies equality check predicate on the "time_dew_id" field. It's identical to TimeDewIDEQ.
func TimeDewID(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// IsLOLEQ applies the EQ predicate on the "isLOL" field.
func IsLOLEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLOL), v))
	})
}

// IsLOLNEQ applies the NEQ predicate on the "isLOL" field.
func IsLOLNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLOL), v))
	})
}

// IsOMGEQ applies the EQ predicate on the "isOMG" field.
func IsOMGEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOMG), v))
	})
}

// IsOMGNEQ applies the NEQ predicate on the "isOMG" field.
func IsOMGNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsOMG), v))
	})
}

// IsCoolEQ applies the EQ predicate on the "isCool" field.
func IsCoolEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCool), v))
	})
}

// IsCoolNEQ applies the NEQ predicate on the "isCool" field.
func IsCoolNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsCool), v))
	})
}

// IsNoooEQ applies the EQ predicate on the "isNooo" field.
func IsNoooEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNooo), v))
	})
}

// IsNoooNEQ applies the NEQ predicate on the "isNooo" field.
func IsNoooNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsNooo), v))
	})
}

// IsDAMNEQ applies the EQ predicate on the "isDAMN" field.
func IsDAMNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDAMN), v))
	})
}

// IsDAMNNEQ applies the NEQ predicate on the "isDAMN" field.
func IsDAMNNEQ(v bool) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDAMN), v))
	})
}

// TimeDewIDEQ applies the EQ predicate on the "time_dew_id" field.
func TimeDewIDEQ(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewID), v))
	})
}

// TimeDewIDNEQ applies the NEQ predicate on the "time_dew_id" field.
func TimeDewIDNEQ(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeDewID), v))
	})
}

// TimeDewIDIn applies the In predicate on the "time_dew_id" field.
func TimeDewIDIn(vs ...uint64) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimeDewID), v...))
	})
}

// TimeDewIDNotIn applies the NotIn predicate on the "time_dew_id" field.
func TimeDewIDNotIn(vs ...uint64) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimeDewID), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Reaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// HasTimedew applies the HasEdge predicate on the "timedew" edge.
func HasTimedew() predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimedewTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TimedewTable, TimedewColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimedewWith applies the HasEdge predicate on the "timedew" edge with a given conditions (other predicates).
func HasTimedewWith(preds ...predicate.TimeDew) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimedewInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TimedewTable, TimedewColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reaction) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reaction) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reaction) predicate.Reaction {
	return predicate.Reaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
