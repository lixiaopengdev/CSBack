// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReactionCreate is the builder for creating a Reaction entity.
type ReactionCreate struct {
	config
	mutation *ReactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (rc *ReactionCreate) SetCreateTime(t time.Time) *ReactionCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableCreateTime(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *ReactionCreate) SetUpdateTime(t time.Time) *ReactionCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableUpdateTime(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetIsLOL sets the "isLOL" field.
func (rc *ReactionCreate) SetIsLOL(b bool) *ReactionCreate {
	rc.mutation.SetIsLOL(b)
	return rc
}

// SetNillableIsLOL sets the "isLOL" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableIsLOL(b *bool) *ReactionCreate {
	if b != nil {
		rc.SetIsLOL(*b)
	}
	return rc
}

// SetIsOMG sets the "isOMG" field.
func (rc *ReactionCreate) SetIsOMG(b bool) *ReactionCreate {
	rc.mutation.SetIsOMG(b)
	return rc
}

// SetNillableIsOMG sets the "isOMG" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableIsOMG(b *bool) *ReactionCreate {
	if b != nil {
		rc.SetIsOMG(*b)
	}
	return rc
}

// SetIsCool sets the "isCool" field.
func (rc *ReactionCreate) SetIsCool(b bool) *ReactionCreate {
	rc.mutation.SetIsCool(b)
	return rc
}

// SetNillableIsCool sets the "isCool" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableIsCool(b *bool) *ReactionCreate {
	if b != nil {
		rc.SetIsCool(*b)
	}
	return rc
}

// SetIsNooo sets the "isNooo" field.
func (rc *ReactionCreate) SetIsNooo(b bool) *ReactionCreate {
	rc.mutation.SetIsNooo(b)
	return rc
}

// SetNillableIsNooo sets the "isNooo" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableIsNooo(b *bool) *ReactionCreate {
	if b != nil {
		rc.SetIsNooo(*b)
	}
	return rc
}

// SetIsDAMN sets the "isDAMN" field.
func (rc *ReactionCreate) SetIsDAMN(b bool) *ReactionCreate {
	rc.mutation.SetIsDAMN(b)
	return rc
}

// SetNillableIsDAMN sets the "isDAMN" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableIsDAMN(b *bool) *ReactionCreate {
	if b != nil {
		rc.SetIsDAMN(*b)
	}
	return rc
}

// SetTimeDewID sets the "time_dew_id" field.
func (rc *ReactionCreate) SetTimeDewID(u uint64) *ReactionCreate {
	rc.mutation.SetTimeDewID(u)
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *ReactionCreate) SetUserID(u uint64) *ReactionCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetTimedewID sets the "timedew" edge to the TimeDew entity by ID.
func (rc *ReactionCreate) SetTimedewID(id uint64) *ReactionCreate {
	rc.mutation.SetTimedewID(id)
	return rc
}

// SetTimedew sets the "timedew" edge to the TimeDew entity.
func (rc *ReactionCreate) SetTimedew(t *TimeDew) *ReactionCreate {
	return rc.SetTimedewID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (rc *ReactionCreate) SetUser(u *User) *ReactionCreate {
	return rc.SetUserID(u.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (rc *ReactionCreate) Mutation() *ReactionMutation {
	return rc.mutation
}

// Save creates the Reaction in the database.
func (rc *ReactionCreate) Save(ctx context.Context) (*Reaction, error) {
	var (
		err  error
		node *Reaction
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Reaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReactionCreate) SaveX(ctx context.Context) *Reaction {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReactionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReactionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReactionCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := reaction.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := reaction.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	if _, ok := rc.mutation.IsLOL(); !ok {
		v := reaction.DefaultIsLOL
		rc.mutation.SetIsLOL(v)
	}
	if _, ok := rc.mutation.IsOMG(); !ok {
		v := reaction.DefaultIsOMG
		rc.mutation.SetIsOMG(v)
	}
	if _, ok := rc.mutation.IsCool(); !ok {
		v := reaction.DefaultIsCool
		rc.mutation.SetIsCool(v)
	}
	if _, ok := rc.mutation.IsNooo(); !ok {
		v := reaction.DefaultIsNooo
		rc.mutation.SetIsNooo(v)
	}
	if _, ok := rc.mutation.IsDAMN(); !ok {
		v := reaction.DefaultIsDAMN
		rc.mutation.SetIsDAMN(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReactionCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Reaction.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Reaction.update_time"`)}
	}
	if _, ok := rc.mutation.IsLOL(); !ok {
		return &ValidationError{Name: "isLOL", err: errors.New(`ent: missing required field "Reaction.isLOL"`)}
	}
	if _, ok := rc.mutation.IsOMG(); !ok {
		return &ValidationError{Name: "isOMG", err: errors.New(`ent: missing required field "Reaction.isOMG"`)}
	}
	if _, ok := rc.mutation.IsCool(); !ok {
		return &ValidationError{Name: "isCool", err: errors.New(`ent: missing required field "Reaction.isCool"`)}
	}
	if _, ok := rc.mutation.IsNooo(); !ok {
		return &ValidationError{Name: "isNooo", err: errors.New(`ent: missing required field "Reaction.isNooo"`)}
	}
	if _, ok := rc.mutation.IsDAMN(); !ok {
		return &ValidationError{Name: "isDAMN", err: errors.New(`ent: missing required field "Reaction.isDAMN"`)}
	}
	if _, ok := rc.mutation.TimeDewID(); !ok {
		return &ValidationError{Name: "time_dew_id", err: errors.New(`ent: missing required field "Reaction.time_dew_id"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Reaction.user_id"`)}
	}
	if _, ok := rc.mutation.TimedewID(); !ok {
		return &ValidationError{Name: "timedew", err: errors.New(`ent: missing required edge "Reaction.timedew"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Reaction.user"`)}
	}
	return nil
}

func (rc *ReactionCreate) sqlSave(ctx context.Context) (*Reaction, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *ReactionCreate) createSpec() (*Reaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Reaction{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reaction.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(reaction.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(reaction.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.IsLOL(); ok {
		_spec.SetField(reaction.FieldIsLOL, field.TypeBool, value)
		_node.IsLOL = value
	}
	if value, ok := rc.mutation.IsOMG(); ok {
		_spec.SetField(reaction.FieldIsOMG, field.TypeBool, value)
		_node.IsOMG = value
	}
	if value, ok := rc.mutation.IsCool(); ok {
		_spec.SetField(reaction.FieldIsCool, field.TypeBool, value)
		_node.IsCool = value
	}
	if value, ok := rc.mutation.IsNooo(); ok {
		_spec.SetField(reaction.FieldIsNooo, field.TypeBool, value)
		_node.IsNooo = value
	}
	if value, ok := rc.mutation.IsDAMN(); ok {
		_spec.SetField(reaction.FieldIsDAMN, field.TypeBool, value)
		_node.IsDAMN = value
	}
	if nodes := rc.mutation.TimedewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.TimedewTable,
			Columns: []string{reaction.TimedewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: timedew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TimeDewID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.UserTable,
			Columns: []string{reaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reaction.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReactionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rc *ReactionCreate) OnConflict(opts ...sql.ConflictOption) *ReactionUpsertOne {
	rc.conflict = opts
	return &ReactionUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReactionCreate) OnConflictColumns(columns ...string) *ReactionUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReactionUpsertOne{
		create: rc,
	}
}

type (
	// ReactionUpsertOne is the builder for "upsert"-ing
	//  one Reaction node.
	ReactionUpsertOne struct {
		create *ReactionCreate
	}

	// ReactionUpsert is the "OnConflict" setter.
	ReactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *ReactionUpsert) SetUpdateTime(v time.Time) *ReactionUpsert {
	u.Set(reaction.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateUpdateTime() *ReactionUpsert {
	u.SetExcluded(reaction.FieldUpdateTime)
	return u
}

// SetIsLOL sets the "isLOL" field.
func (u *ReactionUpsert) SetIsLOL(v bool) *ReactionUpsert {
	u.Set(reaction.FieldIsLOL, v)
	return u
}

// UpdateIsLOL sets the "isLOL" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateIsLOL() *ReactionUpsert {
	u.SetExcluded(reaction.FieldIsLOL)
	return u
}

// SetIsOMG sets the "isOMG" field.
func (u *ReactionUpsert) SetIsOMG(v bool) *ReactionUpsert {
	u.Set(reaction.FieldIsOMG, v)
	return u
}

// UpdateIsOMG sets the "isOMG" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateIsOMG() *ReactionUpsert {
	u.SetExcluded(reaction.FieldIsOMG)
	return u
}

// SetIsCool sets the "isCool" field.
func (u *ReactionUpsert) SetIsCool(v bool) *ReactionUpsert {
	u.Set(reaction.FieldIsCool, v)
	return u
}

// UpdateIsCool sets the "isCool" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateIsCool() *ReactionUpsert {
	u.SetExcluded(reaction.FieldIsCool)
	return u
}

// SetIsNooo sets the "isNooo" field.
func (u *ReactionUpsert) SetIsNooo(v bool) *ReactionUpsert {
	u.Set(reaction.FieldIsNooo, v)
	return u
}

// UpdateIsNooo sets the "isNooo" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateIsNooo() *ReactionUpsert {
	u.SetExcluded(reaction.FieldIsNooo)
	return u
}

// SetIsDAMN sets the "isDAMN" field.
func (u *ReactionUpsert) SetIsDAMN(v bool) *ReactionUpsert {
	u.Set(reaction.FieldIsDAMN, v)
	return u
}

// UpdateIsDAMN sets the "isDAMN" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateIsDAMN() *ReactionUpsert {
	u.SetExcluded(reaction.FieldIsDAMN)
	return u
}

// SetTimeDewID sets the "time_dew_id" field.
func (u *ReactionUpsert) SetTimeDewID(v uint64) *ReactionUpsert {
	u.Set(reaction.FieldTimeDewID, v)
	return u
}

// UpdateTimeDewID sets the "time_dew_id" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateTimeDewID() *ReactionUpsert {
	u.SetExcluded(reaction.FieldTimeDewID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ReactionUpsert) SetUserID(v uint64) *ReactionUpsert {
	u.Set(reaction.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReactionUpsert) UpdateUserID() *ReactionUpsert {
	u.SetExcluded(reaction.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Reaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReactionUpsertOne) UpdateNewValues() *ReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(reaction.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReactionUpsertOne) Ignore() *ReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReactionUpsertOne) DoNothing() *ReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReactionCreate.OnConflict
// documentation for more info.
func (u *ReactionUpsertOne) Update(set func(*ReactionUpsert)) *ReactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ReactionUpsertOne) SetUpdateTime(v time.Time) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateUpdateTime() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIsLOL sets the "isLOL" field.
func (u *ReactionUpsertOne) SetIsLOL(v bool) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsLOL(v)
	})
}

// UpdateIsLOL sets the "isLOL" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateIsLOL() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsLOL()
	})
}

// SetIsOMG sets the "isOMG" field.
func (u *ReactionUpsertOne) SetIsOMG(v bool) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsOMG(v)
	})
}

// UpdateIsOMG sets the "isOMG" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateIsOMG() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsOMG()
	})
}

// SetIsCool sets the "isCool" field.
func (u *ReactionUpsertOne) SetIsCool(v bool) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsCool(v)
	})
}

// UpdateIsCool sets the "isCool" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateIsCool() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsCool()
	})
}

// SetIsNooo sets the "isNooo" field.
func (u *ReactionUpsertOne) SetIsNooo(v bool) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsNooo(v)
	})
}

// UpdateIsNooo sets the "isNooo" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateIsNooo() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsNooo()
	})
}

// SetIsDAMN sets the "isDAMN" field.
func (u *ReactionUpsertOne) SetIsDAMN(v bool) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsDAMN(v)
	})
}

// UpdateIsDAMN sets the "isDAMN" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateIsDAMN() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsDAMN()
	})
}

// SetTimeDewID sets the "time_dew_id" field.
func (u *ReactionUpsertOne) SetTimeDewID(v uint64) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetTimeDewID(v)
	})
}

// UpdateTimeDewID sets the "time_dew_id" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateTimeDewID() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateTimeDewID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReactionUpsertOne) SetUserID(v uint64) *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReactionUpsertOne) UpdateUserID() *ReactionUpsertOne {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *ReactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReactionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReactionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReactionCreateBulk is the builder for creating many Reaction entities in bulk.
type ReactionCreateBulk struct {
	config
	builders []*ReactionCreate
	conflict []sql.ConflictOption
}

// Save creates the Reaction entities in the database.
func (rcb *ReactionCreateBulk) Save(ctx context.Context) ([]*Reaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reaction, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReactionCreateBulk) SaveX(ctx context.Context) []*Reaction {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReactionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReactionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReactionUpsertBulk {
	rcb.conflict = opts
	return &ReactionUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReactionCreateBulk) OnConflictColumns(columns ...string) *ReactionUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReactionUpsertBulk{
		create: rcb,
	}
}

// ReactionUpsertBulk is the builder for "upsert"-ing
// a bulk of Reaction nodes.
type ReactionUpsertBulk struct {
	create *ReactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReactionUpsertBulk) UpdateNewValues() *ReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(reaction.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReactionUpsertBulk) Ignore() *ReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReactionUpsertBulk) DoNothing() *ReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReactionCreateBulk.OnConflict
// documentation for more info.
func (u *ReactionUpsertBulk) Update(set func(*ReactionUpsert)) *ReactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ReactionUpsertBulk) SetUpdateTime(v time.Time) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateUpdateTime() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIsLOL sets the "isLOL" field.
func (u *ReactionUpsertBulk) SetIsLOL(v bool) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsLOL(v)
	})
}

// UpdateIsLOL sets the "isLOL" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateIsLOL() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsLOL()
	})
}

// SetIsOMG sets the "isOMG" field.
func (u *ReactionUpsertBulk) SetIsOMG(v bool) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsOMG(v)
	})
}

// UpdateIsOMG sets the "isOMG" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateIsOMG() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsOMG()
	})
}

// SetIsCool sets the "isCool" field.
func (u *ReactionUpsertBulk) SetIsCool(v bool) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsCool(v)
	})
}

// UpdateIsCool sets the "isCool" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateIsCool() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsCool()
	})
}

// SetIsNooo sets the "isNooo" field.
func (u *ReactionUpsertBulk) SetIsNooo(v bool) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsNooo(v)
	})
}

// UpdateIsNooo sets the "isNooo" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateIsNooo() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsNooo()
	})
}

// SetIsDAMN sets the "isDAMN" field.
func (u *ReactionUpsertBulk) SetIsDAMN(v bool) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetIsDAMN(v)
	})
}

// UpdateIsDAMN sets the "isDAMN" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateIsDAMN() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateIsDAMN()
	})
}

// SetTimeDewID sets the "time_dew_id" field.
func (u *ReactionUpsertBulk) SetTimeDewID(v uint64) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetTimeDewID(v)
	})
}

// UpdateTimeDewID sets the "time_dew_id" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateTimeDewID() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateTimeDewID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReactionUpsertBulk) SetUserID(v uint64) *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReactionUpsertBulk) UpdateUserID() *ReactionUpsertBulk {
	return u.Update(func(s *ReactionUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *ReactionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
