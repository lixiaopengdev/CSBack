// Code generated by ent, DO NOT EDIT.

package setting

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// FriendsOnline applies equality check predicate on the "friends_online" field. It's identical to FriendsOnlineEQ.
func FriendsOnline(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriendsOnline), v))
	})
}

// TimeDewFromFriends applies equality check predicate on the "time_dew_from_friends" field. It's identical to TimeDewFromFriendsEQ.
func TimeDewFromFriends(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewFromFriends), v))
	})
}

// DetailedNotification applies equality check predicate on the "detailed_notification" field. It's identical to DetailedNotificationEQ.
func DetailedNotification(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailedNotification), v))
	})
}

// ReceiveFieldInvitation applies equality check predicate on the "receive_field_invitation" field. It's identical to ReceiveFieldInvitationEQ.
func ReceiveFieldInvitation(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveFieldInvitation), v))
	})
}

// SeeMyLocation applies equality check predicate on the "see_my_location" field. It's identical to SeeMyLocationEQ.
func SeeMyLocation(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeeMyLocation), v))
	})
}

// Camera applies equality check predicate on the "camera" field. It's identical to CameraEQ.
func Camera(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCamera), v))
	})
}

// Microphone applies equality check predicate on the "microphone" field. It's identical to MicrophoneEQ.
func Microphone(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMicrophone), v))
	})
}

// HealthData applies equality check predicate on the "health_data" field. It's identical to HealthDataEQ.
func HealthData(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealthData), v))
	})
}

// TimeDewLocation applies equality check predicate on the "time_dew_location" field. It's identical to TimeDewLocationEQ.
func TimeDewLocation(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewLocation), v))
	})
}

// TimeDewMicrophone applies equality check predicate on the "time_dew_microphone" field. It's identical to TimeDewMicrophoneEQ.
func TimeDewMicrophone(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewMicrophone), v))
	})
}

// TimeDewLora applies equality check predicate on the "time_dew_Lora" field. It's identical to TimeDewLoraEQ.
func TimeDewLora(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewLora), v))
	})
}

// PublicCollection applies equality check predicate on the "public_collection" field. It's identical to PublicCollectionEQ.
func PublicCollection(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicCollection), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// FriendsOnlineEQ applies the EQ predicate on the "friends_online" field.
func FriendsOnlineEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriendsOnline), v))
	})
}

// FriendsOnlineNEQ applies the NEQ predicate on the "friends_online" field.
func FriendsOnlineNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFriendsOnline), v))
	})
}

// FriendsOnlineIsNil applies the IsNil predicate on the "friends_online" field.
func FriendsOnlineIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFriendsOnline)))
	})
}

// FriendsOnlineNotNil applies the NotNil predicate on the "friends_online" field.
func FriendsOnlineNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFriendsOnline)))
	})
}

// TimeDewFromFriendsEQ applies the EQ predicate on the "time_dew_from_friends" field.
func TimeDewFromFriendsEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewFromFriends), v))
	})
}

// TimeDewFromFriendsNEQ applies the NEQ predicate on the "time_dew_from_friends" field.
func TimeDewFromFriendsNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeDewFromFriends), v))
	})
}

// TimeDewFromFriendsIsNil applies the IsNil predicate on the "time_dew_from_friends" field.
func TimeDewFromFriendsIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeDewFromFriends)))
	})
}

// TimeDewFromFriendsNotNil applies the NotNil predicate on the "time_dew_from_friends" field.
func TimeDewFromFriendsNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeDewFromFriends)))
	})
}

// DetailedNotificationEQ applies the EQ predicate on the "detailed_notification" field.
func DetailedNotificationEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailedNotification), v))
	})
}

// DetailedNotificationNEQ applies the NEQ predicate on the "detailed_notification" field.
func DetailedNotificationNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailedNotification), v))
	})
}

// DetailedNotificationIsNil applies the IsNil predicate on the "detailed_notification" field.
func DetailedNotificationIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetailedNotification)))
	})
}

// DetailedNotificationNotNil applies the NotNil predicate on the "detailed_notification" field.
func DetailedNotificationNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetailedNotification)))
	})
}

// ReceiveFieldInvitationEQ applies the EQ predicate on the "receive_field_invitation" field.
func ReceiveFieldInvitationEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveFieldInvitation), v))
	})
}

// ReceiveFieldInvitationNEQ applies the NEQ predicate on the "receive_field_invitation" field.
func ReceiveFieldInvitationNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiveFieldInvitation), v))
	})
}

// ReceiveFieldInvitationIsNil applies the IsNil predicate on the "receive_field_invitation" field.
func ReceiveFieldInvitationIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiveFieldInvitation)))
	})
}

// ReceiveFieldInvitationNotNil applies the NotNil predicate on the "receive_field_invitation" field.
func ReceiveFieldInvitationNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiveFieldInvitation)))
	})
}

// SeeMyLocationEQ applies the EQ predicate on the "see_my_location" field.
func SeeMyLocationEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeeMyLocation), v))
	})
}

// SeeMyLocationNEQ applies the NEQ predicate on the "see_my_location" field.
func SeeMyLocationNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeeMyLocation), v))
	})
}

// SeeMyLocationIsNil applies the IsNil predicate on the "see_my_location" field.
func SeeMyLocationIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSeeMyLocation)))
	})
}

// SeeMyLocationNotNil applies the NotNil predicate on the "see_my_location" field.
func SeeMyLocationNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSeeMyLocation)))
	})
}

// CameraEQ applies the EQ predicate on the "camera" field.
func CameraEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCamera), v))
	})
}

// CameraNEQ applies the NEQ predicate on the "camera" field.
func CameraNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCamera), v))
	})
}

// CameraIsNil applies the IsNil predicate on the "camera" field.
func CameraIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCamera)))
	})
}

// CameraNotNil applies the NotNil predicate on the "camera" field.
func CameraNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCamera)))
	})
}

// MicrophoneEQ applies the EQ predicate on the "microphone" field.
func MicrophoneEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMicrophone), v))
	})
}

// MicrophoneNEQ applies the NEQ predicate on the "microphone" field.
func MicrophoneNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMicrophone), v))
	})
}

// MicrophoneIsNil applies the IsNil predicate on the "microphone" field.
func MicrophoneIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMicrophone)))
	})
}

// MicrophoneNotNil applies the NotNil predicate on the "microphone" field.
func MicrophoneNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMicrophone)))
	})
}

// HealthDataEQ applies the EQ predicate on the "health_data" field.
func HealthDataEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealthData), v))
	})
}

// HealthDataNEQ applies the NEQ predicate on the "health_data" field.
func HealthDataNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHealthData), v))
	})
}

// HealthDataIsNil applies the IsNil predicate on the "health_data" field.
func HealthDataIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHealthData)))
	})
}

// HealthDataNotNil applies the NotNil predicate on the "health_data" field.
func HealthDataNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHealthData)))
	})
}

// TimeDewLocationEQ applies the EQ predicate on the "time_dew_location" field.
func TimeDewLocationEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewLocation), v))
	})
}

// TimeDewLocationNEQ applies the NEQ predicate on the "time_dew_location" field.
func TimeDewLocationNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeDewLocation), v))
	})
}

// TimeDewLocationIsNil applies the IsNil predicate on the "time_dew_location" field.
func TimeDewLocationIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeDewLocation)))
	})
}

// TimeDewLocationNotNil applies the NotNil predicate on the "time_dew_location" field.
func TimeDewLocationNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeDewLocation)))
	})
}

// TimeDewMicrophoneEQ applies the EQ predicate on the "time_dew_microphone" field.
func TimeDewMicrophoneEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewMicrophone), v))
	})
}

// TimeDewMicrophoneNEQ applies the NEQ predicate on the "time_dew_microphone" field.
func TimeDewMicrophoneNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeDewMicrophone), v))
	})
}

// TimeDewMicrophoneIsNil applies the IsNil predicate on the "time_dew_microphone" field.
func TimeDewMicrophoneIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeDewMicrophone)))
	})
}

// TimeDewMicrophoneNotNil applies the NotNil predicate on the "time_dew_microphone" field.
func TimeDewMicrophoneNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeDewMicrophone)))
	})
}

// TimeDewLoraEQ applies the EQ predicate on the "time_dew_Lora" field.
func TimeDewLoraEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeDewLora), v))
	})
}

// TimeDewLoraNEQ applies the NEQ predicate on the "time_dew_Lora" field.
func TimeDewLoraNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeDewLora), v))
	})
}

// TimeDewLoraIsNil applies the IsNil predicate on the "time_dew_Lora" field.
func TimeDewLoraIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeDewLora)))
	})
}

// TimeDewLoraNotNil applies the NotNil predicate on the "time_dew_Lora" field.
func TimeDewLoraNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeDewLora)))
	})
}

// PublicCollectionEQ applies the EQ predicate on the "public_collection" field.
func PublicCollectionEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicCollection), v))
	})
}

// PublicCollectionNEQ applies the NEQ predicate on the "public_collection" field.
func PublicCollectionNEQ(v bool) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicCollection), v))
	})
}

// PublicCollectionIsNil applies the IsNil predicate on the "public_collection" field.
func PublicCollectionIsNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublicCollection)))
	})
}

// PublicCollectionNotNil applies the NotNil predicate on the "public_collection" field.
func PublicCollectionNotNil() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublicCollection)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Setting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(func(s *sql.Selector) {
		p(s.Not())
	})
}
