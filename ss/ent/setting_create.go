// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/setting"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingCreate is the builder for creating a Setting entity.
type SettingCreate struct {
	config
	mutation *SettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (sc *SettingCreate) SetCreateTime(t time.Time) *SettingCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCreateTime(t *time.Time) *SettingCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SettingCreate) SetUpdateTime(t time.Time) *SettingCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SettingCreate) SetNillableUpdateTime(t *time.Time) *SettingCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetFriendsOnline sets the "friends_online" field.
func (sc *SettingCreate) SetFriendsOnline(b bool) *SettingCreate {
	sc.mutation.SetFriendsOnline(b)
	return sc
}

// SetNillableFriendsOnline sets the "friends_online" field if the given value is not nil.
func (sc *SettingCreate) SetNillableFriendsOnline(b *bool) *SettingCreate {
	if b != nil {
		sc.SetFriendsOnline(*b)
	}
	return sc
}

// SetTimeDewFromFriends sets the "time_dew_from_friends" field.
func (sc *SettingCreate) SetTimeDewFromFriends(b bool) *SettingCreate {
	sc.mutation.SetTimeDewFromFriends(b)
	return sc
}

// SetNillableTimeDewFromFriends sets the "time_dew_from_friends" field if the given value is not nil.
func (sc *SettingCreate) SetNillableTimeDewFromFriends(b *bool) *SettingCreate {
	if b != nil {
		sc.SetTimeDewFromFriends(*b)
	}
	return sc
}

// SetDetailedNotification sets the "detailed_notification" field.
func (sc *SettingCreate) SetDetailedNotification(b bool) *SettingCreate {
	sc.mutation.SetDetailedNotification(b)
	return sc
}

// SetNillableDetailedNotification sets the "detailed_notification" field if the given value is not nil.
func (sc *SettingCreate) SetNillableDetailedNotification(b *bool) *SettingCreate {
	if b != nil {
		sc.SetDetailedNotification(*b)
	}
	return sc
}

// SetReceiveFieldInvitation sets the "receive_field_invitation" field.
func (sc *SettingCreate) SetReceiveFieldInvitation(b bool) *SettingCreate {
	sc.mutation.SetReceiveFieldInvitation(b)
	return sc
}

// SetNillableReceiveFieldInvitation sets the "receive_field_invitation" field if the given value is not nil.
func (sc *SettingCreate) SetNillableReceiveFieldInvitation(b *bool) *SettingCreate {
	if b != nil {
		sc.SetReceiveFieldInvitation(*b)
	}
	return sc
}

// SetSeeMyLocation sets the "see_my_location" field.
func (sc *SettingCreate) SetSeeMyLocation(b bool) *SettingCreate {
	sc.mutation.SetSeeMyLocation(b)
	return sc
}

// SetNillableSeeMyLocation sets the "see_my_location" field if the given value is not nil.
func (sc *SettingCreate) SetNillableSeeMyLocation(b *bool) *SettingCreate {
	if b != nil {
		sc.SetSeeMyLocation(*b)
	}
	return sc
}

// SetCamera sets the "camera" field.
func (sc *SettingCreate) SetCamera(b bool) *SettingCreate {
	sc.mutation.SetCamera(b)
	return sc
}

// SetNillableCamera sets the "camera" field if the given value is not nil.
func (sc *SettingCreate) SetNillableCamera(b *bool) *SettingCreate {
	if b != nil {
		sc.SetCamera(*b)
	}
	return sc
}

// SetMicrophone sets the "microphone" field.
func (sc *SettingCreate) SetMicrophone(b bool) *SettingCreate {
	sc.mutation.SetMicrophone(b)
	return sc
}

// SetNillableMicrophone sets the "microphone" field if the given value is not nil.
func (sc *SettingCreate) SetNillableMicrophone(b *bool) *SettingCreate {
	if b != nil {
		sc.SetMicrophone(*b)
	}
	return sc
}

// SetHealthData sets the "health_data" field.
func (sc *SettingCreate) SetHealthData(b bool) *SettingCreate {
	sc.mutation.SetHealthData(b)
	return sc
}

// SetNillableHealthData sets the "health_data" field if the given value is not nil.
func (sc *SettingCreate) SetNillableHealthData(b *bool) *SettingCreate {
	if b != nil {
		sc.SetHealthData(*b)
	}
	return sc
}

// SetTimeDewLocation sets the "time_dew_location" field.
func (sc *SettingCreate) SetTimeDewLocation(b bool) *SettingCreate {
	sc.mutation.SetTimeDewLocation(b)
	return sc
}

// SetNillableTimeDewLocation sets the "time_dew_location" field if the given value is not nil.
func (sc *SettingCreate) SetNillableTimeDewLocation(b *bool) *SettingCreate {
	if b != nil {
		sc.SetTimeDewLocation(*b)
	}
	return sc
}

// SetTimeDewMicrophone sets the "time_dew_microphone" field.
func (sc *SettingCreate) SetTimeDewMicrophone(b bool) *SettingCreate {
	sc.mutation.SetTimeDewMicrophone(b)
	return sc
}

// SetNillableTimeDewMicrophone sets the "time_dew_microphone" field if the given value is not nil.
func (sc *SettingCreate) SetNillableTimeDewMicrophone(b *bool) *SettingCreate {
	if b != nil {
		sc.SetTimeDewMicrophone(*b)
	}
	return sc
}

// SetTimeDewLora sets the "time_dew_Lora" field.
func (sc *SettingCreate) SetTimeDewLora(b bool) *SettingCreate {
	sc.mutation.SetTimeDewLora(b)
	return sc
}

// SetNillableTimeDewLora sets the "time_dew_Lora" field if the given value is not nil.
func (sc *SettingCreate) SetNillableTimeDewLora(b *bool) *SettingCreate {
	if b != nil {
		sc.SetTimeDewLora(*b)
	}
	return sc
}

// SetPublicCollection sets the "public_collection" field.
func (sc *SettingCreate) SetPublicCollection(b bool) *SettingCreate {
	sc.mutation.SetPublicCollection(b)
	return sc
}

// SetNillablePublicCollection sets the "public_collection" field if the given value is not nil.
func (sc *SettingCreate) SetNillablePublicCollection(b *bool) *SettingCreate {
	if b != nil {
		sc.SetPublicCollection(*b)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SettingCreate) SetUserID(u uint64) *SettingCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetID sets the "id" field.
func (sc *SettingCreate) SetID(u uint64) *SettingCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *SettingCreate) SetOwnerID(id uint64) *SettingCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *SettingCreate) SetOwner(u *User) *SettingCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the SettingMutation object of the builder.
func (sc *SettingCreate) Mutation() *SettingMutation {
	return sc.mutation
}

// Save creates the Setting in the database.
func (sc *SettingCreate) Save(ctx context.Context) (*Setting, error) {
	var (
		err  error
		node *Setting
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Setting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingCreate) SaveX(ctx context.Context) *Setting {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := setting.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := setting.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.FriendsOnline(); !ok {
		v := setting.DefaultFriendsOnline
		sc.mutation.SetFriendsOnline(v)
	}
	if _, ok := sc.mutation.TimeDewFromFriends(); !ok {
		v := setting.DefaultTimeDewFromFriends
		sc.mutation.SetTimeDewFromFriends(v)
	}
	if _, ok := sc.mutation.DetailedNotification(); !ok {
		v := setting.DefaultDetailedNotification
		sc.mutation.SetDetailedNotification(v)
	}
	if _, ok := sc.mutation.ReceiveFieldInvitation(); !ok {
		v := setting.DefaultReceiveFieldInvitation
		sc.mutation.SetReceiveFieldInvitation(v)
	}
	if _, ok := sc.mutation.SeeMyLocation(); !ok {
		v := setting.DefaultSeeMyLocation
		sc.mutation.SetSeeMyLocation(v)
	}
	if _, ok := sc.mutation.Camera(); !ok {
		v := setting.DefaultCamera
		sc.mutation.SetCamera(v)
	}
	if _, ok := sc.mutation.Microphone(); !ok {
		v := setting.DefaultMicrophone
		sc.mutation.SetMicrophone(v)
	}
	if _, ok := sc.mutation.HealthData(); !ok {
		v := setting.DefaultHealthData
		sc.mutation.SetHealthData(v)
	}
	if _, ok := sc.mutation.TimeDewLocation(); !ok {
		v := setting.DefaultTimeDewLocation
		sc.mutation.SetTimeDewLocation(v)
	}
	if _, ok := sc.mutation.TimeDewMicrophone(); !ok {
		v := setting.DefaultTimeDewMicrophone
		sc.mutation.SetTimeDewMicrophone(v)
	}
	if _, ok := sc.mutation.TimeDewLora(); !ok {
		v := setting.DefaultTimeDewLora
		sc.mutation.SetTimeDewLora(v)
	}
	if _, ok := sc.mutation.PublicCollection(); !ok {
		v := setting.DefaultPublicCollection
		sc.mutation.SetPublicCollection(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Setting.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Setting.update_time"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Setting.user_id"`)}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Setting.owner"`)}
	}
	return nil
}

func (sc *SettingCreate) sqlSave(ctx context.Context) (*Setting, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sc *SettingCreate) createSpec() (*Setting, *sqlgraph.CreateSpec) {
	var (
		_node = &Setting{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: setting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(setting.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(setting.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.FriendsOnline(); ok {
		_spec.SetField(setting.FieldFriendsOnline, field.TypeBool, value)
		_node.FriendsOnline = value
	}
	if value, ok := sc.mutation.TimeDewFromFriends(); ok {
		_spec.SetField(setting.FieldTimeDewFromFriends, field.TypeBool, value)
		_node.TimeDewFromFriends = value
	}
	if value, ok := sc.mutation.DetailedNotification(); ok {
		_spec.SetField(setting.FieldDetailedNotification, field.TypeBool, value)
		_node.DetailedNotification = value
	}
	if value, ok := sc.mutation.ReceiveFieldInvitation(); ok {
		_spec.SetField(setting.FieldReceiveFieldInvitation, field.TypeBool, value)
		_node.ReceiveFieldInvitation = value
	}
	if value, ok := sc.mutation.SeeMyLocation(); ok {
		_spec.SetField(setting.FieldSeeMyLocation, field.TypeBool, value)
		_node.SeeMyLocation = value
	}
	if value, ok := sc.mutation.Camera(); ok {
		_spec.SetField(setting.FieldCamera, field.TypeBool, value)
		_node.Camera = value
	}
	if value, ok := sc.mutation.Microphone(); ok {
		_spec.SetField(setting.FieldMicrophone, field.TypeBool, value)
		_node.Microphone = value
	}
	if value, ok := sc.mutation.HealthData(); ok {
		_spec.SetField(setting.FieldHealthData, field.TypeBool, value)
		_node.HealthData = value
	}
	if value, ok := sc.mutation.TimeDewLocation(); ok {
		_spec.SetField(setting.FieldTimeDewLocation, field.TypeBool, value)
		_node.TimeDewLocation = value
	}
	if value, ok := sc.mutation.TimeDewMicrophone(); ok {
		_spec.SetField(setting.FieldTimeDewMicrophone, field.TypeBool, value)
		_node.TimeDewMicrophone = value
	}
	if value, ok := sc.mutation.TimeDewLora(); ok {
		_spec.SetField(setting.FieldTimeDewLora, field.TypeBool, value)
		_node.TimeDewLora = value
	}
	if value, ok := sc.mutation.PublicCollection(); ok {
		_spec.SetField(setting.FieldPublicCollection, field.TypeBool, value)
		_node.PublicCollection = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   setting.OwnerTable,
			Columns: []string{setting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sc *SettingCreate) OnConflict(opts ...sql.ConflictOption) *SettingUpsertOne {
	sc.conflict = opts
	return &SettingUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SettingCreate) OnConflictColumns(columns ...string) *SettingUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertOne{
		create: sc,
	}
}

type (
	// SettingUpsertOne is the builder for "upsert"-ing
	//  one Setting node.
	SettingUpsertOne struct {
		create *SettingCreate
	}

	// SettingUpsert is the "OnConflict" setter.
	SettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SettingUpsert) SetUpdateTime(v time.Time) *SettingUpsert {
	u.Set(setting.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SettingUpsert) UpdateUpdateTime() *SettingUpsert {
	u.SetExcluded(setting.FieldUpdateTime)
	return u
}

// SetFriendsOnline sets the "friends_online" field.
func (u *SettingUpsert) SetFriendsOnline(v bool) *SettingUpsert {
	u.Set(setting.FieldFriendsOnline, v)
	return u
}

// UpdateFriendsOnline sets the "friends_online" field to the value that was provided on create.
func (u *SettingUpsert) UpdateFriendsOnline() *SettingUpsert {
	u.SetExcluded(setting.FieldFriendsOnline)
	return u
}

// ClearFriendsOnline clears the value of the "friends_online" field.
func (u *SettingUpsert) ClearFriendsOnline() *SettingUpsert {
	u.SetNull(setting.FieldFriendsOnline)
	return u
}

// SetTimeDewFromFriends sets the "time_dew_from_friends" field.
func (u *SettingUpsert) SetTimeDewFromFriends(v bool) *SettingUpsert {
	u.Set(setting.FieldTimeDewFromFriends, v)
	return u
}

// UpdateTimeDewFromFriends sets the "time_dew_from_friends" field to the value that was provided on create.
func (u *SettingUpsert) UpdateTimeDewFromFriends() *SettingUpsert {
	u.SetExcluded(setting.FieldTimeDewFromFriends)
	return u
}

// ClearTimeDewFromFriends clears the value of the "time_dew_from_friends" field.
func (u *SettingUpsert) ClearTimeDewFromFriends() *SettingUpsert {
	u.SetNull(setting.FieldTimeDewFromFriends)
	return u
}

// SetDetailedNotification sets the "detailed_notification" field.
func (u *SettingUpsert) SetDetailedNotification(v bool) *SettingUpsert {
	u.Set(setting.FieldDetailedNotification, v)
	return u
}

// UpdateDetailedNotification sets the "detailed_notification" field to the value that was provided on create.
func (u *SettingUpsert) UpdateDetailedNotification() *SettingUpsert {
	u.SetExcluded(setting.FieldDetailedNotification)
	return u
}

// ClearDetailedNotification clears the value of the "detailed_notification" field.
func (u *SettingUpsert) ClearDetailedNotification() *SettingUpsert {
	u.SetNull(setting.FieldDetailedNotification)
	return u
}

// SetReceiveFieldInvitation sets the "receive_field_invitation" field.
func (u *SettingUpsert) SetReceiveFieldInvitation(v bool) *SettingUpsert {
	u.Set(setting.FieldReceiveFieldInvitation, v)
	return u
}

// UpdateReceiveFieldInvitation sets the "receive_field_invitation" field to the value that was provided on create.
func (u *SettingUpsert) UpdateReceiveFieldInvitation() *SettingUpsert {
	u.SetExcluded(setting.FieldReceiveFieldInvitation)
	return u
}

// ClearReceiveFieldInvitation clears the value of the "receive_field_invitation" field.
func (u *SettingUpsert) ClearReceiveFieldInvitation() *SettingUpsert {
	u.SetNull(setting.FieldReceiveFieldInvitation)
	return u
}

// SetSeeMyLocation sets the "see_my_location" field.
func (u *SettingUpsert) SetSeeMyLocation(v bool) *SettingUpsert {
	u.Set(setting.FieldSeeMyLocation, v)
	return u
}

// UpdateSeeMyLocation sets the "see_my_location" field to the value that was provided on create.
func (u *SettingUpsert) UpdateSeeMyLocation() *SettingUpsert {
	u.SetExcluded(setting.FieldSeeMyLocation)
	return u
}

// ClearSeeMyLocation clears the value of the "see_my_location" field.
func (u *SettingUpsert) ClearSeeMyLocation() *SettingUpsert {
	u.SetNull(setting.FieldSeeMyLocation)
	return u
}

// SetCamera sets the "camera" field.
func (u *SettingUpsert) SetCamera(v bool) *SettingUpsert {
	u.Set(setting.FieldCamera, v)
	return u
}

// UpdateCamera sets the "camera" field to the value that was provided on create.
func (u *SettingUpsert) UpdateCamera() *SettingUpsert {
	u.SetExcluded(setting.FieldCamera)
	return u
}

// ClearCamera clears the value of the "camera" field.
func (u *SettingUpsert) ClearCamera() *SettingUpsert {
	u.SetNull(setting.FieldCamera)
	return u
}

// SetMicrophone sets the "microphone" field.
func (u *SettingUpsert) SetMicrophone(v bool) *SettingUpsert {
	u.Set(setting.FieldMicrophone, v)
	return u
}

// UpdateMicrophone sets the "microphone" field to the value that was provided on create.
func (u *SettingUpsert) UpdateMicrophone() *SettingUpsert {
	u.SetExcluded(setting.FieldMicrophone)
	return u
}

// ClearMicrophone clears the value of the "microphone" field.
func (u *SettingUpsert) ClearMicrophone() *SettingUpsert {
	u.SetNull(setting.FieldMicrophone)
	return u
}

// SetHealthData sets the "health_data" field.
func (u *SettingUpsert) SetHealthData(v bool) *SettingUpsert {
	u.Set(setting.FieldHealthData, v)
	return u
}

// UpdateHealthData sets the "health_data" field to the value that was provided on create.
func (u *SettingUpsert) UpdateHealthData() *SettingUpsert {
	u.SetExcluded(setting.FieldHealthData)
	return u
}

// ClearHealthData clears the value of the "health_data" field.
func (u *SettingUpsert) ClearHealthData() *SettingUpsert {
	u.SetNull(setting.FieldHealthData)
	return u
}

// SetTimeDewLocation sets the "time_dew_location" field.
func (u *SettingUpsert) SetTimeDewLocation(v bool) *SettingUpsert {
	u.Set(setting.FieldTimeDewLocation, v)
	return u
}

// UpdateTimeDewLocation sets the "time_dew_location" field to the value that was provided on create.
func (u *SettingUpsert) UpdateTimeDewLocation() *SettingUpsert {
	u.SetExcluded(setting.FieldTimeDewLocation)
	return u
}

// ClearTimeDewLocation clears the value of the "time_dew_location" field.
func (u *SettingUpsert) ClearTimeDewLocation() *SettingUpsert {
	u.SetNull(setting.FieldTimeDewLocation)
	return u
}

// SetTimeDewMicrophone sets the "time_dew_microphone" field.
func (u *SettingUpsert) SetTimeDewMicrophone(v bool) *SettingUpsert {
	u.Set(setting.FieldTimeDewMicrophone, v)
	return u
}

// UpdateTimeDewMicrophone sets the "time_dew_microphone" field to the value that was provided on create.
func (u *SettingUpsert) UpdateTimeDewMicrophone() *SettingUpsert {
	u.SetExcluded(setting.FieldTimeDewMicrophone)
	return u
}

// ClearTimeDewMicrophone clears the value of the "time_dew_microphone" field.
func (u *SettingUpsert) ClearTimeDewMicrophone() *SettingUpsert {
	u.SetNull(setting.FieldTimeDewMicrophone)
	return u
}

// SetTimeDewLora sets the "time_dew_Lora" field.
func (u *SettingUpsert) SetTimeDewLora(v bool) *SettingUpsert {
	u.Set(setting.FieldTimeDewLora, v)
	return u
}

// UpdateTimeDewLora sets the "time_dew_Lora" field to the value that was provided on create.
func (u *SettingUpsert) UpdateTimeDewLora() *SettingUpsert {
	u.SetExcluded(setting.FieldTimeDewLora)
	return u
}

// ClearTimeDewLora clears the value of the "time_dew_Lora" field.
func (u *SettingUpsert) ClearTimeDewLora() *SettingUpsert {
	u.SetNull(setting.FieldTimeDewLora)
	return u
}

// SetPublicCollection sets the "public_collection" field.
func (u *SettingUpsert) SetPublicCollection(v bool) *SettingUpsert {
	u.Set(setting.FieldPublicCollection, v)
	return u
}

// UpdatePublicCollection sets the "public_collection" field to the value that was provided on create.
func (u *SettingUpsert) UpdatePublicCollection() *SettingUpsert {
	u.SetExcluded(setting.FieldPublicCollection)
	return u
}

// ClearPublicCollection clears the value of the "public_collection" field.
func (u *SettingUpsert) ClearPublicCollection() *SettingUpsert {
	u.SetNull(setting.FieldPublicCollection)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SettingUpsert) SetUserID(v uint64) *SettingUpsert {
	u.Set(setting.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SettingUpsert) UpdateUserID() *SettingUpsert {
	u.SetExcluded(setting.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SettingUpsertOne) UpdateNewValues() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(setting.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(setting.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SettingUpsertOne) Ignore() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertOne) DoNothing() *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreate.OnConflict
// documentation for more info.
func (u *SettingUpsertOne) Update(set func(*SettingUpsert)) *SettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SettingUpsertOne) SetUpdateTime(v time.Time) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateUpdateTime() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetFriendsOnline sets the "friends_online" field.
func (u *SettingUpsertOne) SetFriendsOnline(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetFriendsOnline(v)
	})
}

// UpdateFriendsOnline sets the "friends_online" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateFriendsOnline() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateFriendsOnline()
	})
}

// ClearFriendsOnline clears the value of the "friends_online" field.
func (u *SettingUpsertOne) ClearFriendsOnline() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearFriendsOnline()
	})
}

// SetTimeDewFromFriends sets the "time_dew_from_friends" field.
func (u *SettingUpsertOne) SetTimeDewFromFriends(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewFromFriends(v)
	})
}

// UpdateTimeDewFromFriends sets the "time_dew_from_friends" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateTimeDewFromFriends() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewFromFriends()
	})
}

// ClearTimeDewFromFriends clears the value of the "time_dew_from_friends" field.
func (u *SettingUpsertOne) ClearTimeDewFromFriends() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewFromFriends()
	})
}

// SetDetailedNotification sets the "detailed_notification" field.
func (u *SettingUpsertOne) SetDetailedNotification(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetDetailedNotification(v)
	})
}

// UpdateDetailedNotification sets the "detailed_notification" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateDetailedNotification() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateDetailedNotification()
	})
}

// ClearDetailedNotification clears the value of the "detailed_notification" field.
func (u *SettingUpsertOne) ClearDetailedNotification() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearDetailedNotification()
	})
}

// SetReceiveFieldInvitation sets the "receive_field_invitation" field.
func (u *SettingUpsertOne) SetReceiveFieldInvitation(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetReceiveFieldInvitation(v)
	})
}

// UpdateReceiveFieldInvitation sets the "receive_field_invitation" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateReceiveFieldInvitation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateReceiveFieldInvitation()
	})
}

// ClearReceiveFieldInvitation clears the value of the "receive_field_invitation" field.
func (u *SettingUpsertOne) ClearReceiveFieldInvitation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearReceiveFieldInvitation()
	})
}

// SetSeeMyLocation sets the "see_my_location" field.
func (u *SettingUpsertOne) SetSeeMyLocation(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetSeeMyLocation(v)
	})
}

// UpdateSeeMyLocation sets the "see_my_location" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateSeeMyLocation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSeeMyLocation()
	})
}

// ClearSeeMyLocation clears the value of the "see_my_location" field.
func (u *SettingUpsertOne) ClearSeeMyLocation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearSeeMyLocation()
	})
}

// SetCamera sets the "camera" field.
func (u *SettingUpsertOne) SetCamera(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetCamera(v)
	})
}

// UpdateCamera sets the "camera" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateCamera() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCamera()
	})
}

// ClearCamera clears the value of the "camera" field.
func (u *SettingUpsertOne) ClearCamera() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCamera()
	})
}

// SetMicrophone sets the "microphone" field.
func (u *SettingUpsertOne) SetMicrophone(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetMicrophone(v)
	})
}

// UpdateMicrophone sets the "microphone" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateMicrophone() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateMicrophone()
	})
}

// ClearMicrophone clears the value of the "microphone" field.
func (u *SettingUpsertOne) ClearMicrophone() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearMicrophone()
	})
}

// SetHealthData sets the "health_data" field.
func (u *SettingUpsertOne) SetHealthData(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetHealthData(v)
	})
}

// UpdateHealthData sets the "health_data" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateHealthData() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHealthData()
	})
}

// ClearHealthData clears the value of the "health_data" field.
func (u *SettingUpsertOne) ClearHealthData() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHealthData()
	})
}

// SetTimeDewLocation sets the "time_dew_location" field.
func (u *SettingUpsertOne) SetTimeDewLocation(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewLocation(v)
	})
}

// UpdateTimeDewLocation sets the "time_dew_location" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateTimeDewLocation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewLocation()
	})
}

// ClearTimeDewLocation clears the value of the "time_dew_location" field.
func (u *SettingUpsertOne) ClearTimeDewLocation() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewLocation()
	})
}

// SetTimeDewMicrophone sets the "time_dew_microphone" field.
func (u *SettingUpsertOne) SetTimeDewMicrophone(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewMicrophone(v)
	})
}

// UpdateTimeDewMicrophone sets the "time_dew_microphone" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateTimeDewMicrophone() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewMicrophone()
	})
}

// ClearTimeDewMicrophone clears the value of the "time_dew_microphone" field.
func (u *SettingUpsertOne) ClearTimeDewMicrophone() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewMicrophone()
	})
}

// SetTimeDewLora sets the "time_dew_Lora" field.
func (u *SettingUpsertOne) SetTimeDewLora(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewLora(v)
	})
}

// UpdateTimeDewLora sets the "time_dew_Lora" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateTimeDewLora() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewLora()
	})
}

// ClearTimeDewLora clears the value of the "time_dew_Lora" field.
func (u *SettingUpsertOne) ClearTimeDewLora() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewLora()
	})
}

// SetPublicCollection sets the "public_collection" field.
func (u *SettingUpsertOne) SetPublicCollection(v bool) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetPublicCollection(v)
	})
}

// UpdatePublicCollection sets the "public_collection" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdatePublicCollection() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdatePublicCollection()
	})
}

// ClearPublicCollection clears the value of the "public_collection" field.
func (u *SettingUpsertOne) ClearPublicCollection() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.ClearPublicCollection()
	})
}

// SetUserID sets the "user_id" field.
func (u *SettingUpsertOne) SetUserID(v uint64) *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SettingUpsertOne) UpdateUserID() *SettingUpsertOne {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SettingUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SettingUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SettingCreateBulk is the builder for creating many Setting entities in bulk.
type SettingCreateBulk struct {
	config
	builders []*SettingCreate
	conflict []sql.ConflictOption
}

// Save creates the Setting entities in the database.
func (scb *SettingCreateBulk) Save(ctx context.Context) ([]*Setting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Setting, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingCreateBulk) SaveX(ctx context.Context) []*Setting {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scb *SettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *SettingUpsertBulk {
	scb.conflict = opts
	return &SettingUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SettingCreateBulk) OnConflictColumns(columns ...string) *SettingUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SettingUpsertBulk{
		create: scb,
	}
}

// SettingUpsertBulk is the builder for "upsert"-ing
// a bulk of Setting nodes.
type SettingUpsertBulk struct {
	create *SettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(setting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SettingUpsertBulk) UpdateNewValues() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(setting.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(setting.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SettingUpsertBulk) Ignore() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingUpsertBulk) DoNothing() *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingCreateBulk.OnConflict
// documentation for more info.
func (u *SettingUpsertBulk) Update(set func(*SettingUpsert)) *SettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SettingUpsertBulk) SetUpdateTime(v time.Time) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateUpdateTime() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetFriendsOnline sets the "friends_online" field.
func (u *SettingUpsertBulk) SetFriendsOnline(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetFriendsOnline(v)
	})
}

// UpdateFriendsOnline sets the "friends_online" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateFriendsOnline() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateFriendsOnline()
	})
}

// ClearFriendsOnline clears the value of the "friends_online" field.
func (u *SettingUpsertBulk) ClearFriendsOnline() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearFriendsOnline()
	})
}

// SetTimeDewFromFriends sets the "time_dew_from_friends" field.
func (u *SettingUpsertBulk) SetTimeDewFromFriends(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewFromFriends(v)
	})
}

// UpdateTimeDewFromFriends sets the "time_dew_from_friends" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateTimeDewFromFriends() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewFromFriends()
	})
}

// ClearTimeDewFromFriends clears the value of the "time_dew_from_friends" field.
func (u *SettingUpsertBulk) ClearTimeDewFromFriends() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewFromFriends()
	})
}

// SetDetailedNotification sets the "detailed_notification" field.
func (u *SettingUpsertBulk) SetDetailedNotification(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetDetailedNotification(v)
	})
}

// UpdateDetailedNotification sets the "detailed_notification" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateDetailedNotification() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateDetailedNotification()
	})
}

// ClearDetailedNotification clears the value of the "detailed_notification" field.
func (u *SettingUpsertBulk) ClearDetailedNotification() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearDetailedNotification()
	})
}

// SetReceiveFieldInvitation sets the "receive_field_invitation" field.
func (u *SettingUpsertBulk) SetReceiveFieldInvitation(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetReceiveFieldInvitation(v)
	})
}

// UpdateReceiveFieldInvitation sets the "receive_field_invitation" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateReceiveFieldInvitation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateReceiveFieldInvitation()
	})
}

// ClearReceiveFieldInvitation clears the value of the "receive_field_invitation" field.
func (u *SettingUpsertBulk) ClearReceiveFieldInvitation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearReceiveFieldInvitation()
	})
}

// SetSeeMyLocation sets the "see_my_location" field.
func (u *SettingUpsertBulk) SetSeeMyLocation(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetSeeMyLocation(v)
	})
}

// UpdateSeeMyLocation sets the "see_my_location" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateSeeMyLocation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateSeeMyLocation()
	})
}

// ClearSeeMyLocation clears the value of the "see_my_location" field.
func (u *SettingUpsertBulk) ClearSeeMyLocation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearSeeMyLocation()
	})
}

// SetCamera sets the "camera" field.
func (u *SettingUpsertBulk) SetCamera(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetCamera(v)
	})
}

// UpdateCamera sets the "camera" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateCamera() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateCamera()
	})
}

// ClearCamera clears the value of the "camera" field.
func (u *SettingUpsertBulk) ClearCamera() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearCamera()
	})
}

// SetMicrophone sets the "microphone" field.
func (u *SettingUpsertBulk) SetMicrophone(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetMicrophone(v)
	})
}

// UpdateMicrophone sets the "microphone" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateMicrophone() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateMicrophone()
	})
}

// ClearMicrophone clears the value of the "microphone" field.
func (u *SettingUpsertBulk) ClearMicrophone() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearMicrophone()
	})
}

// SetHealthData sets the "health_data" field.
func (u *SettingUpsertBulk) SetHealthData(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetHealthData(v)
	})
}

// UpdateHealthData sets the "health_data" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateHealthData() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateHealthData()
	})
}

// ClearHealthData clears the value of the "health_data" field.
func (u *SettingUpsertBulk) ClearHealthData() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearHealthData()
	})
}

// SetTimeDewLocation sets the "time_dew_location" field.
func (u *SettingUpsertBulk) SetTimeDewLocation(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewLocation(v)
	})
}

// UpdateTimeDewLocation sets the "time_dew_location" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateTimeDewLocation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewLocation()
	})
}

// ClearTimeDewLocation clears the value of the "time_dew_location" field.
func (u *SettingUpsertBulk) ClearTimeDewLocation() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewLocation()
	})
}

// SetTimeDewMicrophone sets the "time_dew_microphone" field.
func (u *SettingUpsertBulk) SetTimeDewMicrophone(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewMicrophone(v)
	})
}

// UpdateTimeDewMicrophone sets the "time_dew_microphone" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateTimeDewMicrophone() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewMicrophone()
	})
}

// ClearTimeDewMicrophone clears the value of the "time_dew_microphone" field.
func (u *SettingUpsertBulk) ClearTimeDewMicrophone() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewMicrophone()
	})
}

// SetTimeDewLora sets the "time_dew_Lora" field.
func (u *SettingUpsertBulk) SetTimeDewLora(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetTimeDewLora(v)
	})
}

// UpdateTimeDewLora sets the "time_dew_Lora" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateTimeDewLora() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateTimeDewLora()
	})
}

// ClearTimeDewLora clears the value of the "time_dew_Lora" field.
func (u *SettingUpsertBulk) ClearTimeDewLora() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearTimeDewLora()
	})
}

// SetPublicCollection sets the "public_collection" field.
func (u *SettingUpsertBulk) SetPublicCollection(v bool) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetPublicCollection(v)
	})
}

// UpdatePublicCollection sets the "public_collection" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdatePublicCollection() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdatePublicCollection()
	})
}

// ClearPublicCollection clears the value of the "public_collection" field.
func (u *SettingUpsertBulk) ClearPublicCollection() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.ClearPublicCollection()
	})
}

// SetUserID sets the "user_id" field.
func (u *SettingUpsertBulk) SetUserID(v uint64) *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SettingUpsertBulk) UpdateUserID() *SettingUpsertBulk {
	return u.Update(func(s *SettingUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
