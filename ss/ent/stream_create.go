// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/stream"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StreamCreate is the builder for creating a Stream entity.
type StreamCreate struct {
	config
	mutation *StreamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (sc *StreamCreate) SetCreateTime(t time.Time) *StreamCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *StreamCreate) SetNillableCreateTime(t *time.Time) *StreamCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *StreamCreate) SetUpdateTime(t time.Time) *StreamCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *StreamCreate) SetNillableUpdateTime(t *time.Time) *StreamCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StreamCreate) SetName(s string) *StreamCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetType sets the "type" field.
func (sc *StreamCreate) SetType(s stream.Type) *StreamCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetStreamURL sets the "stream_url" field.
func (sc *StreamCreate) SetStreamURL(s string) *StreamCreate {
	sc.mutation.SetStreamURL(s)
	return sc
}

// SetNillableStreamURL sets the "stream_url" field if the given value is not nil.
func (sc *StreamCreate) SetNillableStreamURL(s *string) *StreamCreate {
	if s != nil {
		sc.SetStreamURL(*s)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *StreamCreate) SetUserID(u uint64) *StreamCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetID sets the "id" field.
func (sc *StreamCreate) SetID(u uint64) *StreamCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *StreamCreate) SetOwnerID(id uint64) *StreamCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *StreamCreate) SetOwner(u *User) *StreamCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (sc *StreamCreate) Mutation() *StreamMutation {
	return sc.mutation
}

// Save creates the Stream in the database.
func (sc *StreamCreate) Save(ctx context.Context) (*Stream, error) {
	var (
		err  error
		node *Stream
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StreamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Stream)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StreamMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StreamCreate) SaveX(ctx context.Context) *Stream {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StreamCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StreamCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StreamCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := stream.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := stream.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StreamCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Stream.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Stream.update_time"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Stream.name"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Stream.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Stream.user_id"`)}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Stream.owner"`)}
	}
	return nil
}

func (sc *StreamCreate) sqlSave(ctx context.Context) (*Stream, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sc *StreamCreate) createSpec() (*Stream, *sqlgraph.CreateSpec) {
	var (
		_node = &Stream{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stream.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stream.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(stream.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(stream.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(stream.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.StreamURL(); ok {
		_spec.SetField(stream.FieldStreamURL, field.TypeString, value)
		_node.StreamURL = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.OwnerTable,
			Columns: []string{stream.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stream.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StreamUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sc *StreamCreate) OnConflict(opts ...sql.ConflictOption) *StreamUpsertOne {
	sc.conflict = opts
	return &StreamUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stream.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StreamCreate) OnConflictColumns(columns ...string) *StreamUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StreamUpsertOne{
		create: sc,
	}
}

type (
	// StreamUpsertOne is the builder for "upsert"-ing
	//  one Stream node.
	StreamUpsertOne struct {
		create *StreamCreate
	}

	// StreamUpsert is the "OnConflict" setter.
	StreamUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *StreamUpsert) SetUpdateTime(v time.Time) *StreamUpsert {
	u.Set(stream.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *StreamUpsert) UpdateUpdateTime() *StreamUpsert {
	u.SetExcluded(stream.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *StreamUpsert) SetName(v string) *StreamUpsert {
	u.Set(stream.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StreamUpsert) UpdateName() *StreamUpsert {
	u.SetExcluded(stream.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *StreamUpsert) SetType(v stream.Type) *StreamUpsert {
	u.Set(stream.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StreamUpsert) UpdateType() *StreamUpsert {
	u.SetExcluded(stream.FieldType)
	return u
}

// SetStreamURL sets the "stream_url" field.
func (u *StreamUpsert) SetStreamURL(v string) *StreamUpsert {
	u.Set(stream.FieldStreamURL, v)
	return u
}

// UpdateStreamURL sets the "stream_url" field to the value that was provided on create.
func (u *StreamUpsert) UpdateStreamURL() *StreamUpsert {
	u.SetExcluded(stream.FieldStreamURL)
	return u
}

// ClearStreamURL clears the value of the "stream_url" field.
func (u *StreamUpsert) ClearStreamURL() *StreamUpsert {
	u.SetNull(stream.FieldStreamURL)
	return u
}

// SetUserID sets the "user_id" field.
func (u *StreamUpsert) SetUserID(v uint64) *StreamUpsert {
	u.Set(stream.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StreamUpsert) UpdateUserID() *StreamUpsert {
	u.SetExcluded(stream.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Stream.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stream.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StreamUpsertOne) UpdateNewValues() *StreamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(stream.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(stream.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stream.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StreamUpsertOne) Ignore() *StreamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StreamUpsertOne) DoNothing() *StreamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StreamCreate.OnConflict
// documentation for more info.
func (u *StreamUpsertOne) Update(set func(*StreamUpsert)) *StreamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StreamUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *StreamUpsertOne) SetUpdateTime(v time.Time) *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *StreamUpsertOne) UpdateUpdateTime() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *StreamUpsertOne) SetName(v string) *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StreamUpsertOne) UpdateName() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *StreamUpsertOne) SetType(v stream.Type) *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StreamUpsertOne) UpdateType() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateType()
	})
}

// SetStreamURL sets the "stream_url" field.
func (u *StreamUpsertOne) SetStreamURL(v string) *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.SetStreamURL(v)
	})
}

// UpdateStreamURL sets the "stream_url" field to the value that was provided on create.
func (u *StreamUpsertOne) UpdateStreamURL() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateStreamURL()
	})
}

// ClearStreamURL clears the value of the "stream_url" field.
func (u *StreamUpsertOne) ClearStreamURL() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.ClearStreamURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *StreamUpsertOne) SetUserID(v uint64) *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StreamUpsertOne) UpdateUserID() *StreamUpsertOne {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *StreamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StreamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StreamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StreamUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StreamUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StreamCreateBulk is the builder for creating many Stream entities in bulk.
type StreamCreateBulk struct {
	config
	builders []*StreamCreate
	conflict []sql.ConflictOption
}

// Save creates the Stream entities in the database.
func (scb *StreamCreateBulk) Save(ctx context.Context) ([]*Stream, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stream, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StreamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StreamCreateBulk) SaveX(ctx context.Context) []*Stream {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StreamCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StreamCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stream.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StreamUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scb *StreamCreateBulk) OnConflict(opts ...sql.ConflictOption) *StreamUpsertBulk {
	scb.conflict = opts
	return &StreamUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stream.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StreamCreateBulk) OnConflictColumns(columns ...string) *StreamUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StreamUpsertBulk{
		create: scb,
	}
}

// StreamUpsertBulk is the builder for "upsert"-ing
// a bulk of Stream nodes.
type StreamUpsertBulk struct {
	create *StreamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Stream.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stream.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StreamUpsertBulk) UpdateNewValues() *StreamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(stream.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(stream.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stream.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StreamUpsertBulk) Ignore() *StreamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StreamUpsertBulk) DoNothing() *StreamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StreamCreateBulk.OnConflict
// documentation for more info.
func (u *StreamUpsertBulk) Update(set func(*StreamUpsert)) *StreamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StreamUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *StreamUpsertBulk) SetUpdateTime(v time.Time) *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *StreamUpsertBulk) UpdateUpdateTime() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *StreamUpsertBulk) SetName(v string) *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StreamUpsertBulk) UpdateName() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *StreamUpsertBulk) SetType(v stream.Type) *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StreamUpsertBulk) UpdateType() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateType()
	})
}

// SetStreamURL sets the "stream_url" field.
func (u *StreamUpsertBulk) SetStreamURL(v string) *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.SetStreamURL(v)
	})
}

// UpdateStreamURL sets the "stream_url" field to the value that was provided on create.
func (u *StreamUpsertBulk) UpdateStreamURL() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateStreamURL()
	})
}

// ClearStreamURL clears the value of the "stream_url" field.
func (u *StreamUpsertBulk) ClearStreamURL() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.ClearStreamURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *StreamUpsertBulk) SetUserID(v uint64) *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *StreamUpsertBulk) UpdateUserID() *StreamUpsertBulk {
	return u.Update(func(s *StreamUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *StreamUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StreamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StreamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StreamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
