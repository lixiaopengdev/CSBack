// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/stream"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StreamUpdate is the builder for updating Stream entities.
type StreamUpdate struct {
	config
	hooks    []Hook
	mutation *StreamMutation
}

// Where appends a list predicates to the StreamUpdate builder.
func (su *StreamUpdate) Where(ps ...predicate.Stream) *StreamUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *StreamUpdate) SetUpdateTime(t time.Time) *StreamUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetName sets the "name" field.
func (su *StreamUpdate) SetName(s string) *StreamUpdate {
	su.mutation.SetName(s)
	return su
}

// SetType sets the "type" field.
func (su *StreamUpdate) SetType(s stream.Type) *StreamUpdate {
	su.mutation.SetType(s)
	return su
}

// SetStreamURL sets the "stream_url" field.
func (su *StreamUpdate) SetStreamURL(s string) *StreamUpdate {
	su.mutation.SetStreamURL(s)
	return su
}

// SetNillableStreamURL sets the "stream_url" field if the given value is not nil.
func (su *StreamUpdate) SetNillableStreamURL(s *string) *StreamUpdate {
	if s != nil {
		su.SetStreamURL(*s)
	}
	return su
}

// ClearStreamURL clears the value of the "stream_url" field.
func (su *StreamUpdate) ClearStreamURL() *StreamUpdate {
	su.mutation.ClearStreamURL()
	return su
}

// SetUserID sets the "user_id" field.
func (su *StreamUpdate) SetUserID(u uint64) *StreamUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *StreamUpdate) SetOwnerID(id uint64) *StreamUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *StreamUpdate) SetOwner(u *User) *StreamUpdate {
	return su.SetOwnerID(u.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (su *StreamUpdate) Mutation() *StreamMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *StreamUpdate) ClearOwner() *StreamUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StreamUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StreamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StreamUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StreamUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StreamUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StreamUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := stream.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StreamUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	if _, ok := su.mutation.OwnerID(); su.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stream.owner"`)
	}
	return nil
}

func (su *StreamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stream.Table,
			Columns: stream.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stream.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(stream.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(stream.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.StreamURL(); ok {
		_spec.SetField(stream.FieldStreamURL, field.TypeString, value)
	}
	if su.mutation.StreamURLCleared() {
		_spec.ClearField(stream.FieldStreamURL, field.TypeString)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.OwnerTable,
			Columns: []string{stream.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.OwnerTable,
			Columns: []string{stream.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StreamUpdateOne is the builder for updating a single Stream entity.
type StreamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StreamMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *StreamUpdateOne) SetUpdateTime(t time.Time) *StreamUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetName sets the "name" field.
func (suo *StreamUpdateOne) SetName(s string) *StreamUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetType sets the "type" field.
func (suo *StreamUpdateOne) SetType(s stream.Type) *StreamUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetStreamURL sets the "stream_url" field.
func (suo *StreamUpdateOne) SetStreamURL(s string) *StreamUpdateOne {
	suo.mutation.SetStreamURL(s)
	return suo
}

// SetNillableStreamURL sets the "stream_url" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableStreamURL(s *string) *StreamUpdateOne {
	if s != nil {
		suo.SetStreamURL(*s)
	}
	return suo
}

// ClearStreamURL clears the value of the "stream_url" field.
func (suo *StreamUpdateOne) ClearStreamURL() *StreamUpdateOne {
	suo.mutation.ClearStreamURL()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *StreamUpdateOne) SetUserID(u uint64) *StreamUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *StreamUpdateOne) SetOwnerID(id uint64) *StreamUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *StreamUpdateOne) SetOwner(u *User) *StreamUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (suo *StreamUpdateOne) Mutation() *StreamMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *StreamUpdateOne) ClearOwner() *StreamUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StreamUpdateOne) Select(field string, fields ...string) *StreamUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stream entity.
func (suo *StreamUpdateOne) Save(ctx context.Context) (*Stream, error) {
	var (
		err  error
		node *Stream
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StreamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Stream)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StreamMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StreamUpdateOne) SaveX(ctx context.Context) *Stream {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StreamUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StreamUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StreamUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := stream.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StreamUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	if _, ok := suo.mutation.OwnerID(); suo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stream.owner"`)
	}
	return nil
}

func (suo *StreamUpdateOne) sqlSave(ctx context.Context) (_node *Stream, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stream.Table,
			Columns: stream.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stream.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stream.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stream.FieldID)
		for _, f := range fields {
			if !stream.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stream.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(stream.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(stream.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.StreamURL(); ok {
		_spec.SetField(stream.FieldStreamURL, field.TypeString, value)
	}
	if suo.mutation.StreamURLCleared() {
		_spec.ClearField(stream.FieldStreamURL, field.TypeString)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.OwnerTable,
			Columns: []string{stream.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.OwnerTable,
			Columns: []string{stream.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stream{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
