// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TimeDew is the model entity for the TimeDew schema.
type TimeDew struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// timedew名称
	Name string `json:"name,omitempty"`
	// timedew描述
	Description string `json:"description,omitempty"`
	// timedew原始数据
	RawData []string `json:"raw_data,omitempty"`
	// timedew语音数据
	Speechs string `json:"speechs,omitempty"`
	// timedew位置数据
	Place string `json:"place,omitempty"`
	// timedew生成内容
	GeneratedContent string `json:"generated_content,omitempty"`
	// timedew生成过程中用到的Prompt方法顺序
	PromptSeq string `json:"prompt_seq,omitempty"`
	// timedew生成过程中用到的Prompt全文本
	PromptSeqFullText string `json:"prompt_seq_full_text,omitempty"`
	// timedew生成过程中用到的labels
	JoinedLabel string `json:"joined_label,omitempty"`
	// 原始图片
	PicURL string `json:"pic_url,omitempty"`
	// 缩略图
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// 资源
	ResourceURL string `json:"resource_url,omitempty"`
	// timedew状态
	Status timedew.Status `json:"status,omitempty"`
	// timedew类型
	Type timedew.Type `json:"type,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// CsFieldID holds the value of the "cs_field_id" field.
	CsFieldID uint64 `json:"cs_field_id,omitempty"`
	// TargetID holds the value of the "target_id" field.
	TargetID uint64 `json:"target_id,omitempty"`
	// Members holds the value of the "members" field.
	Members []string `json:"members,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimeDewQuery when eager-loading is set.
	Edges TimeDewEdges `json:"edges"`
}

// TimeDewEdges holds the relations/edges for other nodes in the graph.
type TimeDewEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// ReactionUser holds the value of the reaction_user edge.
	ReactionUser []*User `json:"reaction_user,omitempty"`
	// Reactions holds the value of the reactions edge.
	Reactions []*Reaction `json:"reactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimeDewEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ReactionUserOrErr returns the ReactionUser value or an error if the edge
// was not loaded in eager-loading.
func (e TimeDewEdges) ReactionUserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.ReactionUser, nil
	}
	return nil, &NotLoadedError{edge: "reaction_user"}
}

// ReactionsOrErr returns the Reactions value or an error if the edge
// was not loaded in eager-loading.
func (e TimeDewEdges) ReactionsOrErr() ([]*Reaction, error) {
	if e.loadedTypes[2] {
		return e.Reactions, nil
	}
	return nil, &NotLoadedError{edge: "reactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeDew) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timedew.FieldRawData, timedew.FieldMembers:
			values[i] = new([]byte)
		case timedew.FieldID, timedew.FieldUserID, timedew.FieldCsFieldID, timedew.FieldTargetID:
			values[i] = new(sql.NullInt64)
		case timedew.FieldName, timedew.FieldDescription, timedew.FieldSpeechs, timedew.FieldPlace, timedew.FieldGeneratedContent, timedew.FieldPromptSeq, timedew.FieldPromptSeqFullText, timedew.FieldJoinedLabel, timedew.FieldPicURL, timedew.FieldThumbnailURL, timedew.FieldResourceURL, timedew.FieldStatus, timedew.FieldType:
			values[i] = new(sql.NullString)
		case timedew.FieldCreateTime, timedew.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TimeDew", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeDew fields.
func (td *TimeDew) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timedew.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = uint64(value.Int64)
		case timedew.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				td.CreateTime = value.Time
			}
		case timedew.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				td.UpdateTime = value.Time
			}
		case timedew.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				td.Name = value.String
			}
		case timedew.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				td.Description = value.String
			}
		case timedew.FieldRawData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.RawData); err != nil {
					return fmt.Errorf("unmarshal field raw_data: %w", err)
				}
			}
		case timedew.FieldSpeechs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speechs", values[i])
			} else if value.Valid {
				td.Speechs = value.String
			}
		case timedew.FieldPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place", values[i])
			} else if value.Valid {
				td.Place = value.String
			}
		case timedew.FieldGeneratedContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field generated_content", values[i])
			} else if value.Valid {
				td.GeneratedContent = value.String
			}
		case timedew.FieldPromptSeq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_seq", values[i])
			} else if value.Valid {
				td.PromptSeq = value.String
			}
		case timedew.FieldPromptSeqFullText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_seq_full_text", values[i])
			} else if value.Valid {
				td.PromptSeqFullText = value.String
			}
		case timedew.FieldJoinedLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field joined_label", values[i])
			} else if value.Valid {
				td.JoinedLabel = value.String
			}
		case timedew.FieldPicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic_url", values[i])
			} else if value.Valid {
				td.PicURL = value.String
			}
		case timedew.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				td.ThumbnailURL = value.String
			}
		case timedew.FieldResourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_url", values[i])
			} else if value.Valid {
				td.ResourceURL = value.String
			}
		case timedew.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				td.Status = timedew.Status(value.String)
			}
		case timedew.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				td.Type = timedew.Type(value.String)
			}
		case timedew.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				td.UserID = uint64(value.Int64)
			}
		case timedew.FieldCsFieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cs_field_id", values[i])
			} else if value.Valid {
				td.CsFieldID = uint64(value.Int64)
			}
		case timedew.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				td.TargetID = uint64(value.Int64)
			}
		case timedew.FieldMembers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field members", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Members); err != nil {
					return fmt.Errorf("unmarshal field members: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the TimeDew entity.
func (td *TimeDew) QueryOwner() *UserQuery {
	return (&TimeDewClient{config: td.config}).QueryOwner(td)
}

// QueryReactionUser queries the "reaction_user" edge of the TimeDew entity.
func (td *TimeDew) QueryReactionUser() *UserQuery {
	return (&TimeDewClient{config: td.config}).QueryReactionUser(td)
}

// QueryReactions queries the "reactions" edge of the TimeDew entity.
func (td *TimeDew) QueryReactions() *ReactionQuery {
	return (&TimeDewClient{config: td.config}).QueryReactions(td)
}

// Update returns a builder for updating this TimeDew.
// Note that you need to call TimeDew.Unwrap() before calling this method if this TimeDew
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TimeDew) Update() *TimeDewUpdateOne {
	return (&TimeDewClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the TimeDew entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TimeDew) Unwrap() *TimeDew {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeDew is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TimeDew) String() string {
	var builder strings.Builder
	builder.WriteString("TimeDew(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("create_time=")
	builder.WriteString(td.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(td.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(td.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(td.Description)
	builder.WriteString(", ")
	builder.WriteString("raw_data=")
	builder.WriteString(fmt.Sprintf("%v", td.RawData))
	builder.WriteString(", ")
	builder.WriteString("speechs=")
	builder.WriteString(td.Speechs)
	builder.WriteString(", ")
	builder.WriteString("place=")
	builder.WriteString(td.Place)
	builder.WriteString(", ")
	builder.WriteString("generated_content=")
	builder.WriteString(td.GeneratedContent)
	builder.WriteString(", ")
	builder.WriteString("prompt_seq=")
	builder.WriteString(td.PromptSeq)
	builder.WriteString(", ")
	builder.WriteString("prompt_seq_full_text=")
	builder.WriteString(td.PromptSeqFullText)
	builder.WriteString(", ")
	builder.WriteString("joined_label=")
	builder.WriteString(td.JoinedLabel)
	builder.WriteString(", ")
	builder.WriteString("pic_url=")
	builder.WriteString(td.PicURL)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(td.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("resource_url=")
	builder.WriteString(td.ResourceURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", td.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", td.Type))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", td.UserID))
	builder.WriteString(", ")
	builder.WriteString("cs_field_id=")
	builder.WriteString(fmt.Sprintf("%v", td.CsFieldID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", td.TargetID))
	builder.WriteString(", ")
	builder.WriteString("members=")
	builder.WriteString(fmt.Sprintf("%v", td.Members))
	builder.WriteByte(')')
	return builder.String()
}

// TimeDews is a parsable slice of TimeDew.
type TimeDews []*TimeDew

func (td TimeDews) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
