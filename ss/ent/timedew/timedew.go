// Code generated by ent, DO NOT EDIT.

package timedew

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the timedew type in the database.
	Label = "time_dew"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRawData holds the string denoting the raw_data field in the database.
	FieldRawData = "raw_data"
	// FieldSpeechs holds the string denoting the speechs field in the database.
	FieldSpeechs = "speechs"
	// FieldPlace holds the string denoting the place field in the database.
	FieldPlace = "place"
	// FieldGeneratedContent holds the string denoting the generated_content field in the database.
	FieldGeneratedContent = "generated_content"
	// FieldPromptSeq holds the string denoting the prompt_seq field in the database.
	FieldPromptSeq = "prompt_seq"
	// FieldPromptSeqFullText holds the string denoting the prompt_seq_full_text field in the database.
	FieldPromptSeqFullText = "prompt_seq_full_text"
	// FieldJoinedLabel holds the string denoting the joined_label field in the database.
	FieldJoinedLabel = "joined_label"
	// FieldPicURL holds the string denoting the pic_url field in the database.
	FieldPicURL = "pic_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldResourceURL holds the string denoting the resource_url field in the database.
	FieldResourceURL = "resource_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCsFieldID holds the string denoting the cs_field_id field in the database.
	FieldCsFieldID = "cs_field_id"
	// FieldTargetID holds the string denoting the target_id field in the database.
	FieldTargetID = "target_id"
	// FieldMembers holds the string denoting the members field in the database.
	FieldMembers = "members"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeReactionUser holds the string denoting the reaction_user edge name in mutations.
	EdgeReactionUser = "reaction_user"
	// EdgeReactions holds the string denoting the reactions edge name in mutations.
	EdgeReactions = "reactions"
	// Table holds the table name of the timedew in the database.
	Table = "time_dews"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "time_dews"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
	// ReactionUserTable is the table that holds the reaction_user relation/edge. The primary key declared below.
	ReactionUserTable = "reactions"
	// ReactionUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReactionUserInverseTable = "users"
	// ReactionsTable is the table that holds the reactions relation/edge.
	ReactionsTable = "reactions"
	// ReactionsInverseTable is the table name for the Reaction entity.
	// It exists in this package in order to avoid circular dependency with the "reaction" package.
	ReactionsInverseTable = "reactions"
	// ReactionsColumn is the table column denoting the reactions relation/edge.
	ReactionsColumn = "time_dew_id"
)

// Columns holds all SQL columns for timedew fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDescription,
	FieldRawData,
	FieldSpeechs,
	FieldPlace,
	FieldGeneratedContent,
	FieldPromptSeq,
	FieldPromptSeqFullText,
	FieldJoinedLabel,
	FieldPicURL,
	FieldThumbnailURL,
	FieldResourceURL,
	FieldStatus,
	FieldType,
	FieldUserID,
	FieldCsFieldID,
	FieldTargetID,
	FieldMembers,
}

var (
	// ReactionUserPrimaryKey and ReactionUserColumn2 are the table columns denoting the
	// primary key for the reaction_user relation (M2M).
	ReactionUserPrimaryKey = []string{"time_dew_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusStatus1 is the default value of the Status enum.
const DefaultStatus = StatusStatus1

// Status values.
const (
	StatusStatus1 Status = "status1"
	StatusStatus2 Status = "status2"
	StatusStatus3 Status = "status3"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStatus1, StatusStatus2, StatusStatus3:
		return nil
	default:
		return fmt.Errorf("timedew: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// TypeUser is the default value of the Type enum.
const DefaultType = TypeUser

// Type values.
const (
	TypeUser    Type = "user"
	TypeCsField Type = "cs_field"
	TypeSystem  Type = "system"
	TypeInvite  Type = "invite"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUser, TypeCsField, TypeSystem, TypeInvite:
		return nil
	default:
		return fmt.Errorf("timedew: invalid enum value for type field: %q", _type)
	}
}
