// Code generated by ent, DO NOT EDIT.

package timedew

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Speechs applies equality check predicate on the "speechs" field. It's identical to SpeechsEQ.
func Speechs(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeechs), v))
	})
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// GeneratedContent applies equality check predicate on the "generated_content" field. It's identical to GeneratedContentEQ.
func GeneratedContent(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneratedContent), v))
	})
}

// PromptSeq applies equality check predicate on the "prompt_seq" field. It's identical to PromptSeqEQ.
func PromptSeq(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqFullText applies equality check predicate on the "prompt_seq_full_text" field. It's identical to PromptSeqFullTextEQ.
func PromptSeqFullText(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromptSeqFullText), v))
	})
}

// JoinedLabel applies equality check predicate on the "joined_label" field. It's identical to JoinedLabelEQ.
func JoinedLabel(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedLabel), v))
	})
}

// PicURL applies equality check predicate on the "pic_url" field. It's identical to PicURLEQ.
func PicURL(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPicURL), v))
	})
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnailURL), v))
	})
}

// ResourceURL applies equality check predicate on the "resource_url" field. It's identical to ResourceURLEQ.
func ResourceURL(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceURL), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CsFieldID applies equality check predicate on the "cs_field_id" field. It's identical to CsFieldIDEQ.
func CsFieldID(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsFieldID), v))
	})
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// RawDataIsNil applies the IsNil predicate on the "raw_data" field.
func RawDataIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRawData)))
	})
}

// RawDataNotNil applies the NotNil predicate on the "raw_data" field.
func RawDataNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRawData)))
	})
}

// SpeechsEQ applies the EQ predicate on the "speechs" field.
func SpeechsEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeechs), v))
	})
}

// SpeechsNEQ applies the NEQ predicate on the "speechs" field.
func SpeechsNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpeechs), v))
	})
}

// SpeechsIn applies the In predicate on the "speechs" field.
func SpeechsIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpeechs), v...))
	})
}

// SpeechsNotIn applies the NotIn predicate on the "speechs" field.
func SpeechsNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpeechs), v...))
	})
}

// SpeechsGT applies the GT predicate on the "speechs" field.
func SpeechsGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpeechs), v))
	})
}

// SpeechsGTE applies the GTE predicate on the "speechs" field.
func SpeechsGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpeechs), v))
	})
}

// SpeechsLT applies the LT predicate on the "speechs" field.
func SpeechsLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpeechs), v))
	})
}

// SpeechsLTE applies the LTE predicate on the "speechs" field.
func SpeechsLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpeechs), v))
	})
}

// SpeechsContains applies the Contains predicate on the "speechs" field.
func SpeechsContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpeechs), v))
	})
}

// SpeechsHasPrefix applies the HasPrefix predicate on the "speechs" field.
func SpeechsHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpeechs), v))
	})
}

// SpeechsHasSuffix applies the HasSuffix predicate on the "speechs" field.
func SpeechsHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpeechs), v))
	})
}

// SpeechsIsNil applies the IsNil predicate on the "speechs" field.
func SpeechsIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpeechs)))
	})
}

// SpeechsNotNil applies the NotNil predicate on the "speechs" field.
func SpeechsNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpeechs)))
	})
}

// SpeechsEqualFold applies the EqualFold predicate on the "speechs" field.
func SpeechsEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpeechs), v))
	})
}

// SpeechsContainsFold applies the ContainsFold predicate on the "speechs" field.
func SpeechsContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpeechs), v))
	})
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlace), v))
	})
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlace), v...))
	})
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlace), v...))
	})
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlace), v))
	})
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlace), v))
	})
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlace), v))
	})
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlace), v))
	})
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlace), v))
	})
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlace), v))
	})
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlace), v))
	})
}

// PlaceIsNil applies the IsNil predicate on the "place" field.
func PlaceIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlace)))
	})
}

// PlaceNotNil applies the NotNil predicate on the "place" field.
func PlaceNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlace)))
	})
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlace), v))
	})
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlace), v))
	})
}

// GeneratedContentEQ applies the EQ predicate on the "generated_content" field.
func GeneratedContentEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentNEQ applies the NEQ predicate on the "generated_content" field.
func GeneratedContentNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentIn applies the In predicate on the "generated_content" field.
func GeneratedContentIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGeneratedContent), v...))
	})
}

// GeneratedContentNotIn applies the NotIn predicate on the "generated_content" field.
func GeneratedContentNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGeneratedContent), v...))
	})
}

// GeneratedContentGT applies the GT predicate on the "generated_content" field.
func GeneratedContentGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentGTE applies the GTE predicate on the "generated_content" field.
func GeneratedContentGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentLT applies the LT predicate on the "generated_content" field.
func GeneratedContentLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentLTE applies the LTE predicate on the "generated_content" field.
func GeneratedContentLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentContains applies the Contains predicate on the "generated_content" field.
func GeneratedContentContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentHasPrefix applies the HasPrefix predicate on the "generated_content" field.
func GeneratedContentHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentHasSuffix applies the HasSuffix predicate on the "generated_content" field.
func GeneratedContentHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentIsNil applies the IsNil predicate on the "generated_content" field.
func GeneratedContentIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGeneratedContent)))
	})
}

// GeneratedContentNotNil applies the NotNil predicate on the "generated_content" field.
func GeneratedContentNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGeneratedContent)))
	})
}

// GeneratedContentEqualFold applies the EqualFold predicate on the "generated_content" field.
func GeneratedContentEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGeneratedContent), v))
	})
}

// GeneratedContentContainsFold applies the ContainsFold predicate on the "generated_content" field.
func GeneratedContentContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGeneratedContent), v))
	})
}

// PromptSeqEQ applies the EQ predicate on the "prompt_seq" field.
func PromptSeqEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqNEQ applies the NEQ predicate on the "prompt_seq" field.
func PromptSeqNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqIn applies the In predicate on the "prompt_seq" field.
func PromptSeqIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPromptSeq), v...))
	})
}

// PromptSeqNotIn applies the NotIn predicate on the "prompt_seq" field.
func PromptSeqNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPromptSeq), v...))
	})
}

// PromptSeqGT applies the GT predicate on the "prompt_seq" field.
func PromptSeqGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqGTE applies the GTE predicate on the "prompt_seq" field.
func PromptSeqGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqLT applies the LT predicate on the "prompt_seq" field.
func PromptSeqLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqLTE applies the LTE predicate on the "prompt_seq" field.
func PromptSeqLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqContains applies the Contains predicate on the "prompt_seq" field.
func PromptSeqContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqHasPrefix applies the HasPrefix predicate on the "prompt_seq" field.
func PromptSeqHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqHasSuffix applies the HasSuffix predicate on the "prompt_seq" field.
func PromptSeqHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqIsNil applies the IsNil predicate on the "prompt_seq" field.
func PromptSeqIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPromptSeq)))
	})
}

// PromptSeqNotNil applies the NotNil predicate on the "prompt_seq" field.
func PromptSeqNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPromptSeq)))
	})
}

// PromptSeqEqualFold applies the EqualFold predicate on the "prompt_seq" field.
func PromptSeqEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqContainsFold applies the ContainsFold predicate on the "prompt_seq" field.
func PromptSeqContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPromptSeq), v))
	})
}

// PromptSeqFullTextEQ applies the EQ predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextNEQ applies the NEQ predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextIn applies the In predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPromptSeqFullText), v...))
	})
}

// PromptSeqFullTextNotIn applies the NotIn predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPromptSeqFullText), v...))
	})
}

// PromptSeqFullTextGT applies the GT predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextGTE applies the GTE predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextLT applies the LT predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextLTE applies the LTE predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextContains applies the Contains predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextHasPrefix applies the HasPrefix predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextHasSuffix applies the HasSuffix predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextIsNil applies the IsNil predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPromptSeqFullText)))
	})
}

// PromptSeqFullTextNotNil applies the NotNil predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPromptSeqFullText)))
	})
}

// PromptSeqFullTextEqualFold applies the EqualFold predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPromptSeqFullText), v))
	})
}

// PromptSeqFullTextContainsFold applies the ContainsFold predicate on the "prompt_seq_full_text" field.
func PromptSeqFullTextContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPromptSeqFullText), v))
	})
}

// JoinedLabelEQ applies the EQ predicate on the "joined_label" field.
func JoinedLabelEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelNEQ applies the NEQ predicate on the "joined_label" field.
func JoinedLabelNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelIn applies the In predicate on the "joined_label" field.
func JoinedLabelIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinedLabel), v...))
	})
}

// JoinedLabelNotIn applies the NotIn predicate on the "joined_label" field.
func JoinedLabelNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinedLabel), v...))
	})
}

// JoinedLabelGT applies the GT predicate on the "joined_label" field.
func JoinedLabelGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelGTE applies the GTE predicate on the "joined_label" field.
func JoinedLabelGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelLT applies the LT predicate on the "joined_label" field.
func JoinedLabelLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelLTE applies the LTE predicate on the "joined_label" field.
func JoinedLabelLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelContains applies the Contains predicate on the "joined_label" field.
func JoinedLabelContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelHasPrefix applies the HasPrefix predicate on the "joined_label" field.
func JoinedLabelHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelHasSuffix applies the HasSuffix predicate on the "joined_label" field.
func JoinedLabelHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelIsNil applies the IsNil predicate on the "joined_label" field.
func JoinedLabelIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJoinedLabel)))
	})
}

// JoinedLabelNotNil applies the NotNil predicate on the "joined_label" field.
func JoinedLabelNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJoinedLabel)))
	})
}

// JoinedLabelEqualFold applies the EqualFold predicate on the "joined_label" field.
func JoinedLabelEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJoinedLabel), v))
	})
}

// JoinedLabelContainsFold applies the ContainsFold predicate on the "joined_label" field.
func JoinedLabelContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJoinedLabel), v))
	})
}

// PicURLEQ applies the EQ predicate on the "pic_url" field.
func PicURLEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPicURL), v))
	})
}

// PicURLNEQ applies the NEQ predicate on the "pic_url" field.
func PicURLNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPicURL), v))
	})
}

// PicURLIn applies the In predicate on the "pic_url" field.
func PicURLIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPicURL), v...))
	})
}

// PicURLNotIn applies the NotIn predicate on the "pic_url" field.
func PicURLNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPicURL), v...))
	})
}

// PicURLGT applies the GT predicate on the "pic_url" field.
func PicURLGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPicURL), v))
	})
}

// PicURLGTE applies the GTE predicate on the "pic_url" field.
func PicURLGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPicURL), v))
	})
}

// PicURLLT applies the LT predicate on the "pic_url" field.
func PicURLLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPicURL), v))
	})
}

// PicURLLTE applies the LTE predicate on the "pic_url" field.
func PicURLLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPicURL), v))
	})
}

// PicURLContains applies the Contains predicate on the "pic_url" field.
func PicURLContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPicURL), v))
	})
}

// PicURLHasPrefix applies the HasPrefix predicate on the "pic_url" field.
func PicURLHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPicURL), v))
	})
}

// PicURLHasSuffix applies the HasSuffix predicate on the "pic_url" field.
func PicURLHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPicURL), v))
	})
}

// PicURLIsNil applies the IsNil predicate on the "pic_url" field.
func PicURLIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPicURL)))
	})
}

// PicURLNotNil applies the NotNil predicate on the "pic_url" field.
func PicURLNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPicURL)))
	})
}

// PicURLEqualFold applies the EqualFold predicate on the "pic_url" field.
func PicURLEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPicURL), v))
	})
}

// PicURLContainsFold applies the ContainsFold predicate on the "pic_url" field.
func PicURLContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPicURL), v))
	})
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThumbnailURL), v...))
	})
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThumbnailURL), v...))
	})
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLIsNil applies the IsNil predicate on the "thumbnail_url" field.
func ThumbnailURLIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThumbnailURL)))
	})
}

// ThumbnailURLNotNil applies the NotNil predicate on the "thumbnail_url" field.
func ThumbnailURLNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThumbnailURL)))
	})
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThumbnailURL), v))
	})
}

// ResourceURLEQ applies the EQ predicate on the "resource_url" field.
func ResourceURLEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceURL), v))
	})
}

// ResourceURLNEQ applies the NEQ predicate on the "resource_url" field.
func ResourceURLNEQ(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceURL), v))
	})
}

// ResourceURLIn applies the In predicate on the "resource_url" field.
func ResourceURLIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResourceURL), v...))
	})
}

// ResourceURLNotIn applies the NotIn predicate on the "resource_url" field.
func ResourceURLNotIn(vs ...string) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResourceURL), v...))
	})
}

// ResourceURLGT applies the GT predicate on the "resource_url" field.
func ResourceURLGT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceURL), v))
	})
}

// ResourceURLGTE applies the GTE predicate on the "resource_url" field.
func ResourceURLGTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceURL), v))
	})
}

// ResourceURLLT applies the LT predicate on the "resource_url" field.
func ResourceURLLT(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceURL), v))
	})
}

// ResourceURLLTE applies the LTE predicate on the "resource_url" field.
func ResourceURLLTE(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceURL), v))
	})
}

// ResourceURLContains applies the Contains predicate on the "resource_url" field.
func ResourceURLContains(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceURL), v))
	})
}

// ResourceURLHasPrefix applies the HasPrefix predicate on the "resource_url" field.
func ResourceURLHasPrefix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceURL), v))
	})
}

// ResourceURLHasSuffix applies the HasSuffix predicate on the "resource_url" field.
func ResourceURLHasSuffix(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceURL), v))
	})
}

// ResourceURLIsNil applies the IsNil predicate on the "resource_url" field.
func ResourceURLIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResourceURL)))
	})
}

// ResourceURLNotNil applies the NotNil predicate on the "resource_url" field.
func ResourceURLNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResourceURL)))
	})
}

// ResourceURLEqualFold applies the EqualFold predicate on the "resource_url" field.
func ResourceURLEqualFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceURL), v))
	})
}

// ResourceURLContainsFold applies the ContainsFold predicate on the "resource_url" field.
func ResourceURLContainsFold(v string) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceURL), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// CsFieldIDEQ applies the EQ predicate on the "cs_field_id" field.
func CsFieldIDEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDNEQ applies the NEQ predicate on the "cs_field_id" field.
func CsFieldIDNEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDIn applies the In predicate on the "cs_field_id" field.
func CsFieldIDIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCsFieldID), v...))
	})
}

// CsFieldIDNotIn applies the NotIn predicate on the "cs_field_id" field.
func CsFieldIDNotIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCsFieldID), v...))
	})
}

// CsFieldIDGT applies the GT predicate on the "cs_field_id" field.
func CsFieldIDGT(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDGTE applies the GTE predicate on the "cs_field_id" field.
func CsFieldIDGTE(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDLT applies the LT predicate on the "cs_field_id" field.
func CsFieldIDLT(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDLTE applies the LTE predicate on the "cs_field_id" field.
func CsFieldIDLTE(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCsFieldID), v))
	})
}

// CsFieldIDIsNil applies the IsNil predicate on the "cs_field_id" field.
func CsFieldIDIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCsFieldID)))
	})
}

// CsFieldIDNotNil applies the NotNil predicate on the "cs_field_id" field.
func CsFieldIDNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCsFieldID)))
	})
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...uint64) predicate.TimeDew {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "target_id" field.
func TargetIDGT(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "target_id" field.
func TargetIDGTE(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "target_id" field.
func TargetIDLT(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "target_id" field.
func TargetIDLTE(v uint64) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "target_id" field.
func TargetIDIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "target_id" field.
func TargetIDNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// MembersIsNil applies the IsNil predicate on the "members" field.
func MembersIsNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMembers)))
	})
}

// MembersNotNil applies the NotNil predicate on the "members" field.
func MembersNotNil() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMembers)))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactionUser applies the HasEdge predicate on the "reaction_user" edge.
func HasReactionUser() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReactionUserTable, ReactionUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionUserWith applies the HasEdge predicate on the "reaction_user" edge with a given conditions (other predicates).
func HasReactionUserWith(preds ...predicate.User) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReactionUserTable, ReactionUserPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactions applies the HasEdge predicate on the "reactions" edge.
func HasReactions() predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionsWith applies the HasEdge predicate on the "reactions" edge with a given conditions (other predicates).
func HasReactionsWith(preds ...predicate.Reaction) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TimeDew) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TimeDew) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TimeDew) predicate.TimeDew {
	return predicate.TimeDew(func(s *sql.Selector) {
		p(s.Not())
	})
}
