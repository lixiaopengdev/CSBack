// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeDewCreate is the builder for creating a TimeDew entity.
type TimeDewCreate struct {
	config
	mutation *TimeDewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tdc *TimeDewCreate) SetCreateTime(t time.Time) *TimeDewCreate {
	tdc.mutation.SetCreateTime(t)
	return tdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableCreateTime(t *time.Time) *TimeDewCreate {
	if t != nil {
		tdc.SetCreateTime(*t)
	}
	return tdc
}

// SetUpdateTime sets the "update_time" field.
func (tdc *TimeDewCreate) SetUpdateTime(t time.Time) *TimeDewCreate {
	tdc.mutation.SetUpdateTime(t)
	return tdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableUpdateTime(t *time.Time) *TimeDewCreate {
	if t != nil {
		tdc.SetUpdateTime(*t)
	}
	return tdc
}

// SetName sets the "name" field.
func (tdc *TimeDewCreate) SetName(s string) *TimeDewCreate {
	tdc.mutation.SetName(s)
	return tdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableName(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetName(*s)
	}
	return tdc
}

// SetDescription sets the "description" field.
func (tdc *TimeDewCreate) SetDescription(s string) *TimeDewCreate {
	tdc.mutation.SetDescription(s)
	return tdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableDescription(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetDescription(*s)
	}
	return tdc
}

// SetRawData sets the "raw_data" field.
func (tdc *TimeDewCreate) SetRawData(s []string) *TimeDewCreate {
	tdc.mutation.SetRawData(s)
	return tdc
}

// SetSpeechs sets the "speechs" field.
func (tdc *TimeDewCreate) SetSpeechs(s string) *TimeDewCreate {
	tdc.mutation.SetSpeechs(s)
	return tdc
}

// SetNillableSpeechs sets the "speechs" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableSpeechs(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetSpeechs(*s)
	}
	return tdc
}

// SetPlace sets the "place" field.
func (tdc *TimeDewCreate) SetPlace(s string) *TimeDewCreate {
	tdc.mutation.SetPlace(s)
	return tdc
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillablePlace(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetPlace(*s)
	}
	return tdc
}

// SetGeneratedContent sets the "generated_content" field.
func (tdc *TimeDewCreate) SetGeneratedContent(s string) *TimeDewCreate {
	tdc.mutation.SetGeneratedContent(s)
	return tdc
}

// SetNillableGeneratedContent sets the "generated_content" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableGeneratedContent(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetGeneratedContent(*s)
	}
	return tdc
}

// SetPromptSeq sets the "prompt_seq" field.
func (tdc *TimeDewCreate) SetPromptSeq(s string) *TimeDewCreate {
	tdc.mutation.SetPromptSeq(s)
	return tdc
}

// SetNillablePromptSeq sets the "prompt_seq" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillablePromptSeq(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetPromptSeq(*s)
	}
	return tdc
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (tdc *TimeDewCreate) SetPromptSeqFullText(s string) *TimeDewCreate {
	tdc.mutation.SetPromptSeqFullText(s)
	return tdc
}

// SetNillablePromptSeqFullText sets the "prompt_seq_full_text" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillablePromptSeqFullText(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetPromptSeqFullText(*s)
	}
	return tdc
}

// SetJoinedLabel sets the "joined_label" field.
func (tdc *TimeDewCreate) SetJoinedLabel(s string) *TimeDewCreate {
	tdc.mutation.SetJoinedLabel(s)
	return tdc
}

// SetNillableJoinedLabel sets the "joined_label" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableJoinedLabel(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetJoinedLabel(*s)
	}
	return tdc
}

// SetPicURL sets the "pic_url" field.
func (tdc *TimeDewCreate) SetPicURL(s string) *TimeDewCreate {
	tdc.mutation.SetPicURL(s)
	return tdc
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillablePicURL(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetPicURL(*s)
	}
	return tdc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tdc *TimeDewCreate) SetThumbnailURL(s string) *TimeDewCreate {
	tdc.mutation.SetThumbnailURL(s)
	return tdc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableThumbnailURL(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetThumbnailURL(*s)
	}
	return tdc
}

// SetResourceURL sets the "resource_url" field.
func (tdc *TimeDewCreate) SetResourceURL(s string) *TimeDewCreate {
	tdc.mutation.SetResourceURL(s)
	return tdc
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableResourceURL(s *string) *TimeDewCreate {
	if s != nil {
		tdc.SetResourceURL(*s)
	}
	return tdc
}

// SetStatus sets the "status" field.
func (tdc *TimeDewCreate) SetStatus(t timedew.Status) *TimeDewCreate {
	tdc.mutation.SetStatus(t)
	return tdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableStatus(t *timedew.Status) *TimeDewCreate {
	if t != nil {
		tdc.SetStatus(*t)
	}
	return tdc
}

// SetType sets the "type" field.
func (tdc *TimeDewCreate) SetType(t timedew.Type) *TimeDewCreate {
	tdc.mutation.SetType(t)
	return tdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableType(t *timedew.Type) *TimeDewCreate {
	if t != nil {
		tdc.SetType(*t)
	}
	return tdc
}

// SetUserID sets the "user_id" field.
func (tdc *TimeDewCreate) SetUserID(u uint64) *TimeDewCreate {
	tdc.mutation.SetUserID(u)
	return tdc
}

// SetCsFieldID sets the "cs_field_id" field.
func (tdc *TimeDewCreate) SetCsFieldID(u uint64) *TimeDewCreate {
	tdc.mutation.SetCsFieldID(u)
	return tdc
}

// SetNillableCsFieldID sets the "cs_field_id" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableCsFieldID(u *uint64) *TimeDewCreate {
	if u != nil {
		tdc.SetCsFieldID(*u)
	}
	return tdc
}

// SetTargetID sets the "target_id" field.
func (tdc *TimeDewCreate) SetTargetID(u uint64) *TimeDewCreate {
	tdc.mutation.SetTargetID(u)
	return tdc
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (tdc *TimeDewCreate) SetNillableTargetID(u *uint64) *TimeDewCreate {
	if u != nil {
		tdc.SetTargetID(*u)
	}
	return tdc
}

// SetMembers sets the "members" field.
func (tdc *TimeDewCreate) SetMembers(s []string) *TimeDewCreate {
	tdc.mutation.SetMembers(s)
	return tdc
}

// SetID sets the "id" field.
func (tdc *TimeDewCreate) SetID(u uint64) *TimeDewCreate {
	tdc.mutation.SetID(u)
	return tdc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tdc *TimeDewCreate) SetOwnerID(id uint64) *TimeDewCreate {
	tdc.mutation.SetOwnerID(id)
	return tdc
}

// SetOwner sets the "owner" edge to the User entity.
func (tdc *TimeDewCreate) SetOwner(u *User) *TimeDewCreate {
	return tdc.SetOwnerID(u.ID)
}

// AddReactionUserIDs adds the "reaction_user" edge to the User entity by IDs.
func (tdc *TimeDewCreate) AddReactionUserIDs(ids ...uint64) *TimeDewCreate {
	tdc.mutation.AddReactionUserIDs(ids...)
	return tdc
}

// AddReactionUser adds the "reaction_user" edges to the User entity.
func (tdc *TimeDewCreate) AddReactionUser(u ...*User) *TimeDewCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tdc.AddReactionUserIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (tdc *TimeDewCreate) AddReactionIDs(ids ...int) *TimeDewCreate {
	tdc.mutation.AddReactionIDs(ids...)
	return tdc
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (tdc *TimeDewCreate) AddReactions(r ...*Reaction) *TimeDewCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tdc.AddReactionIDs(ids...)
}

// Mutation returns the TimeDewMutation object of the builder.
func (tdc *TimeDewCreate) Mutation() *TimeDewMutation {
	return tdc.mutation
}

// Save creates the TimeDew in the database.
func (tdc *TimeDewCreate) Save(ctx context.Context) (*TimeDew, error) {
	var (
		err  error
		node *TimeDew
	)
	tdc.defaults()
	if len(tdc.hooks) == 0 {
		if err = tdc.check(); err != nil {
			return nil, err
		}
		node, err = tdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimeDewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdc.check(); err != nil {
				return nil, err
			}
			tdc.mutation = mutation
			if node, err = tdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tdc.hooks) - 1; i >= 0; i-- {
			if tdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TimeDew)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TimeDewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TimeDewCreate) SaveX(ctx context.Context) *TimeDew {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TimeDewCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TimeDewCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TimeDewCreate) defaults() {
	if _, ok := tdc.mutation.CreateTime(); !ok {
		v := timedew.DefaultCreateTime()
		tdc.mutation.SetCreateTime(v)
	}
	if _, ok := tdc.mutation.UpdateTime(); !ok {
		v := timedew.DefaultUpdateTime()
		tdc.mutation.SetUpdateTime(v)
	}
	if _, ok := tdc.mutation.Status(); !ok {
		v := timedew.DefaultStatus
		tdc.mutation.SetStatus(v)
	}
	if _, ok := tdc.mutation.GetType(); !ok {
		v := timedew.DefaultType
		tdc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TimeDewCreate) check() error {
	if _, ok := tdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TimeDew.create_time"`)}
	}
	if _, ok := tdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TimeDew.update_time"`)}
	}
	if _, ok := tdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TimeDew.status"`)}
	}
	if v, ok := tdc.mutation.Status(); ok {
		if err := timedew.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TimeDew.status": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TimeDew.type"`)}
	}
	if v, ok := tdc.mutation.GetType(); ok {
		if err := timedew.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TimeDew.type": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TimeDew.user_id"`)}
	}
	if _, ok := tdc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "TimeDew.owner"`)}
	}
	return nil
}

func (tdc *TimeDewCreate) sqlSave(ctx context.Context) (*TimeDew, error) {
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tdc *TimeDewCreate) createSpec() (*TimeDew, *sqlgraph.CreateSpec) {
	var (
		_node = &TimeDew{config: tdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timedew.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: timedew.FieldID,
			},
		}
	)
	_spec.OnConflict = tdc.conflict
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.CreateTime(); ok {
		_spec.SetField(timedew.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tdc.mutation.UpdateTime(); ok {
		_spec.SetField(timedew.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tdc.mutation.Name(); ok {
		_spec.SetField(timedew.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tdc.mutation.Description(); ok {
		_spec.SetField(timedew.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tdc.mutation.RawData(); ok {
		_spec.SetField(timedew.FieldRawData, field.TypeJSON, value)
		_node.RawData = value
	}
	if value, ok := tdc.mutation.Speechs(); ok {
		_spec.SetField(timedew.FieldSpeechs, field.TypeString, value)
		_node.Speechs = value
	}
	if value, ok := tdc.mutation.Place(); ok {
		_spec.SetField(timedew.FieldPlace, field.TypeString, value)
		_node.Place = value
	}
	if value, ok := tdc.mutation.GeneratedContent(); ok {
		_spec.SetField(timedew.FieldGeneratedContent, field.TypeString, value)
		_node.GeneratedContent = value
	}
	if value, ok := tdc.mutation.PromptSeq(); ok {
		_spec.SetField(timedew.FieldPromptSeq, field.TypeString, value)
		_node.PromptSeq = value
	}
	if value, ok := tdc.mutation.PromptSeqFullText(); ok {
		_spec.SetField(timedew.FieldPromptSeqFullText, field.TypeString, value)
		_node.PromptSeqFullText = value
	}
	if value, ok := tdc.mutation.JoinedLabel(); ok {
		_spec.SetField(timedew.FieldJoinedLabel, field.TypeString, value)
		_node.JoinedLabel = value
	}
	if value, ok := tdc.mutation.PicURL(); ok {
		_spec.SetField(timedew.FieldPicURL, field.TypeString, value)
		_node.PicURL = value
	}
	if value, ok := tdc.mutation.ThumbnailURL(); ok {
		_spec.SetField(timedew.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := tdc.mutation.ResourceURL(); ok {
		_spec.SetField(timedew.FieldResourceURL, field.TypeString, value)
		_node.ResourceURL = value
	}
	if value, ok := tdc.mutation.Status(); ok {
		_spec.SetField(timedew.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tdc.mutation.GetType(); ok {
		_spec.SetField(timedew.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tdc.mutation.CsFieldID(); ok {
		_spec.SetField(timedew.FieldCsFieldID, field.TypeUint64, value)
		_node.CsFieldID = value
	}
	if value, ok := tdc.mutation.TargetID(); ok {
		_spec.SetField(timedew.FieldTargetID, field.TypeUint64, value)
		_node.TargetID = value
	}
	if value, ok := tdc.mutation.Members(); ok {
		_spec.SetField(timedew.FieldMembers, field.TypeJSON, value)
		_node.Members = value
	}
	if nodes := tdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timedew.OwnerTable,
			Columns: []string{timedew.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tdc.mutation.ReactionUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: tdc.config, mutation: newReactionMutation(tdc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tdc.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimeDew.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimeDewUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tdc *TimeDewCreate) OnConflict(opts ...sql.ConflictOption) *TimeDewUpsertOne {
	tdc.conflict = opts
	return &TimeDewUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TimeDewCreate) OnConflictColumns(columns ...string) *TimeDewUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TimeDewUpsertOne{
		create: tdc,
	}
}

type (
	// TimeDewUpsertOne is the builder for "upsert"-ing
	//  one TimeDew node.
	TimeDewUpsertOne struct {
		create *TimeDewCreate
	}

	// TimeDewUpsert is the "OnConflict" setter.
	TimeDewUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TimeDewUpsert) SetUpdateTime(v time.Time) *TimeDewUpsert {
	u.Set(timedew.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateUpdateTime() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *TimeDewUpsert) SetName(v string) *TimeDewUpsert {
	u.Set(timedew.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateName() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TimeDewUpsert) ClearName() *TimeDewUpsert {
	u.SetNull(timedew.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *TimeDewUpsert) SetDescription(v string) *TimeDewUpsert {
	u.Set(timedew.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateDescription() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TimeDewUpsert) ClearDescription() *TimeDewUpsert {
	u.SetNull(timedew.FieldDescription)
	return u
}

// SetRawData sets the "raw_data" field.
func (u *TimeDewUpsert) SetRawData(v []string) *TimeDewUpsert {
	u.Set(timedew.FieldRawData, v)
	return u
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateRawData() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldRawData)
	return u
}

// ClearRawData clears the value of the "raw_data" field.
func (u *TimeDewUpsert) ClearRawData() *TimeDewUpsert {
	u.SetNull(timedew.FieldRawData)
	return u
}

// SetSpeechs sets the "speechs" field.
func (u *TimeDewUpsert) SetSpeechs(v string) *TimeDewUpsert {
	u.Set(timedew.FieldSpeechs, v)
	return u
}

// UpdateSpeechs sets the "speechs" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateSpeechs() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldSpeechs)
	return u
}

// ClearSpeechs clears the value of the "speechs" field.
func (u *TimeDewUpsert) ClearSpeechs() *TimeDewUpsert {
	u.SetNull(timedew.FieldSpeechs)
	return u
}

// SetPlace sets the "place" field.
func (u *TimeDewUpsert) SetPlace(v string) *TimeDewUpsert {
	u.Set(timedew.FieldPlace, v)
	return u
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdatePlace() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldPlace)
	return u
}

// ClearPlace clears the value of the "place" field.
func (u *TimeDewUpsert) ClearPlace() *TimeDewUpsert {
	u.SetNull(timedew.FieldPlace)
	return u
}

// SetGeneratedContent sets the "generated_content" field.
func (u *TimeDewUpsert) SetGeneratedContent(v string) *TimeDewUpsert {
	u.Set(timedew.FieldGeneratedContent, v)
	return u
}

// UpdateGeneratedContent sets the "generated_content" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateGeneratedContent() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldGeneratedContent)
	return u
}

// ClearGeneratedContent clears the value of the "generated_content" field.
func (u *TimeDewUpsert) ClearGeneratedContent() *TimeDewUpsert {
	u.SetNull(timedew.FieldGeneratedContent)
	return u
}

// SetPromptSeq sets the "prompt_seq" field.
func (u *TimeDewUpsert) SetPromptSeq(v string) *TimeDewUpsert {
	u.Set(timedew.FieldPromptSeq, v)
	return u
}

// UpdatePromptSeq sets the "prompt_seq" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdatePromptSeq() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldPromptSeq)
	return u
}

// ClearPromptSeq clears the value of the "prompt_seq" field.
func (u *TimeDewUpsert) ClearPromptSeq() *TimeDewUpsert {
	u.SetNull(timedew.FieldPromptSeq)
	return u
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (u *TimeDewUpsert) SetPromptSeqFullText(v string) *TimeDewUpsert {
	u.Set(timedew.FieldPromptSeqFullText, v)
	return u
}

// UpdatePromptSeqFullText sets the "prompt_seq_full_text" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdatePromptSeqFullText() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldPromptSeqFullText)
	return u
}

// ClearPromptSeqFullText clears the value of the "prompt_seq_full_text" field.
func (u *TimeDewUpsert) ClearPromptSeqFullText() *TimeDewUpsert {
	u.SetNull(timedew.FieldPromptSeqFullText)
	return u
}

// SetJoinedLabel sets the "joined_label" field.
func (u *TimeDewUpsert) SetJoinedLabel(v string) *TimeDewUpsert {
	u.Set(timedew.FieldJoinedLabel, v)
	return u
}

// UpdateJoinedLabel sets the "joined_label" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateJoinedLabel() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldJoinedLabel)
	return u
}

// ClearJoinedLabel clears the value of the "joined_label" field.
func (u *TimeDewUpsert) ClearJoinedLabel() *TimeDewUpsert {
	u.SetNull(timedew.FieldJoinedLabel)
	return u
}

// SetPicURL sets the "pic_url" field.
func (u *TimeDewUpsert) SetPicURL(v string) *TimeDewUpsert {
	u.Set(timedew.FieldPicURL, v)
	return u
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdatePicURL() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldPicURL)
	return u
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *TimeDewUpsert) ClearPicURL() *TimeDewUpsert {
	u.SetNull(timedew.FieldPicURL)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *TimeDewUpsert) SetThumbnailURL(v string) *TimeDewUpsert {
	u.Set(timedew.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateThumbnailURL() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldThumbnailURL)
	return u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *TimeDewUpsert) ClearThumbnailURL() *TimeDewUpsert {
	u.SetNull(timedew.FieldThumbnailURL)
	return u
}

// SetResourceURL sets the "resource_url" field.
func (u *TimeDewUpsert) SetResourceURL(v string) *TimeDewUpsert {
	u.Set(timedew.FieldResourceURL, v)
	return u
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateResourceURL() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldResourceURL)
	return u
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *TimeDewUpsert) ClearResourceURL() *TimeDewUpsert {
	u.SetNull(timedew.FieldResourceURL)
	return u
}

// SetStatus sets the "status" field.
func (u *TimeDewUpsert) SetStatus(v timedew.Status) *TimeDewUpsert {
	u.Set(timedew.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateStatus() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldStatus)
	return u
}

// SetType sets the "type" field.
func (u *TimeDewUpsert) SetType(v timedew.Type) *TimeDewUpsert {
	u.Set(timedew.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateType() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldType)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TimeDewUpsert) SetUserID(v uint64) *TimeDewUpsert {
	u.Set(timedew.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateUserID() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldUserID)
	return u
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *TimeDewUpsert) SetCsFieldID(v uint64) *TimeDewUpsert {
	u.Set(timedew.FieldCsFieldID, v)
	return u
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateCsFieldID() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldCsFieldID)
	return u
}

// AddCsFieldID adds v to the "cs_field_id" field.
func (u *TimeDewUpsert) AddCsFieldID(v uint64) *TimeDewUpsert {
	u.Add(timedew.FieldCsFieldID, v)
	return u
}

// ClearCsFieldID clears the value of the "cs_field_id" field.
func (u *TimeDewUpsert) ClearCsFieldID() *TimeDewUpsert {
	u.SetNull(timedew.FieldCsFieldID)
	return u
}

// SetTargetID sets the "target_id" field.
func (u *TimeDewUpsert) SetTargetID(v uint64) *TimeDewUpsert {
	u.Set(timedew.FieldTargetID, v)
	return u
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateTargetID() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldTargetID)
	return u
}

// AddTargetID adds v to the "target_id" field.
func (u *TimeDewUpsert) AddTargetID(v uint64) *TimeDewUpsert {
	u.Add(timedew.FieldTargetID, v)
	return u
}

// ClearTargetID clears the value of the "target_id" field.
func (u *TimeDewUpsert) ClearTargetID() *TimeDewUpsert {
	u.SetNull(timedew.FieldTargetID)
	return u
}

// SetMembers sets the "members" field.
func (u *TimeDewUpsert) SetMembers(v []string) *TimeDewUpsert {
	u.Set(timedew.FieldMembers, v)
	return u
}

// UpdateMembers sets the "members" field to the value that was provided on create.
func (u *TimeDewUpsert) UpdateMembers() *TimeDewUpsert {
	u.SetExcluded(timedew.FieldMembers)
	return u
}

// ClearMembers clears the value of the "members" field.
func (u *TimeDewUpsert) ClearMembers() *TimeDewUpsert {
	u.SetNull(timedew.FieldMembers)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(timedew.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TimeDewUpsertOne) UpdateNewValues() *TimeDewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(timedew.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(timedew.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TimeDewUpsertOne) Ignore() *TimeDewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimeDewUpsertOne) DoNothing() *TimeDewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimeDewCreate.OnConflict
// documentation for more info.
func (u *TimeDewUpsertOne) Update(set func(*TimeDewUpsert)) *TimeDewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimeDewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TimeDewUpsertOne) SetUpdateTime(v time.Time) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateUpdateTime() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TimeDewUpsertOne) SetName(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateName() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TimeDewUpsertOne) ClearName() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *TimeDewUpsertOne) SetDescription(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateDescription() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TimeDewUpsertOne) ClearDescription() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearDescription()
	})
}

// SetRawData sets the "raw_data" field.
func (u *TimeDewUpsertOne) SetRawData(v []string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetRawData(v)
	})
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateRawData() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateRawData()
	})
}

// ClearRawData clears the value of the "raw_data" field.
func (u *TimeDewUpsertOne) ClearRawData() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearRawData()
	})
}

// SetSpeechs sets the "speechs" field.
func (u *TimeDewUpsertOne) SetSpeechs(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetSpeechs(v)
	})
}

// UpdateSpeechs sets the "speechs" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateSpeechs() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateSpeechs()
	})
}

// ClearSpeechs clears the value of the "speechs" field.
func (u *TimeDewUpsertOne) ClearSpeechs() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearSpeechs()
	})
}

// SetPlace sets the "place" field.
func (u *TimeDewUpsertOne) SetPlace(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdatePlace() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePlace()
	})
}

// ClearPlace clears the value of the "place" field.
func (u *TimeDewUpsertOne) ClearPlace() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPlace()
	})
}

// SetGeneratedContent sets the "generated_content" field.
func (u *TimeDewUpsertOne) SetGeneratedContent(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetGeneratedContent(v)
	})
}

// UpdateGeneratedContent sets the "generated_content" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateGeneratedContent() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateGeneratedContent()
	})
}

// ClearGeneratedContent clears the value of the "generated_content" field.
func (u *TimeDewUpsertOne) ClearGeneratedContent() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearGeneratedContent()
	})
}

// SetPromptSeq sets the "prompt_seq" field.
func (u *TimeDewUpsertOne) SetPromptSeq(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPromptSeq(v)
	})
}

// UpdatePromptSeq sets the "prompt_seq" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdatePromptSeq() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePromptSeq()
	})
}

// ClearPromptSeq clears the value of the "prompt_seq" field.
func (u *TimeDewUpsertOne) ClearPromptSeq() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPromptSeq()
	})
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (u *TimeDewUpsertOne) SetPromptSeqFullText(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPromptSeqFullText(v)
	})
}

// UpdatePromptSeqFullText sets the "prompt_seq_full_text" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdatePromptSeqFullText() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePromptSeqFullText()
	})
}

// ClearPromptSeqFullText clears the value of the "prompt_seq_full_text" field.
func (u *TimeDewUpsertOne) ClearPromptSeqFullText() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPromptSeqFullText()
	})
}

// SetJoinedLabel sets the "joined_label" field.
func (u *TimeDewUpsertOne) SetJoinedLabel(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetJoinedLabel(v)
	})
}

// UpdateJoinedLabel sets the "joined_label" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateJoinedLabel() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateJoinedLabel()
	})
}

// ClearJoinedLabel clears the value of the "joined_label" field.
func (u *TimeDewUpsertOne) ClearJoinedLabel() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearJoinedLabel()
	})
}

// SetPicURL sets the "pic_url" field.
func (u *TimeDewUpsertOne) SetPicURL(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPicURL(v)
	})
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdatePicURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePicURL()
	})
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *TimeDewUpsertOne) ClearPicURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPicURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *TimeDewUpsertOne) SetThumbnailURL(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateThumbnailURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *TimeDewUpsertOne) ClearThumbnailURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetResourceURL sets the "resource_url" field.
func (u *TimeDewUpsertOne) SetResourceURL(v string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetResourceURL(v)
	})
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateResourceURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateResourceURL()
	})
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *TimeDewUpsertOne) ClearResourceURL() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearResourceURL()
	})
}

// SetStatus sets the "status" field.
func (u *TimeDewUpsertOne) SetStatus(v timedew.Status) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateStatus() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *TimeDewUpsertOne) SetType(v timedew.Type) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateType() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateType()
	})
}

// SetUserID sets the "user_id" field.
func (u *TimeDewUpsertOne) SetUserID(v uint64) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateUserID() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateUserID()
	})
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *TimeDewUpsertOne) SetCsFieldID(v uint64) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetCsFieldID(v)
	})
}

// AddCsFieldID adds v to the "cs_field_id" field.
func (u *TimeDewUpsertOne) AddCsFieldID(v uint64) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.AddCsFieldID(v)
	})
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateCsFieldID() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateCsFieldID()
	})
}

// ClearCsFieldID clears the value of the "cs_field_id" field.
func (u *TimeDewUpsertOne) ClearCsFieldID() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearCsFieldID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *TimeDewUpsertOne) SetTargetID(v uint64) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetTargetID(v)
	})
}

// AddTargetID adds v to the "target_id" field.
func (u *TimeDewUpsertOne) AddTargetID(v uint64) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.AddTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateTargetID() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateTargetID()
	})
}

// ClearTargetID clears the value of the "target_id" field.
func (u *TimeDewUpsertOne) ClearTargetID() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearTargetID()
	})
}

// SetMembers sets the "members" field.
func (u *TimeDewUpsertOne) SetMembers(v []string) *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetMembers(v)
	})
}

// UpdateMembers sets the "members" field to the value that was provided on create.
func (u *TimeDewUpsertOne) UpdateMembers() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateMembers()
	})
}

// ClearMembers clears the value of the "members" field.
func (u *TimeDewUpsertOne) ClearMembers() *TimeDewUpsertOne {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearMembers()
	})
}

// Exec executes the query.
func (u *TimeDewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimeDewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimeDewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TimeDewUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TimeDewUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TimeDewCreateBulk is the builder for creating many TimeDew entities in bulk.
type TimeDewCreateBulk struct {
	config
	builders []*TimeDewCreate
	conflict []sql.ConflictOption
}

// Save creates the TimeDew entities in the database.
func (tdcb *TimeDewCreateBulk) Save(ctx context.Context) ([]*TimeDew, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TimeDew, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimeDewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TimeDewCreateBulk) SaveX(ctx context.Context) []*TimeDew {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TimeDewCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TimeDewCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimeDew.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimeDewUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TimeDewCreateBulk) OnConflict(opts ...sql.ConflictOption) *TimeDewUpsertBulk {
	tdcb.conflict = opts
	return &TimeDewUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TimeDewCreateBulk) OnConflictColumns(columns ...string) *TimeDewUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TimeDewUpsertBulk{
		create: tdcb,
	}
}

// TimeDewUpsertBulk is the builder for "upsert"-ing
// a bulk of TimeDew nodes.
type TimeDewUpsertBulk struct {
	create *TimeDewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(timedew.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TimeDewUpsertBulk) UpdateNewValues() *TimeDewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(timedew.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(timedew.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimeDew.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TimeDewUpsertBulk) Ignore() *TimeDewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimeDewUpsertBulk) DoNothing() *TimeDewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimeDewCreateBulk.OnConflict
// documentation for more info.
func (u *TimeDewUpsertBulk) Update(set func(*TimeDewUpsert)) *TimeDewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimeDewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TimeDewUpsertBulk) SetUpdateTime(v time.Time) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateUpdateTime() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TimeDewUpsertBulk) SetName(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateName() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TimeDewUpsertBulk) ClearName() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *TimeDewUpsertBulk) SetDescription(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateDescription() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TimeDewUpsertBulk) ClearDescription() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearDescription()
	})
}

// SetRawData sets the "raw_data" field.
func (u *TimeDewUpsertBulk) SetRawData(v []string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetRawData(v)
	})
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateRawData() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateRawData()
	})
}

// ClearRawData clears the value of the "raw_data" field.
func (u *TimeDewUpsertBulk) ClearRawData() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearRawData()
	})
}

// SetSpeechs sets the "speechs" field.
func (u *TimeDewUpsertBulk) SetSpeechs(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetSpeechs(v)
	})
}

// UpdateSpeechs sets the "speechs" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateSpeechs() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateSpeechs()
	})
}

// ClearSpeechs clears the value of the "speechs" field.
func (u *TimeDewUpsertBulk) ClearSpeechs() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearSpeechs()
	})
}

// SetPlace sets the "place" field.
func (u *TimeDewUpsertBulk) SetPlace(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdatePlace() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePlace()
	})
}

// ClearPlace clears the value of the "place" field.
func (u *TimeDewUpsertBulk) ClearPlace() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPlace()
	})
}

// SetGeneratedContent sets the "generated_content" field.
func (u *TimeDewUpsertBulk) SetGeneratedContent(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetGeneratedContent(v)
	})
}

// UpdateGeneratedContent sets the "generated_content" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateGeneratedContent() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateGeneratedContent()
	})
}

// ClearGeneratedContent clears the value of the "generated_content" field.
func (u *TimeDewUpsertBulk) ClearGeneratedContent() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearGeneratedContent()
	})
}

// SetPromptSeq sets the "prompt_seq" field.
func (u *TimeDewUpsertBulk) SetPromptSeq(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPromptSeq(v)
	})
}

// UpdatePromptSeq sets the "prompt_seq" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdatePromptSeq() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePromptSeq()
	})
}

// ClearPromptSeq clears the value of the "prompt_seq" field.
func (u *TimeDewUpsertBulk) ClearPromptSeq() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPromptSeq()
	})
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (u *TimeDewUpsertBulk) SetPromptSeqFullText(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPromptSeqFullText(v)
	})
}

// UpdatePromptSeqFullText sets the "prompt_seq_full_text" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdatePromptSeqFullText() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePromptSeqFullText()
	})
}

// ClearPromptSeqFullText clears the value of the "prompt_seq_full_text" field.
func (u *TimeDewUpsertBulk) ClearPromptSeqFullText() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPromptSeqFullText()
	})
}

// SetJoinedLabel sets the "joined_label" field.
func (u *TimeDewUpsertBulk) SetJoinedLabel(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetJoinedLabel(v)
	})
}

// UpdateJoinedLabel sets the "joined_label" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateJoinedLabel() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateJoinedLabel()
	})
}

// ClearJoinedLabel clears the value of the "joined_label" field.
func (u *TimeDewUpsertBulk) ClearJoinedLabel() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearJoinedLabel()
	})
}

// SetPicURL sets the "pic_url" field.
func (u *TimeDewUpsertBulk) SetPicURL(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetPicURL(v)
	})
}

// UpdatePicURL sets the "pic_url" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdatePicURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdatePicURL()
	})
}

// ClearPicURL clears the value of the "pic_url" field.
func (u *TimeDewUpsertBulk) ClearPicURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearPicURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *TimeDewUpsertBulk) SetThumbnailURL(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateThumbnailURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *TimeDewUpsertBulk) ClearThumbnailURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetResourceURL sets the "resource_url" field.
func (u *TimeDewUpsertBulk) SetResourceURL(v string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetResourceURL(v)
	})
}

// UpdateResourceURL sets the "resource_url" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateResourceURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateResourceURL()
	})
}

// ClearResourceURL clears the value of the "resource_url" field.
func (u *TimeDewUpsertBulk) ClearResourceURL() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearResourceURL()
	})
}

// SetStatus sets the "status" field.
func (u *TimeDewUpsertBulk) SetStatus(v timedew.Status) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateStatus() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *TimeDewUpsertBulk) SetType(v timedew.Type) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateType() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateType()
	})
}

// SetUserID sets the "user_id" field.
func (u *TimeDewUpsertBulk) SetUserID(v uint64) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateUserID() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateUserID()
	})
}

// SetCsFieldID sets the "cs_field_id" field.
func (u *TimeDewUpsertBulk) SetCsFieldID(v uint64) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetCsFieldID(v)
	})
}

// AddCsFieldID adds v to the "cs_field_id" field.
func (u *TimeDewUpsertBulk) AddCsFieldID(v uint64) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.AddCsFieldID(v)
	})
}

// UpdateCsFieldID sets the "cs_field_id" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateCsFieldID() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateCsFieldID()
	})
}

// ClearCsFieldID clears the value of the "cs_field_id" field.
func (u *TimeDewUpsertBulk) ClearCsFieldID() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearCsFieldID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *TimeDewUpsertBulk) SetTargetID(v uint64) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetTargetID(v)
	})
}

// AddTargetID adds v to the "target_id" field.
func (u *TimeDewUpsertBulk) AddTargetID(v uint64) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.AddTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateTargetID() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateTargetID()
	})
}

// ClearTargetID clears the value of the "target_id" field.
func (u *TimeDewUpsertBulk) ClearTargetID() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearTargetID()
	})
}

// SetMembers sets the "members" field.
func (u *TimeDewUpsertBulk) SetMembers(v []string) *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.SetMembers(v)
	})
}

// UpdateMembers sets the "members" field to the value that was provided on create.
func (u *TimeDewUpsertBulk) UpdateMembers() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.UpdateMembers()
	})
}

// ClearMembers clears the value of the "members" field.
func (u *TimeDewUpsertBulk) ClearMembers() *TimeDewUpsertBulk {
	return u.Update(func(s *TimeDewUpsert) {
		s.ClearMembers()
	})
}

// Exec executes the query.
func (u *TimeDewUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TimeDewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimeDewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimeDewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
