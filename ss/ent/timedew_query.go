// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeDewQuery is the builder for querying TimeDew entities.
type TimeDewQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	predicates       []predicate.TimeDew
	withOwner        *UserQuery
	withReactionUser *UserQuery
	withReactions    *ReactionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TimeDewQuery builder.
func (tdq *TimeDewQuery) Where(ps ...predicate.TimeDew) *TimeDewQuery {
	tdq.predicates = append(tdq.predicates, ps...)
	return tdq
}

// Limit adds a limit step to the query.
func (tdq *TimeDewQuery) Limit(limit int) *TimeDewQuery {
	tdq.limit = &limit
	return tdq
}

// Offset adds an offset step to the query.
func (tdq *TimeDewQuery) Offset(offset int) *TimeDewQuery {
	tdq.offset = &offset
	return tdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tdq *TimeDewQuery) Unique(unique bool) *TimeDewQuery {
	tdq.unique = &unique
	return tdq
}

// Order adds an order step to the query.
func (tdq *TimeDewQuery) Order(o ...OrderFunc) *TimeDewQuery {
	tdq.order = append(tdq.order, o...)
	return tdq
}

// QueryOwner chains the current query on the "owner" edge.
func (tdq *TimeDewQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: tdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timedew.Table, timedew.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, timedew.OwnerTable, timedew.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(tdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactionUser chains the current query on the "reaction_user" edge.
func (tdq *TimeDewQuery) QueryReactionUser() *UserQuery {
	query := &UserQuery{config: tdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timedew.Table, timedew.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, timedew.ReactionUserTable, timedew.ReactionUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactions chains the current query on the "reactions" edge.
func (tdq *TimeDewQuery) QueryReactions() *ReactionQuery {
	query := &ReactionQuery{config: tdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timedew.Table, timedew.FieldID, selector),
			sqlgraph.To(reaction.Table, reaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, timedew.ReactionsTable, timedew.ReactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TimeDew entity from the query.
// Returns a *NotFoundError when no TimeDew was found.
func (tdq *TimeDewQuery) First(ctx context.Context) (*TimeDew, error) {
	nodes, err := tdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{timedew.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tdq *TimeDewQuery) FirstX(ctx context.Context) *TimeDew {
	node, err := tdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TimeDew ID from the query.
// Returns a *NotFoundError when no TimeDew ID was found.
func (tdq *TimeDewQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = tdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{timedew.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tdq *TimeDewQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := tdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TimeDew entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TimeDew entity is found.
// Returns a *NotFoundError when no TimeDew entities are found.
func (tdq *TimeDewQuery) Only(ctx context.Context) (*TimeDew, error) {
	nodes, err := tdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{timedew.Label}
	default:
		return nil, &NotSingularError{timedew.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tdq *TimeDewQuery) OnlyX(ctx context.Context) *TimeDew {
	node, err := tdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TimeDew ID in the query.
// Returns a *NotSingularError when more than one TimeDew ID is found.
// Returns a *NotFoundError when no entities are found.
func (tdq *TimeDewQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = tdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{timedew.Label}
	default:
		err = &NotSingularError{timedew.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tdq *TimeDewQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := tdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TimeDews.
func (tdq *TimeDewQuery) All(ctx context.Context) ([]*TimeDew, error) {
	if err := tdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tdq *TimeDewQuery) AllX(ctx context.Context) []*TimeDew {
	nodes, err := tdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TimeDew IDs.
func (tdq *TimeDewQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := tdq.Select(timedew.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tdq *TimeDewQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := tdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tdq *TimeDewQuery) Count(ctx context.Context) (int, error) {
	if err := tdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tdq *TimeDewQuery) CountX(ctx context.Context) int {
	count, err := tdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tdq *TimeDewQuery) Exist(ctx context.Context) (bool, error) {
	if err := tdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tdq *TimeDewQuery) ExistX(ctx context.Context) bool {
	exist, err := tdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TimeDewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tdq *TimeDewQuery) Clone() *TimeDewQuery {
	if tdq == nil {
		return nil
	}
	return &TimeDewQuery{
		config:           tdq.config,
		limit:            tdq.limit,
		offset:           tdq.offset,
		order:            append([]OrderFunc{}, tdq.order...),
		predicates:       append([]predicate.TimeDew{}, tdq.predicates...),
		withOwner:        tdq.withOwner.Clone(),
		withReactionUser: tdq.withReactionUser.Clone(),
		withReactions:    tdq.withReactions.Clone(),
		// clone intermediate query.
		sql:    tdq.sql.Clone(),
		path:   tdq.path,
		unique: tdq.unique,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (tdq *TimeDewQuery) WithOwner(opts ...func(*UserQuery)) *TimeDewQuery {
	query := &UserQuery{config: tdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tdq.withOwner = query
	return tdq
}

// WithReactionUser tells the query-builder to eager-load the nodes that are connected to
// the "reaction_user" edge. The optional arguments are used to configure the query builder of the edge.
func (tdq *TimeDewQuery) WithReactionUser(opts ...func(*UserQuery)) *TimeDewQuery {
	query := &UserQuery{config: tdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tdq.withReactionUser = query
	return tdq
}

// WithReactions tells the query-builder to eager-load the nodes that are connected to
// the "reactions" edge. The optional arguments are used to configure the query builder of the edge.
func (tdq *TimeDewQuery) WithReactions(opts ...func(*ReactionQuery)) *TimeDewQuery {
	query := &ReactionQuery{config: tdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tdq.withReactions = query
	return tdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TimeDew.Query().
//		GroupBy(timedew.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tdq *TimeDewQuery) GroupBy(field string, fields ...string) *TimeDewGroupBy {
	grbuild := &TimeDewGroupBy{config: tdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tdq.sqlQuery(ctx), nil
	}
	grbuild.label = timedew.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TimeDew.Query().
//		Select(timedew.FieldCreateTime).
//		Scan(ctx, &v)
func (tdq *TimeDewQuery) Select(fields ...string) *TimeDewSelect {
	tdq.fields = append(tdq.fields, fields...)
	selbuild := &TimeDewSelect{TimeDewQuery: tdq}
	selbuild.label = timedew.Label
	selbuild.flds, selbuild.scan = &tdq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a TimeDewSelect configured with the given aggregations.
func (tdq *TimeDewQuery) Aggregate(fns ...AggregateFunc) *TimeDewSelect {
	return tdq.Select().Aggregate(fns...)
}

func (tdq *TimeDewQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tdq.fields {
		if !timedew.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tdq.path != nil {
		prev, err := tdq.path(ctx)
		if err != nil {
			return err
		}
		tdq.sql = prev
	}
	return nil
}

func (tdq *TimeDewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TimeDew, error) {
	var (
		nodes       = []*TimeDew{}
		_spec       = tdq.querySpec()
		loadedTypes = [3]bool{
			tdq.withOwner != nil,
			tdq.withReactionUser != nil,
			tdq.withReactions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TimeDew).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TimeDew{config: tdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tdq.withOwner; query != nil {
		if err := tdq.loadOwner(ctx, query, nodes, nil,
			func(n *TimeDew, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := tdq.withReactionUser; query != nil {
		if err := tdq.loadReactionUser(ctx, query, nodes,
			func(n *TimeDew) { n.Edges.ReactionUser = []*User{} },
			func(n *TimeDew, e *User) { n.Edges.ReactionUser = append(n.Edges.ReactionUser, e) }); err != nil {
			return nil, err
		}
	}
	if query := tdq.withReactions; query != nil {
		if err := tdq.loadReactions(ctx, query, nodes,
			func(n *TimeDew) { n.Edges.Reactions = []*Reaction{} },
			func(n *TimeDew, e *Reaction) { n.Edges.Reactions = append(n.Edges.Reactions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tdq *TimeDewQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*TimeDew, init func(*TimeDew), assign func(*TimeDew, *User)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*TimeDew)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tdq *TimeDewQuery) loadReactionUser(ctx context.Context, query *UserQuery, nodes []*TimeDew, init func(*TimeDew), assign func(*TimeDew, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*TimeDew)
	nids := make(map[uint64]map[*TimeDew]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(timedew.ReactionUserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(timedew.ReactionUserPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(timedew.ReactionUserPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(timedew.ReactionUserPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*TimeDew]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "reaction_user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tdq *TimeDewQuery) loadReactions(ctx context.Context, query *ReactionQuery, nodes []*TimeDew, init func(*TimeDew), assign func(*TimeDew, *Reaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*TimeDew)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.InValues(timedew.ReactionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TimeDewID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_dew_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tdq *TimeDewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tdq.querySpec()
	_spec.Node.Columns = tdq.fields
	if len(tdq.fields) > 0 {
		_spec.Unique = tdq.unique != nil && *tdq.unique
	}
	return sqlgraph.CountNodes(ctx, tdq.driver, _spec)
}

func (tdq *TimeDewQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := tdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (tdq *TimeDewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timedew.Table,
			Columns: timedew.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: timedew.FieldID,
			},
		},
		From:   tdq.sql,
		Unique: true,
	}
	if unique := tdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timedew.FieldID)
		for i := range fields {
			if fields[i] != timedew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tdq *TimeDewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tdq.driver.Dialect())
	t1 := builder.Table(timedew.Table)
	columns := tdq.fields
	if len(columns) == 0 {
		columns = timedew.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tdq.sql != nil {
		selector = tdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tdq.unique != nil && *tdq.unique {
		selector.Distinct()
	}
	for _, p := range tdq.predicates {
		p(selector)
	}
	for _, p := range tdq.order {
		p(selector)
	}
	if offset := tdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TimeDewGroupBy is the group-by builder for TimeDew entities.
type TimeDewGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tdgb *TimeDewGroupBy) Aggregate(fns ...AggregateFunc) *TimeDewGroupBy {
	tdgb.fns = append(tdgb.fns, fns...)
	return tdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tdgb *TimeDewGroupBy) Scan(ctx context.Context, v any) error {
	query, err := tdgb.path(ctx)
	if err != nil {
		return err
	}
	tdgb.sql = query
	return tdgb.sqlScan(ctx, v)
}

func (tdgb *TimeDewGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range tdgb.fields {
		if !timedew.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tdgb *TimeDewGroupBy) sqlQuery() *sql.Selector {
	selector := tdgb.sql.Select()
	aggregation := make([]string, 0, len(tdgb.fns))
	for _, fn := range tdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tdgb.fields)+len(tdgb.fns))
		for _, f := range tdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tdgb.fields...)...)
}

// TimeDewSelect is the builder for selecting fields of TimeDew entities.
type TimeDewSelect struct {
	*TimeDewQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tds *TimeDewSelect) Aggregate(fns ...AggregateFunc) *TimeDewSelect {
	tds.fns = append(tds.fns, fns...)
	return tds
}

// Scan applies the selector query and scans the result into the given value.
func (tds *TimeDewSelect) Scan(ctx context.Context, v any) error {
	if err := tds.prepareQuery(ctx); err != nil {
		return err
	}
	tds.sql = tds.TimeDewQuery.sqlQuery(ctx)
	return tds.sqlScan(ctx, v)
}

func (tds *TimeDewSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(tds.fns))
	for _, fn := range tds.fns {
		aggregation = append(aggregation, fn(tds.sql))
	}
	switch n := len(*tds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		tds.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		tds.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := tds.sql.Query()
	if err := tds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
