// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TimeDewUpdate is the builder for updating TimeDew entities.
type TimeDewUpdate struct {
	config
	hooks    []Hook
	mutation *TimeDewMutation
}

// Where appends a list predicates to the TimeDewUpdate builder.
func (tdu *TimeDewUpdate) Where(ps ...predicate.TimeDew) *TimeDewUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetUpdateTime sets the "update_time" field.
func (tdu *TimeDewUpdate) SetUpdateTime(t time.Time) *TimeDewUpdate {
	tdu.mutation.SetUpdateTime(t)
	return tdu
}

// SetName sets the "name" field.
func (tdu *TimeDewUpdate) SetName(s string) *TimeDewUpdate {
	tdu.mutation.SetName(s)
	return tdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableName(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetName(*s)
	}
	return tdu
}

// ClearName clears the value of the "name" field.
func (tdu *TimeDewUpdate) ClearName() *TimeDewUpdate {
	tdu.mutation.ClearName()
	return tdu
}

// SetDescription sets the "description" field.
func (tdu *TimeDewUpdate) SetDescription(s string) *TimeDewUpdate {
	tdu.mutation.SetDescription(s)
	return tdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableDescription(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetDescription(*s)
	}
	return tdu
}

// ClearDescription clears the value of the "description" field.
func (tdu *TimeDewUpdate) ClearDescription() *TimeDewUpdate {
	tdu.mutation.ClearDescription()
	return tdu
}

// SetRawData sets the "raw_data" field.
func (tdu *TimeDewUpdate) SetRawData(s []string) *TimeDewUpdate {
	tdu.mutation.SetRawData(s)
	return tdu
}

// AppendRawData appends s to the "raw_data" field.
func (tdu *TimeDewUpdate) AppendRawData(s []string) *TimeDewUpdate {
	tdu.mutation.AppendRawData(s)
	return tdu
}

// ClearRawData clears the value of the "raw_data" field.
func (tdu *TimeDewUpdate) ClearRawData() *TimeDewUpdate {
	tdu.mutation.ClearRawData()
	return tdu
}

// SetSpeechs sets the "speechs" field.
func (tdu *TimeDewUpdate) SetSpeechs(s string) *TimeDewUpdate {
	tdu.mutation.SetSpeechs(s)
	return tdu
}

// SetNillableSpeechs sets the "speechs" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableSpeechs(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetSpeechs(*s)
	}
	return tdu
}

// ClearSpeechs clears the value of the "speechs" field.
func (tdu *TimeDewUpdate) ClearSpeechs() *TimeDewUpdate {
	tdu.mutation.ClearSpeechs()
	return tdu
}

// SetPlace sets the "place" field.
func (tdu *TimeDewUpdate) SetPlace(s string) *TimeDewUpdate {
	tdu.mutation.SetPlace(s)
	return tdu
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillablePlace(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetPlace(*s)
	}
	return tdu
}

// ClearPlace clears the value of the "place" field.
func (tdu *TimeDewUpdate) ClearPlace() *TimeDewUpdate {
	tdu.mutation.ClearPlace()
	return tdu
}

// SetGeneratedContent sets the "generated_content" field.
func (tdu *TimeDewUpdate) SetGeneratedContent(s string) *TimeDewUpdate {
	tdu.mutation.SetGeneratedContent(s)
	return tdu
}

// SetNillableGeneratedContent sets the "generated_content" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableGeneratedContent(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetGeneratedContent(*s)
	}
	return tdu
}

// ClearGeneratedContent clears the value of the "generated_content" field.
func (tdu *TimeDewUpdate) ClearGeneratedContent() *TimeDewUpdate {
	tdu.mutation.ClearGeneratedContent()
	return tdu
}

// SetPromptSeq sets the "prompt_seq" field.
func (tdu *TimeDewUpdate) SetPromptSeq(s string) *TimeDewUpdate {
	tdu.mutation.SetPromptSeq(s)
	return tdu
}

// SetNillablePromptSeq sets the "prompt_seq" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillablePromptSeq(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetPromptSeq(*s)
	}
	return tdu
}

// ClearPromptSeq clears the value of the "prompt_seq" field.
func (tdu *TimeDewUpdate) ClearPromptSeq() *TimeDewUpdate {
	tdu.mutation.ClearPromptSeq()
	return tdu
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (tdu *TimeDewUpdate) SetPromptSeqFullText(s string) *TimeDewUpdate {
	tdu.mutation.SetPromptSeqFullText(s)
	return tdu
}

// SetNillablePromptSeqFullText sets the "prompt_seq_full_text" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillablePromptSeqFullText(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetPromptSeqFullText(*s)
	}
	return tdu
}

// ClearPromptSeqFullText clears the value of the "prompt_seq_full_text" field.
func (tdu *TimeDewUpdate) ClearPromptSeqFullText() *TimeDewUpdate {
	tdu.mutation.ClearPromptSeqFullText()
	return tdu
}

// SetJoinedLabel sets the "joined_label" field.
func (tdu *TimeDewUpdate) SetJoinedLabel(s string) *TimeDewUpdate {
	tdu.mutation.SetJoinedLabel(s)
	return tdu
}

// SetNillableJoinedLabel sets the "joined_label" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableJoinedLabel(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetJoinedLabel(*s)
	}
	return tdu
}

// ClearJoinedLabel clears the value of the "joined_label" field.
func (tdu *TimeDewUpdate) ClearJoinedLabel() *TimeDewUpdate {
	tdu.mutation.ClearJoinedLabel()
	return tdu
}

// SetPicURL sets the "pic_url" field.
func (tdu *TimeDewUpdate) SetPicURL(s string) *TimeDewUpdate {
	tdu.mutation.SetPicURL(s)
	return tdu
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillablePicURL(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetPicURL(*s)
	}
	return tdu
}

// ClearPicURL clears the value of the "pic_url" field.
func (tdu *TimeDewUpdate) ClearPicURL() *TimeDewUpdate {
	tdu.mutation.ClearPicURL()
	return tdu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tdu *TimeDewUpdate) SetThumbnailURL(s string) *TimeDewUpdate {
	tdu.mutation.SetThumbnailURL(s)
	return tdu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableThumbnailURL(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetThumbnailURL(*s)
	}
	return tdu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tdu *TimeDewUpdate) ClearThumbnailURL() *TimeDewUpdate {
	tdu.mutation.ClearThumbnailURL()
	return tdu
}

// SetResourceURL sets the "resource_url" field.
func (tdu *TimeDewUpdate) SetResourceURL(s string) *TimeDewUpdate {
	tdu.mutation.SetResourceURL(s)
	return tdu
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableResourceURL(s *string) *TimeDewUpdate {
	if s != nil {
		tdu.SetResourceURL(*s)
	}
	return tdu
}

// ClearResourceURL clears the value of the "resource_url" field.
func (tdu *TimeDewUpdate) ClearResourceURL() *TimeDewUpdate {
	tdu.mutation.ClearResourceURL()
	return tdu
}

// SetStatus sets the "status" field.
func (tdu *TimeDewUpdate) SetStatus(t timedew.Status) *TimeDewUpdate {
	tdu.mutation.SetStatus(t)
	return tdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableStatus(t *timedew.Status) *TimeDewUpdate {
	if t != nil {
		tdu.SetStatus(*t)
	}
	return tdu
}

// SetType sets the "type" field.
func (tdu *TimeDewUpdate) SetType(t timedew.Type) *TimeDewUpdate {
	tdu.mutation.SetType(t)
	return tdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableType(t *timedew.Type) *TimeDewUpdate {
	if t != nil {
		tdu.SetType(*t)
	}
	return tdu
}

// SetUserID sets the "user_id" field.
func (tdu *TimeDewUpdate) SetUserID(u uint64) *TimeDewUpdate {
	tdu.mutation.SetUserID(u)
	return tdu
}

// SetCsFieldID sets the "cs_field_id" field.
func (tdu *TimeDewUpdate) SetCsFieldID(u uint64) *TimeDewUpdate {
	tdu.mutation.ResetCsFieldID()
	tdu.mutation.SetCsFieldID(u)
	return tdu
}

// SetNillableCsFieldID sets the "cs_field_id" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableCsFieldID(u *uint64) *TimeDewUpdate {
	if u != nil {
		tdu.SetCsFieldID(*u)
	}
	return tdu
}

// AddCsFieldID adds u to the "cs_field_id" field.
func (tdu *TimeDewUpdate) AddCsFieldID(u int64) *TimeDewUpdate {
	tdu.mutation.AddCsFieldID(u)
	return tdu
}

// ClearCsFieldID clears the value of the "cs_field_id" field.
func (tdu *TimeDewUpdate) ClearCsFieldID() *TimeDewUpdate {
	tdu.mutation.ClearCsFieldID()
	return tdu
}

// SetTargetID sets the "target_id" field.
func (tdu *TimeDewUpdate) SetTargetID(u uint64) *TimeDewUpdate {
	tdu.mutation.ResetTargetID()
	tdu.mutation.SetTargetID(u)
	return tdu
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (tdu *TimeDewUpdate) SetNillableTargetID(u *uint64) *TimeDewUpdate {
	if u != nil {
		tdu.SetTargetID(*u)
	}
	return tdu
}

// AddTargetID adds u to the "target_id" field.
func (tdu *TimeDewUpdate) AddTargetID(u int64) *TimeDewUpdate {
	tdu.mutation.AddTargetID(u)
	return tdu
}

// ClearTargetID clears the value of the "target_id" field.
func (tdu *TimeDewUpdate) ClearTargetID() *TimeDewUpdate {
	tdu.mutation.ClearTargetID()
	return tdu
}

// SetMembers sets the "members" field.
func (tdu *TimeDewUpdate) SetMembers(s []string) *TimeDewUpdate {
	tdu.mutation.SetMembers(s)
	return tdu
}

// AppendMembers appends s to the "members" field.
func (tdu *TimeDewUpdate) AppendMembers(s []string) *TimeDewUpdate {
	tdu.mutation.AppendMembers(s)
	return tdu
}

// ClearMembers clears the value of the "members" field.
func (tdu *TimeDewUpdate) ClearMembers() *TimeDewUpdate {
	tdu.mutation.ClearMembers()
	return tdu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tdu *TimeDewUpdate) SetOwnerID(id uint64) *TimeDewUpdate {
	tdu.mutation.SetOwnerID(id)
	return tdu
}

// SetOwner sets the "owner" edge to the User entity.
func (tdu *TimeDewUpdate) SetOwner(u *User) *TimeDewUpdate {
	return tdu.SetOwnerID(u.ID)
}

// AddReactionUserIDs adds the "reaction_user" edge to the User entity by IDs.
func (tdu *TimeDewUpdate) AddReactionUserIDs(ids ...uint64) *TimeDewUpdate {
	tdu.mutation.AddReactionUserIDs(ids...)
	return tdu
}

// AddReactionUser adds the "reaction_user" edges to the User entity.
func (tdu *TimeDewUpdate) AddReactionUser(u ...*User) *TimeDewUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tdu.AddReactionUserIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (tdu *TimeDewUpdate) AddReactionIDs(ids ...int) *TimeDewUpdate {
	tdu.mutation.AddReactionIDs(ids...)
	return tdu
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (tdu *TimeDewUpdate) AddReactions(r ...*Reaction) *TimeDewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tdu.AddReactionIDs(ids...)
}

// Mutation returns the TimeDewMutation object of the builder.
func (tdu *TimeDewUpdate) Mutation() *TimeDewMutation {
	return tdu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tdu *TimeDewUpdate) ClearOwner() *TimeDewUpdate {
	tdu.mutation.ClearOwner()
	return tdu
}

// ClearReactionUser clears all "reaction_user" edges to the User entity.
func (tdu *TimeDewUpdate) ClearReactionUser() *TimeDewUpdate {
	tdu.mutation.ClearReactionUser()
	return tdu
}

// RemoveReactionUserIDs removes the "reaction_user" edge to User entities by IDs.
func (tdu *TimeDewUpdate) RemoveReactionUserIDs(ids ...uint64) *TimeDewUpdate {
	tdu.mutation.RemoveReactionUserIDs(ids...)
	return tdu
}

// RemoveReactionUser removes "reaction_user" edges to User entities.
func (tdu *TimeDewUpdate) RemoveReactionUser(u ...*User) *TimeDewUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tdu.RemoveReactionUserIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (tdu *TimeDewUpdate) ClearReactions() *TimeDewUpdate {
	tdu.mutation.ClearReactions()
	return tdu
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (tdu *TimeDewUpdate) RemoveReactionIDs(ids ...int) *TimeDewUpdate {
	tdu.mutation.RemoveReactionIDs(ids...)
	return tdu
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (tdu *TimeDewUpdate) RemoveReactions(r ...*Reaction) *TimeDewUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tdu.RemoveReactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TimeDewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tdu.defaults()
	if len(tdu.hooks) == 0 {
		if err = tdu.check(); err != nil {
			return 0, err
		}
		affected, err = tdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimeDewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdu.check(); err != nil {
				return 0, err
			}
			tdu.mutation = mutation
			affected, err = tdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdu.hooks) - 1; i >= 0; i-- {
			if tdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TimeDewUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TimeDewUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TimeDewUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdu *TimeDewUpdate) defaults() {
	if _, ok := tdu.mutation.UpdateTime(); !ok {
		v := timedew.UpdateDefaultUpdateTime()
		tdu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TimeDewUpdate) check() error {
	if v, ok := tdu.mutation.Status(); ok {
		if err := timedew.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TimeDew.status": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.GetType(); ok {
		if err := timedew.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TimeDew.type": %w`, err)}
		}
	}
	if _, ok := tdu.mutation.OwnerID(); tdu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TimeDew.owner"`)
	}
	return nil
}

func (tdu *TimeDewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timedew.Table,
			Columns: timedew.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: timedew.FieldID,
			},
		},
	}
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.UpdateTime(); ok {
		_spec.SetField(timedew.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tdu.mutation.Name(); ok {
		_spec.SetField(timedew.FieldName, field.TypeString, value)
	}
	if tdu.mutation.NameCleared() {
		_spec.ClearField(timedew.FieldName, field.TypeString)
	}
	if value, ok := tdu.mutation.Description(); ok {
		_spec.SetField(timedew.FieldDescription, field.TypeString, value)
	}
	if tdu.mutation.DescriptionCleared() {
		_spec.ClearField(timedew.FieldDescription, field.TypeString)
	}
	if value, ok := tdu.mutation.RawData(); ok {
		_spec.SetField(timedew.FieldRawData, field.TypeJSON, value)
	}
	if value, ok := tdu.mutation.AppendedRawData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, timedew.FieldRawData, value)
		})
	}
	if tdu.mutation.RawDataCleared() {
		_spec.ClearField(timedew.FieldRawData, field.TypeJSON)
	}
	if value, ok := tdu.mutation.Speechs(); ok {
		_spec.SetField(timedew.FieldSpeechs, field.TypeString, value)
	}
	if tdu.mutation.SpeechsCleared() {
		_spec.ClearField(timedew.FieldSpeechs, field.TypeString)
	}
	if value, ok := tdu.mutation.Place(); ok {
		_spec.SetField(timedew.FieldPlace, field.TypeString, value)
	}
	if tdu.mutation.PlaceCleared() {
		_spec.ClearField(timedew.FieldPlace, field.TypeString)
	}
	if value, ok := tdu.mutation.GeneratedContent(); ok {
		_spec.SetField(timedew.FieldGeneratedContent, field.TypeString, value)
	}
	if tdu.mutation.GeneratedContentCleared() {
		_spec.ClearField(timedew.FieldGeneratedContent, field.TypeString)
	}
	if value, ok := tdu.mutation.PromptSeq(); ok {
		_spec.SetField(timedew.FieldPromptSeq, field.TypeString, value)
	}
	if tdu.mutation.PromptSeqCleared() {
		_spec.ClearField(timedew.FieldPromptSeq, field.TypeString)
	}
	if value, ok := tdu.mutation.PromptSeqFullText(); ok {
		_spec.SetField(timedew.FieldPromptSeqFullText, field.TypeString, value)
	}
	if tdu.mutation.PromptSeqFullTextCleared() {
		_spec.ClearField(timedew.FieldPromptSeqFullText, field.TypeString)
	}
	if value, ok := tdu.mutation.JoinedLabel(); ok {
		_spec.SetField(timedew.FieldJoinedLabel, field.TypeString, value)
	}
	if tdu.mutation.JoinedLabelCleared() {
		_spec.ClearField(timedew.FieldJoinedLabel, field.TypeString)
	}
	if value, ok := tdu.mutation.PicURL(); ok {
		_spec.SetField(timedew.FieldPicURL, field.TypeString, value)
	}
	if tdu.mutation.PicURLCleared() {
		_spec.ClearField(timedew.FieldPicURL, field.TypeString)
	}
	if value, ok := tdu.mutation.ThumbnailURL(); ok {
		_spec.SetField(timedew.FieldThumbnailURL, field.TypeString, value)
	}
	if tdu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(timedew.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tdu.mutation.ResourceURL(); ok {
		_spec.SetField(timedew.FieldResourceURL, field.TypeString, value)
	}
	if tdu.mutation.ResourceURLCleared() {
		_spec.ClearField(timedew.FieldResourceURL, field.TypeString)
	}
	if value, ok := tdu.mutation.Status(); ok {
		_spec.SetField(timedew.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tdu.mutation.GetType(); ok {
		_spec.SetField(timedew.FieldType, field.TypeEnum, value)
	}
	if value, ok := tdu.mutation.CsFieldID(); ok {
		_spec.SetField(timedew.FieldCsFieldID, field.TypeUint64, value)
	}
	if value, ok := tdu.mutation.AddedCsFieldID(); ok {
		_spec.AddField(timedew.FieldCsFieldID, field.TypeUint64, value)
	}
	if tdu.mutation.CsFieldIDCleared() {
		_spec.ClearField(timedew.FieldCsFieldID, field.TypeUint64)
	}
	if value, ok := tdu.mutation.TargetID(); ok {
		_spec.SetField(timedew.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := tdu.mutation.AddedTargetID(); ok {
		_spec.AddField(timedew.FieldTargetID, field.TypeUint64, value)
	}
	if tdu.mutation.TargetIDCleared() {
		_spec.ClearField(timedew.FieldTargetID, field.TypeUint64)
	}
	if value, ok := tdu.mutation.Members(); ok {
		_spec.SetField(timedew.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := tdu.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, timedew.FieldMembers, value)
		})
	}
	if tdu.mutation.MembersCleared() {
		_spec.ClearField(timedew.FieldMembers, field.TypeJSON)
	}
	if tdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timedew.OwnerTable,
			Columns: []string{timedew.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timedew.OwnerTable,
			Columns: []string{timedew.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tdu.mutation.ReactionUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		createE := &ReactionCreate{config: tdu.config, mutation: newReactionMutation(tdu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.RemovedReactionUserIDs(); len(nodes) > 0 && !tdu.mutation.ReactionUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: tdu.config, mutation: newReactionMutation(tdu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.ReactionUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: tdu.config, mutation: newReactionMutation(tdu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tdu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !tdu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timedew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TimeDewUpdateOne is the builder for updating a single TimeDew entity.
type TimeDewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeDewMutation
}

// SetUpdateTime sets the "update_time" field.
func (tduo *TimeDewUpdateOne) SetUpdateTime(t time.Time) *TimeDewUpdateOne {
	tduo.mutation.SetUpdateTime(t)
	return tduo
}

// SetName sets the "name" field.
func (tduo *TimeDewUpdateOne) SetName(s string) *TimeDewUpdateOne {
	tduo.mutation.SetName(s)
	return tduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableName(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetName(*s)
	}
	return tduo
}

// ClearName clears the value of the "name" field.
func (tduo *TimeDewUpdateOne) ClearName() *TimeDewUpdateOne {
	tduo.mutation.ClearName()
	return tduo
}

// SetDescription sets the "description" field.
func (tduo *TimeDewUpdateOne) SetDescription(s string) *TimeDewUpdateOne {
	tduo.mutation.SetDescription(s)
	return tduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableDescription(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetDescription(*s)
	}
	return tduo
}

// ClearDescription clears the value of the "description" field.
func (tduo *TimeDewUpdateOne) ClearDescription() *TimeDewUpdateOne {
	tduo.mutation.ClearDescription()
	return tduo
}

// SetRawData sets the "raw_data" field.
func (tduo *TimeDewUpdateOne) SetRawData(s []string) *TimeDewUpdateOne {
	tduo.mutation.SetRawData(s)
	return tduo
}

// AppendRawData appends s to the "raw_data" field.
func (tduo *TimeDewUpdateOne) AppendRawData(s []string) *TimeDewUpdateOne {
	tduo.mutation.AppendRawData(s)
	return tduo
}

// ClearRawData clears the value of the "raw_data" field.
func (tduo *TimeDewUpdateOne) ClearRawData() *TimeDewUpdateOne {
	tduo.mutation.ClearRawData()
	return tduo
}

// SetSpeechs sets the "speechs" field.
func (tduo *TimeDewUpdateOne) SetSpeechs(s string) *TimeDewUpdateOne {
	tduo.mutation.SetSpeechs(s)
	return tduo
}

// SetNillableSpeechs sets the "speechs" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableSpeechs(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetSpeechs(*s)
	}
	return tduo
}

// ClearSpeechs clears the value of the "speechs" field.
func (tduo *TimeDewUpdateOne) ClearSpeechs() *TimeDewUpdateOne {
	tduo.mutation.ClearSpeechs()
	return tduo
}

// SetPlace sets the "place" field.
func (tduo *TimeDewUpdateOne) SetPlace(s string) *TimeDewUpdateOne {
	tduo.mutation.SetPlace(s)
	return tduo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillablePlace(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetPlace(*s)
	}
	return tduo
}

// ClearPlace clears the value of the "place" field.
func (tduo *TimeDewUpdateOne) ClearPlace() *TimeDewUpdateOne {
	tduo.mutation.ClearPlace()
	return tduo
}

// SetGeneratedContent sets the "generated_content" field.
func (tduo *TimeDewUpdateOne) SetGeneratedContent(s string) *TimeDewUpdateOne {
	tduo.mutation.SetGeneratedContent(s)
	return tduo
}

// SetNillableGeneratedContent sets the "generated_content" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableGeneratedContent(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetGeneratedContent(*s)
	}
	return tduo
}

// ClearGeneratedContent clears the value of the "generated_content" field.
func (tduo *TimeDewUpdateOne) ClearGeneratedContent() *TimeDewUpdateOne {
	tduo.mutation.ClearGeneratedContent()
	return tduo
}

// SetPromptSeq sets the "prompt_seq" field.
func (tduo *TimeDewUpdateOne) SetPromptSeq(s string) *TimeDewUpdateOne {
	tduo.mutation.SetPromptSeq(s)
	return tduo
}

// SetNillablePromptSeq sets the "prompt_seq" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillablePromptSeq(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetPromptSeq(*s)
	}
	return tduo
}

// ClearPromptSeq clears the value of the "prompt_seq" field.
func (tduo *TimeDewUpdateOne) ClearPromptSeq() *TimeDewUpdateOne {
	tduo.mutation.ClearPromptSeq()
	return tduo
}

// SetPromptSeqFullText sets the "prompt_seq_full_text" field.
func (tduo *TimeDewUpdateOne) SetPromptSeqFullText(s string) *TimeDewUpdateOne {
	tduo.mutation.SetPromptSeqFullText(s)
	return tduo
}

// SetNillablePromptSeqFullText sets the "prompt_seq_full_text" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillablePromptSeqFullText(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetPromptSeqFullText(*s)
	}
	return tduo
}

// ClearPromptSeqFullText clears the value of the "prompt_seq_full_text" field.
func (tduo *TimeDewUpdateOne) ClearPromptSeqFullText() *TimeDewUpdateOne {
	tduo.mutation.ClearPromptSeqFullText()
	return tduo
}

// SetJoinedLabel sets the "joined_label" field.
func (tduo *TimeDewUpdateOne) SetJoinedLabel(s string) *TimeDewUpdateOne {
	tduo.mutation.SetJoinedLabel(s)
	return tduo
}

// SetNillableJoinedLabel sets the "joined_label" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableJoinedLabel(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetJoinedLabel(*s)
	}
	return tduo
}

// ClearJoinedLabel clears the value of the "joined_label" field.
func (tduo *TimeDewUpdateOne) ClearJoinedLabel() *TimeDewUpdateOne {
	tduo.mutation.ClearJoinedLabel()
	return tduo
}

// SetPicURL sets the "pic_url" field.
func (tduo *TimeDewUpdateOne) SetPicURL(s string) *TimeDewUpdateOne {
	tduo.mutation.SetPicURL(s)
	return tduo
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillablePicURL(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetPicURL(*s)
	}
	return tduo
}

// ClearPicURL clears the value of the "pic_url" field.
func (tduo *TimeDewUpdateOne) ClearPicURL() *TimeDewUpdateOne {
	tduo.mutation.ClearPicURL()
	return tduo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tduo *TimeDewUpdateOne) SetThumbnailURL(s string) *TimeDewUpdateOne {
	tduo.mutation.SetThumbnailURL(s)
	return tduo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableThumbnailURL(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetThumbnailURL(*s)
	}
	return tduo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tduo *TimeDewUpdateOne) ClearThumbnailURL() *TimeDewUpdateOne {
	tduo.mutation.ClearThumbnailURL()
	return tduo
}

// SetResourceURL sets the "resource_url" field.
func (tduo *TimeDewUpdateOne) SetResourceURL(s string) *TimeDewUpdateOne {
	tduo.mutation.SetResourceURL(s)
	return tduo
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableResourceURL(s *string) *TimeDewUpdateOne {
	if s != nil {
		tduo.SetResourceURL(*s)
	}
	return tduo
}

// ClearResourceURL clears the value of the "resource_url" field.
func (tduo *TimeDewUpdateOne) ClearResourceURL() *TimeDewUpdateOne {
	tduo.mutation.ClearResourceURL()
	return tduo
}

// SetStatus sets the "status" field.
func (tduo *TimeDewUpdateOne) SetStatus(t timedew.Status) *TimeDewUpdateOne {
	tduo.mutation.SetStatus(t)
	return tduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableStatus(t *timedew.Status) *TimeDewUpdateOne {
	if t != nil {
		tduo.SetStatus(*t)
	}
	return tduo
}

// SetType sets the "type" field.
func (tduo *TimeDewUpdateOne) SetType(t timedew.Type) *TimeDewUpdateOne {
	tduo.mutation.SetType(t)
	return tduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableType(t *timedew.Type) *TimeDewUpdateOne {
	if t != nil {
		tduo.SetType(*t)
	}
	return tduo
}

// SetUserID sets the "user_id" field.
func (tduo *TimeDewUpdateOne) SetUserID(u uint64) *TimeDewUpdateOne {
	tduo.mutation.SetUserID(u)
	return tduo
}

// SetCsFieldID sets the "cs_field_id" field.
func (tduo *TimeDewUpdateOne) SetCsFieldID(u uint64) *TimeDewUpdateOne {
	tduo.mutation.ResetCsFieldID()
	tduo.mutation.SetCsFieldID(u)
	return tduo
}

// SetNillableCsFieldID sets the "cs_field_id" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableCsFieldID(u *uint64) *TimeDewUpdateOne {
	if u != nil {
		tduo.SetCsFieldID(*u)
	}
	return tduo
}

// AddCsFieldID adds u to the "cs_field_id" field.
func (tduo *TimeDewUpdateOne) AddCsFieldID(u int64) *TimeDewUpdateOne {
	tduo.mutation.AddCsFieldID(u)
	return tduo
}

// ClearCsFieldID clears the value of the "cs_field_id" field.
func (tduo *TimeDewUpdateOne) ClearCsFieldID() *TimeDewUpdateOne {
	tduo.mutation.ClearCsFieldID()
	return tduo
}

// SetTargetID sets the "target_id" field.
func (tduo *TimeDewUpdateOne) SetTargetID(u uint64) *TimeDewUpdateOne {
	tduo.mutation.ResetTargetID()
	tduo.mutation.SetTargetID(u)
	return tduo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (tduo *TimeDewUpdateOne) SetNillableTargetID(u *uint64) *TimeDewUpdateOne {
	if u != nil {
		tduo.SetTargetID(*u)
	}
	return tduo
}

// AddTargetID adds u to the "target_id" field.
func (tduo *TimeDewUpdateOne) AddTargetID(u int64) *TimeDewUpdateOne {
	tduo.mutation.AddTargetID(u)
	return tduo
}

// ClearTargetID clears the value of the "target_id" field.
func (tduo *TimeDewUpdateOne) ClearTargetID() *TimeDewUpdateOne {
	tduo.mutation.ClearTargetID()
	return tduo
}

// SetMembers sets the "members" field.
func (tduo *TimeDewUpdateOne) SetMembers(s []string) *TimeDewUpdateOne {
	tduo.mutation.SetMembers(s)
	return tduo
}

// AppendMembers appends s to the "members" field.
func (tduo *TimeDewUpdateOne) AppendMembers(s []string) *TimeDewUpdateOne {
	tduo.mutation.AppendMembers(s)
	return tduo
}

// ClearMembers clears the value of the "members" field.
func (tduo *TimeDewUpdateOne) ClearMembers() *TimeDewUpdateOne {
	tduo.mutation.ClearMembers()
	return tduo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tduo *TimeDewUpdateOne) SetOwnerID(id uint64) *TimeDewUpdateOne {
	tduo.mutation.SetOwnerID(id)
	return tduo
}

// SetOwner sets the "owner" edge to the User entity.
func (tduo *TimeDewUpdateOne) SetOwner(u *User) *TimeDewUpdateOne {
	return tduo.SetOwnerID(u.ID)
}

// AddReactionUserIDs adds the "reaction_user" edge to the User entity by IDs.
func (tduo *TimeDewUpdateOne) AddReactionUserIDs(ids ...uint64) *TimeDewUpdateOne {
	tduo.mutation.AddReactionUserIDs(ids...)
	return tduo
}

// AddReactionUser adds the "reaction_user" edges to the User entity.
func (tduo *TimeDewUpdateOne) AddReactionUser(u ...*User) *TimeDewUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tduo.AddReactionUserIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (tduo *TimeDewUpdateOne) AddReactionIDs(ids ...int) *TimeDewUpdateOne {
	tduo.mutation.AddReactionIDs(ids...)
	return tduo
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (tduo *TimeDewUpdateOne) AddReactions(r ...*Reaction) *TimeDewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tduo.AddReactionIDs(ids...)
}

// Mutation returns the TimeDewMutation object of the builder.
func (tduo *TimeDewUpdateOne) Mutation() *TimeDewMutation {
	return tduo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tduo *TimeDewUpdateOne) ClearOwner() *TimeDewUpdateOne {
	tduo.mutation.ClearOwner()
	return tduo
}

// ClearReactionUser clears all "reaction_user" edges to the User entity.
func (tduo *TimeDewUpdateOne) ClearReactionUser() *TimeDewUpdateOne {
	tduo.mutation.ClearReactionUser()
	return tduo
}

// RemoveReactionUserIDs removes the "reaction_user" edge to User entities by IDs.
func (tduo *TimeDewUpdateOne) RemoveReactionUserIDs(ids ...uint64) *TimeDewUpdateOne {
	tduo.mutation.RemoveReactionUserIDs(ids...)
	return tduo
}

// RemoveReactionUser removes "reaction_user" edges to User entities.
func (tduo *TimeDewUpdateOne) RemoveReactionUser(u ...*User) *TimeDewUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tduo.RemoveReactionUserIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (tduo *TimeDewUpdateOne) ClearReactions() *TimeDewUpdateOne {
	tduo.mutation.ClearReactions()
	return tduo
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (tduo *TimeDewUpdateOne) RemoveReactionIDs(ids ...int) *TimeDewUpdateOne {
	tduo.mutation.RemoveReactionIDs(ids...)
	return tduo
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (tduo *TimeDewUpdateOne) RemoveReactions(r ...*Reaction) *TimeDewUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tduo.RemoveReactionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TimeDewUpdateOne) Select(field string, fields ...string) *TimeDewUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TimeDew entity.
func (tduo *TimeDewUpdateOne) Save(ctx context.Context) (*TimeDew, error) {
	var (
		err  error
		node *TimeDew
	)
	tduo.defaults()
	if len(tduo.hooks) == 0 {
		if err = tduo.check(); err != nil {
			return nil, err
		}
		node, err = tduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimeDewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tduo.check(); err != nil {
				return nil, err
			}
			tduo.mutation = mutation
			node, err = tduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tduo.hooks) - 1; i >= 0; i-- {
			if tduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TimeDew)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TimeDewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TimeDewUpdateOne) SaveX(ctx context.Context) *TimeDew {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TimeDewUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TimeDewUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tduo *TimeDewUpdateOne) defaults() {
	if _, ok := tduo.mutation.UpdateTime(); !ok {
		v := timedew.UpdateDefaultUpdateTime()
		tduo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TimeDewUpdateOne) check() error {
	if v, ok := tduo.mutation.Status(); ok {
		if err := timedew.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TimeDew.status": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.GetType(); ok {
		if err := timedew.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TimeDew.type": %w`, err)}
		}
	}
	if _, ok := tduo.mutation.OwnerID(); tduo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TimeDew.owner"`)
	}
	return nil
}

func (tduo *TimeDewUpdateOne) sqlSave(ctx context.Context) (_node *TimeDew, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timedew.Table,
			Columns: timedew.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: timedew.FieldID,
			},
		},
	}
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeDew.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timedew.FieldID)
		for _, f := range fields {
			if !timedew.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timedew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.UpdateTime(); ok {
		_spec.SetField(timedew.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tduo.mutation.Name(); ok {
		_spec.SetField(timedew.FieldName, field.TypeString, value)
	}
	if tduo.mutation.NameCleared() {
		_spec.ClearField(timedew.FieldName, field.TypeString)
	}
	if value, ok := tduo.mutation.Description(); ok {
		_spec.SetField(timedew.FieldDescription, field.TypeString, value)
	}
	if tduo.mutation.DescriptionCleared() {
		_spec.ClearField(timedew.FieldDescription, field.TypeString)
	}
	if value, ok := tduo.mutation.RawData(); ok {
		_spec.SetField(timedew.FieldRawData, field.TypeJSON, value)
	}
	if value, ok := tduo.mutation.AppendedRawData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, timedew.FieldRawData, value)
		})
	}
	if tduo.mutation.RawDataCleared() {
		_spec.ClearField(timedew.FieldRawData, field.TypeJSON)
	}
	if value, ok := tduo.mutation.Speechs(); ok {
		_spec.SetField(timedew.FieldSpeechs, field.TypeString, value)
	}
	if tduo.mutation.SpeechsCleared() {
		_spec.ClearField(timedew.FieldSpeechs, field.TypeString)
	}
	if value, ok := tduo.mutation.Place(); ok {
		_spec.SetField(timedew.FieldPlace, field.TypeString, value)
	}
	if tduo.mutation.PlaceCleared() {
		_spec.ClearField(timedew.FieldPlace, field.TypeString)
	}
	if value, ok := tduo.mutation.GeneratedContent(); ok {
		_spec.SetField(timedew.FieldGeneratedContent, field.TypeString, value)
	}
	if tduo.mutation.GeneratedContentCleared() {
		_spec.ClearField(timedew.FieldGeneratedContent, field.TypeString)
	}
	if value, ok := tduo.mutation.PromptSeq(); ok {
		_spec.SetField(timedew.FieldPromptSeq, field.TypeString, value)
	}
	if tduo.mutation.PromptSeqCleared() {
		_spec.ClearField(timedew.FieldPromptSeq, field.TypeString)
	}
	if value, ok := tduo.mutation.PromptSeqFullText(); ok {
		_spec.SetField(timedew.FieldPromptSeqFullText, field.TypeString, value)
	}
	if tduo.mutation.PromptSeqFullTextCleared() {
		_spec.ClearField(timedew.FieldPromptSeqFullText, field.TypeString)
	}
	if value, ok := tduo.mutation.JoinedLabel(); ok {
		_spec.SetField(timedew.FieldJoinedLabel, field.TypeString, value)
	}
	if tduo.mutation.JoinedLabelCleared() {
		_spec.ClearField(timedew.FieldJoinedLabel, field.TypeString)
	}
	if value, ok := tduo.mutation.PicURL(); ok {
		_spec.SetField(timedew.FieldPicURL, field.TypeString, value)
	}
	if tduo.mutation.PicURLCleared() {
		_spec.ClearField(timedew.FieldPicURL, field.TypeString)
	}
	if value, ok := tduo.mutation.ThumbnailURL(); ok {
		_spec.SetField(timedew.FieldThumbnailURL, field.TypeString, value)
	}
	if tduo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(timedew.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tduo.mutation.ResourceURL(); ok {
		_spec.SetField(timedew.FieldResourceURL, field.TypeString, value)
	}
	if tduo.mutation.ResourceURLCleared() {
		_spec.ClearField(timedew.FieldResourceURL, field.TypeString)
	}
	if value, ok := tduo.mutation.Status(); ok {
		_spec.SetField(timedew.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tduo.mutation.GetType(); ok {
		_spec.SetField(timedew.FieldType, field.TypeEnum, value)
	}
	if value, ok := tduo.mutation.CsFieldID(); ok {
		_spec.SetField(timedew.FieldCsFieldID, field.TypeUint64, value)
	}
	if value, ok := tduo.mutation.AddedCsFieldID(); ok {
		_spec.AddField(timedew.FieldCsFieldID, field.TypeUint64, value)
	}
	if tduo.mutation.CsFieldIDCleared() {
		_spec.ClearField(timedew.FieldCsFieldID, field.TypeUint64)
	}
	if value, ok := tduo.mutation.TargetID(); ok {
		_spec.SetField(timedew.FieldTargetID, field.TypeUint64, value)
	}
	if value, ok := tduo.mutation.AddedTargetID(); ok {
		_spec.AddField(timedew.FieldTargetID, field.TypeUint64, value)
	}
	if tduo.mutation.TargetIDCleared() {
		_spec.ClearField(timedew.FieldTargetID, field.TypeUint64)
	}
	if value, ok := tduo.mutation.Members(); ok {
		_spec.SetField(timedew.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := tduo.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, timedew.FieldMembers, value)
		})
	}
	if tduo.mutation.MembersCleared() {
		_spec.ClearField(timedew.FieldMembers, field.TypeJSON)
	}
	if tduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timedew.OwnerTable,
			Columns: []string{timedew.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timedew.OwnerTable,
			Columns: []string{timedew.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tduo.mutation.ReactionUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		createE := &ReactionCreate{config: tduo.config, mutation: newReactionMutation(tduo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.RemovedReactionUserIDs(); len(nodes) > 0 && !tduo.mutation.ReactionUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: tduo.config, mutation: newReactionMutation(tduo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.ReactionUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timedew.ReactionUserTable,
			Columns: timedew.ReactionUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: tduo.config, mutation: newReactionMutation(tduo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tduo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !tduo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   timedew.ReactionsTable,
			Columns: []string{timedew.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimeDew{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timedew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
