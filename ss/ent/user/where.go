// Code generated by ent, DO NOT EDIT.

package user

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OpenID applies equality check predicate on the "open_id" field. It's identical to OpenIDEQ.
func OpenID(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NickName applies equality check predicate on the "nick_name" field. It's identical to NickNameEQ.
func NickName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// SystemName applies equality check predicate on the "system_name" field. It's identical to SystemNameEQ.
func SystemName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemName), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnailURL), v))
	})
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// MobileNo applies equality check predicate on the "mobile_no" field. It's identical to MobileNoEQ.
func MobileNo(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileNo), v))
	})
}

// RegionCode applies equality check predicate on the "region_code" field. It's identical to RegionCodeEQ.
func RegionCode(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionCode), v))
	})
}

// EmailAddress applies equality check predicate on the "email_address" field. It's identical to EmailAddressEQ.
func EmailAddress(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailAddress), v))
	})
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// SchoolName applies equality check predicate on the "school_name" field. It's identical to SchoolNameEQ.
func SchoolName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolName), v))
	})
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBio), v))
	})
}

// IsOnline applies equality check predicate on the "is_online" field. It's identical to IsOnlineEQ.
func IsOnline(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOnline), v))
	})
}

// IsShowCollections applies equality check predicate on the "is_show_collections" field. It's identical to IsShowCollectionsEQ.
func IsShowCollections(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsShowCollections), v))
	})
}

// IsInvited applies equality check predicate on the "is_invited" field. It's identical to IsInvitedEQ.
func IsInvited(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInvited), v))
	})
}

// NeedPrivacyConfirm applies equality check predicate on the "need_privacy_confirm" field. It's identical to NeedPrivacyConfirmEQ.
func NeedPrivacyConfirm(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNeedPrivacyConfirm), v))
	})
}

// CurrentCsFieldID applies equality check predicate on the "current_cs_field_id" field. It's identical to CurrentCsFieldIDEQ.
func CurrentCsFieldID(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldName applies equality check predicate on the "current_cs_field_name" field. It's identical to CurrentCsFieldNameEQ.
func CurrentCsFieldName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCsFieldName), v))
	})
}

// PrivateCsFieldID applies equality check predicate on the "private_cs_field_id" field. It's identical to PrivateCsFieldIDEQ.
func PrivateCsFieldID(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldName applies equality check predicate on the "private_cs_field_name" field. It's identical to PrivateCsFieldNameEQ.
func PrivateCsFieldName(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateCsFieldName), v))
	})
}

// RegisterIP applies equality check predicate on the "register_ip" field. It's identical to RegisterIPEQ.
func RegisterIP(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterIP), v))
	})
}

// Constellation applies equality check predicate on the "constellation" field. It's identical to ConstellationEQ.
func Constellation(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConstellation), v))
	})
}

// TotalConnections applies equality check predicate on the "total_connections" field. It's identical to TotalConnectionsEQ.
func TotalConnections(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalConnections), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// OpenIDEQ applies the EQ predicate on the "open_id" field.
func OpenIDEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// OpenIDNEQ applies the NEQ predicate on the "open_id" field.
func OpenIDNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenID), v))
	})
}

// OpenIDIn applies the In predicate on the "open_id" field.
func OpenIDIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOpenID), v...))
	})
}

// OpenIDNotIn applies the NotIn predicate on the "open_id" field.
func OpenIDNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOpenID), v...))
	})
}

// OpenIDGT applies the GT predicate on the "open_id" field.
func OpenIDGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenID), v))
	})
}

// OpenIDGTE applies the GTE predicate on the "open_id" field.
func OpenIDGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenID), v))
	})
}

// OpenIDLT applies the LT predicate on the "open_id" field.
func OpenIDLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenID), v))
	})
}

// OpenIDLTE applies the LTE predicate on the "open_id" field.
func OpenIDLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenID), v))
	})
}

// OpenIDContains applies the Contains predicate on the "open_id" field.
func OpenIDContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpenID), v))
	})
}

// OpenIDHasPrefix applies the HasPrefix predicate on the "open_id" field.
func OpenIDHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpenID), v))
	})
}

// OpenIDHasSuffix applies the HasSuffix predicate on the "open_id" field.
func OpenIDHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpenID), v))
	})
}

// OpenIDIsNil applies the IsNil predicate on the "open_id" field.
func OpenIDIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpenID)))
	})
}

// OpenIDNotNil applies the NotNil predicate on the "open_id" field.
func OpenIDNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpenID)))
	})
}

// OpenIDEqualFold applies the EqualFold predicate on the "open_id" field.
func OpenIDEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpenID), v))
	})
}

// OpenIDContainsFold applies the ContainsFold predicate on the "open_id" field.
func OpenIDContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpenID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// NickNameEQ applies the EQ predicate on the "nick_name" field.
func NickNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// NickNameNEQ applies the NEQ predicate on the "nick_name" field.
func NickNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickName), v))
	})
}

// NickNameIn applies the In predicate on the "nick_name" field.
func NickNameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNickName), v...))
	})
}

// NickNameNotIn applies the NotIn predicate on the "nick_name" field.
func NickNameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNickName), v...))
	})
}

// NickNameGT applies the GT predicate on the "nick_name" field.
func NickNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickName), v))
	})
}

// NickNameGTE applies the GTE predicate on the "nick_name" field.
func NickNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickName), v))
	})
}

// NickNameLT applies the LT predicate on the "nick_name" field.
func NickNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickName), v))
	})
}

// NickNameLTE applies the LTE predicate on the "nick_name" field.
func NickNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickName), v))
	})
}

// NickNameContains applies the Contains predicate on the "nick_name" field.
func NickNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickName), v))
	})
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nick_name" field.
func NickNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickName), v))
	})
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nick_name" field.
func NickNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickName), v))
	})
}

// NickNameIsNil applies the IsNil predicate on the "nick_name" field.
func NickNameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNickName)))
	})
}

// NickNameNotNil applies the NotNil predicate on the "nick_name" field.
func NickNameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNickName)))
	})
}

// NickNameEqualFold applies the EqualFold predicate on the "nick_name" field.
func NickNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickName), v))
	})
}

// NickNameContainsFold applies the ContainsFold predicate on the "nick_name" field.
func NickNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickName), v))
	})
}

// SystemNameEQ applies the EQ predicate on the "system_name" field.
func SystemNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemName), v))
	})
}

// SystemNameNEQ applies the NEQ predicate on the "system_name" field.
func SystemNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemName), v))
	})
}

// SystemNameIn applies the In predicate on the "system_name" field.
func SystemNameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSystemName), v...))
	})
}

// SystemNameNotIn applies the NotIn predicate on the "system_name" field.
func SystemNameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSystemName), v...))
	})
}

// SystemNameGT applies the GT predicate on the "system_name" field.
func SystemNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemName), v))
	})
}

// SystemNameGTE applies the GTE predicate on the "system_name" field.
func SystemNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemName), v))
	})
}

// SystemNameLT applies the LT predicate on the "system_name" field.
func SystemNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemName), v))
	})
}

// SystemNameLTE applies the LTE predicate on the "system_name" field.
func SystemNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemName), v))
	})
}

// SystemNameContains applies the Contains predicate on the "system_name" field.
func SystemNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemName), v))
	})
}

// SystemNameHasPrefix applies the HasPrefix predicate on the "system_name" field.
func SystemNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemName), v))
	})
}

// SystemNameHasSuffix applies the HasSuffix predicate on the "system_name" field.
func SystemNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemName), v))
	})
}

// SystemNameIsNil applies the IsNil predicate on the "system_name" field.
func SystemNameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSystemName)))
	})
}

// SystemNameNotNil applies the NotNil predicate on the "system_name" field.
func SystemNameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSystemName)))
	})
}

// SystemNameEqualFold applies the EqualFold predicate on the "system_name" field.
func SystemNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemName), v))
	})
}

// SystemNameContainsFold applies the ContainsFold predicate on the "system_name" field.
func SystemNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemName), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatar)))
	})
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatar)))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThumbnailURL), v...))
	})
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThumbnailURL), v...))
	})
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThumbnailURL), v))
	})
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThumbnailURL), v))
	})
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSex), v))
	})
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSex), v...))
	})
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSex), v...))
	})
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSex), v))
	})
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSex), v))
	})
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSex), v))
	})
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSex), v))
	})
}

// SexContains applies the Contains predicate on the "sex" field.
func SexContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSex), v))
	})
}

// SexHasPrefix applies the HasPrefix predicate on the "sex" field.
func SexHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSex), v))
	})
}

// SexHasSuffix applies the HasSuffix predicate on the "sex" field.
func SexHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSex), v))
	})
}

// SexIsNil applies the IsNil predicate on the "sex" field.
func SexIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSex)))
	})
}

// SexNotNil applies the NotNil predicate on the "sex" field.
func SexNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSex)))
	})
}

// SexEqualFold applies the EqualFold predicate on the "sex" field.
func SexEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSex), v))
	})
}

// SexContainsFold applies the ContainsFold predicate on the "sex" field.
func SexContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSex), v))
	})
}

// MobileNoEQ applies the EQ predicate on the "mobile_no" field.
func MobileNoEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileNo), v))
	})
}

// MobileNoNEQ applies the NEQ predicate on the "mobile_no" field.
func MobileNoNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobileNo), v))
	})
}

// MobileNoIn applies the In predicate on the "mobile_no" field.
func MobileNoIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMobileNo), v...))
	})
}

// MobileNoNotIn applies the NotIn predicate on the "mobile_no" field.
func MobileNoNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMobileNo), v...))
	})
}

// MobileNoGT applies the GT predicate on the "mobile_no" field.
func MobileNoGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMobileNo), v))
	})
}

// MobileNoGTE applies the GTE predicate on the "mobile_no" field.
func MobileNoGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMobileNo), v))
	})
}

// MobileNoLT applies the LT predicate on the "mobile_no" field.
func MobileNoLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMobileNo), v))
	})
}

// MobileNoLTE applies the LTE predicate on the "mobile_no" field.
func MobileNoLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMobileNo), v))
	})
}

// MobileNoContains applies the Contains predicate on the "mobile_no" field.
func MobileNoContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMobileNo), v))
	})
}

// MobileNoHasPrefix applies the HasPrefix predicate on the "mobile_no" field.
func MobileNoHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMobileNo), v))
	})
}

// MobileNoHasSuffix applies the HasSuffix predicate on the "mobile_no" field.
func MobileNoHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMobileNo), v))
	})
}

// MobileNoIsNil applies the IsNil predicate on the "mobile_no" field.
func MobileNoIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMobileNo)))
	})
}

// MobileNoNotNil applies the NotNil predicate on the "mobile_no" field.
func MobileNoNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMobileNo)))
	})
}

// MobileNoEqualFold applies the EqualFold predicate on the "mobile_no" field.
func MobileNoEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMobileNo), v))
	})
}

// MobileNoContainsFold applies the ContainsFold predicate on the "mobile_no" field.
func MobileNoContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMobileNo), v))
	})
}

// RegionCodeEQ applies the EQ predicate on the "region_code" field.
func RegionCodeEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionCode), v))
	})
}

// RegionCodeNEQ applies the NEQ predicate on the "region_code" field.
func RegionCodeNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegionCode), v))
	})
}

// RegionCodeIn applies the In predicate on the "region_code" field.
func RegionCodeIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegionCode), v...))
	})
}

// RegionCodeNotIn applies the NotIn predicate on the "region_code" field.
func RegionCodeNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegionCode), v...))
	})
}

// RegionCodeGT applies the GT predicate on the "region_code" field.
func RegionCodeGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegionCode), v))
	})
}

// RegionCodeGTE applies the GTE predicate on the "region_code" field.
func RegionCodeGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegionCode), v))
	})
}

// RegionCodeLT applies the LT predicate on the "region_code" field.
func RegionCodeLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegionCode), v))
	})
}

// RegionCodeLTE applies the LTE predicate on the "region_code" field.
func RegionCodeLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegionCode), v))
	})
}

// RegionCodeContains applies the Contains predicate on the "region_code" field.
func RegionCodeContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegionCode), v))
	})
}

// RegionCodeHasPrefix applies the HasPrefix predicate on the "region_code" field.
func RegionCodeHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegionCode), v))
	})
}

// RegionCodeHasSuffix applies the HasSuffix predicate on the "region_code" field.
func RegionCodeHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegionCode), v))
	})
}

// RegionCodeIsNil applies the IsNil predicate on the "region_code" field.
func RegionCodeIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegionCode)))
	})
}

// RegionCodeNotNil applies the NotNil predicate on the "region_code" field.
func RegionCodeNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegionCode)))
	})
}

// RegionCodeEqualFold applies the EqualFold predicate on the "region_code" field.
func RegionCodeEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegionCode), v))
	})
}

// RegionCodeContainsFold applies the ContainsFold predicate on the "region_code" field.
func RegionCodeContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegionCode), v))
	})
}

// EmailAddressEQ applies the EQ predicate on the "email_address" field.
func EmailAddressEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressNEQ applies the NEQ predicate on the "email_address" field.
func EmailAddressNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressIn applies the In predicate on the "email_address" field.
func EmailAddressIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmailAddress), v...))
	})
}

// EmailAddressNotIn applies the NotIn predicate on the "email_address" field.
func EmailAddressNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmailAddress), v...))
	})
}

// EmailAddressGT applies the GT predicate on the "email_address" field.
func EmailAddressGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressGTE applies the GTE predicate on the "email_address" field.
func EmailAddressGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressLT applies the LT predicate on the "email_address" field.
func EmailAddressLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressLTE applies the LTE predicate on the "email_address" field.
func EmailAddressLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressContains applies the Contains predicate on the "email_address" field.
func EmailAddressContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressHasPrefix applies the HasPrefix predicate on the "email_address" field.
func EmailAddressHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressHasSuffix applies the HasSuffix predicate on the "email_address" field.
func EmailAddressHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressIsNil applies the IsNil predicate on the "email_address" field.
func EmailAddressIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmailAddress)))
	})
}

// EmailAddressNotNil applies the NotNil predicate on the "email_address" field.
func EmailAddressNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmailAddress)))
	})
}

// EmailAddressEqualFold applies the EqualFold predicate on the "email_address" field.
func EmailAddressEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressContainsFold applies the ContainsFold predicate on the "email_address" field.
func EmailAddressContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmailAddress), v))
	})
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthday), v))
	})
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBirthday), v...))
	})
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBirthday), v...))
	})
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthday), v))
	})
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthday), v))
	})
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthday), v))
	})
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthday), v))
	})
}

// BirthdayContains applies the Contains predicate on the "birthday" field.
func BirthdayContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBirthday), v))
	})
}

// BirthdayHasPrefix applies the HasPrefix predicate on the "birthday" field.
func BirthdayHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBirthday), v))
	})
}

// BirthdayHasSuffix applies the HasSuffix predicate on the "birthday" field.
func BirthdayHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBirthday), v))
	})
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthday)))
	})
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthday)))
	})
}

// BirthdayEqualFold applies the EqualFold predicate on the "birthday" field.
func BirthdayEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBirthday), v))
	})
}

// BirthdayContainsFold applies the ContainsFold predicate on the "birthday" field.
func BirthdayContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBirthday), v))
	})
}

// SchoolNameEQ applies the EQ predicate on the "school_name" field.
func SchoolNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolName), v))
	})
}

// SchoolNameNEQ applies the NEQ predicate on the "school_name" field.
func SchoolNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchoolName), v))
	})
}

// SchoolNameIn applies the In predicate on the "school_name" field.
func SchoolNameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSchoolName), v...))
	})
}

// SchoolNameNotIn applies the NotIn predicate on the "school_name" field.
func SchoolNameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSchoolName), v...))
	})
}

// SchoolNameGT applies the GT predicate on the "school_name" field.
func SchoolNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchoolName), v))
	})
}

// SchoolNameGTE applies the GTE predicate on the "school_name" field.
func SchoolNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchoolName), v))
	})
}

// SchoolNameLT applies the LT predicate on the "school_name" field.
func SchoolNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchoolName), v))
	})
}

// SchoolNameLTE applies the LTE predicate on the "school_name" field.
func SchoolNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchoolName), v))
	})
}

// SchoolNameContains applies the Contains predicate on the "school_name" field.
func SchoolNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchoolName), v))
	})
}

// SchoolNameHasPrefix applies the HasPrefix predicate on the "school_name" field.
func SchoolNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchoolName), v))
	})
}

// SchoolNameHasSuffix applies the HasSuffix predicate on the "school_name" field.
func SchoolNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchoolName), v))
	})
}

// SchoolNameIsNil applies the IsNil predicate on the "school_name" field.
func SchoolNameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSchoolName)))
	})
}

// SchoolNameNotNil applies the NotNil predicate on the "school_name" field.
func SchoolNameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSchoolName)))
	})
}

// SchoolNameEqualFold applies the EqualFold predicate on the "school_name" field.
func SchoolNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchoolName), v))
	})
}

// SchoolNameContainsFold applies the ContainsFold predicate on the "school_name" field.
func SchoolNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchoolName), v))
	})
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBio), v))
	})
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBio), v))
	})
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBio), v...))
	})
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBio), v...))
	})
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBio), v))
	})
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBio), v))
	})
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBio), v))
	})
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBio), v))
	})
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBio), v))
	})
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBio), v))
	})
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBio), v))
	})
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBio)))
	})
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBio)))
	})
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBio), v))
	})
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBio), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRole), v))
	})
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRole), v))
	})
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRole), v...))
	})
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRole), v...))
	})
}

// IsOnlineEQ applies the EQ predicate on the "is_online" field.
func IsOnlineEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOnline), v))
	})
}

// IsOnlineNEQ applies the NEQ predicate on the "is_online" field.
func IsOnlineNEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsOnline), v))
	})
}

// IsOnlineIsNil applies the IsNil predicate on the "is_online" field.
func IsOnlineIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsOnline)))
	})
}

// IsOnlineNotNil applies the NotNil predicate on the "is_online" field.
func IsOnlineNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsOnline)))
	})
}

// IsShowCollectionsEQ applies the EQ predicate on the "is_show_collections" field.
func IsShowCollectionsEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsShowCollections), v))
	})
}

// IsShowCollectionsNEQ applies the NEQ predicate on the "is_show_collections" field.
func IsShowCollectionsNEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsShowCollections), v))
	})
}

// IsInvitedEQ applies the EQ predicate on the "is_invited" field.
func IsInvitedEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInvited), v))
	})
}

// IsInvitedNEQ applies the NEQ predicate on the "is_invited" field.
func IsInvitedNEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsInvited), v))
	})
}

// NeedPrivacyConfirmEQ applies the EQ predicate on the "need_privacy_confirm" field.
func NeedPrivacyConfirmEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNeedPrivacyConfirm), v))
	})
}

// NeedPrivacyConfirmNEQ applies the NEQ predicate on the "need_privacy_confirm" field.
func NeedPrivacyConfirmNEQ(v bool) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNeedPrivacyConfirm), v))
	})
}

// CurrentCsFieldIDEQ applies the EQ predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDEQ(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDNEQ applies the NEQ predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDNEQ(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDIn applies the In predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDIn(vs ...uint64) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrentCsFieldID), v...))
	})
}

// CurrentCsFieldIDNotIn applies the NotIn predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDNotIn(vs ...uint64) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrentCsFieldID), v...))
	})
}

// CurrentCsFieldIDGT applies the GT predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDGT(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDGTE applies the GTE predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDGTE(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDLT applies the LT predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDLT(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDLTE applies the LTE predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDLTE(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentCsFieldID), v))
	})
}

// CurrentCsFieldIDIsNil applies the IsNil predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentCsFieldID)))
	})
}

// CurrentCsFieldIDNotNil applies the NotNil predicate on the "current_cs_field_id" field.
func CurrentCsFieldIDNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentCsFieldID)))
	})
}

// CurrentCsFieldNameEQ applies the EQ predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameNEQ applies the NEQ predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameIn applies the In predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrentCsFieldName), v...))
	})
}

// CurrentCsFieldNameNotIn applies the NotIn predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrentCsFieldName), v...))
	})
}

// CurrentCsFieldNameGT applies the GT predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameGTE applies the GTE predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameLT applies the LT predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameLTE applies the LTE predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameContains applies the Contains predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameHasPrefix applies the HasPrefix predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameHasSuffix applies the HasSuffix predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameIsNil applies the IsNil predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentCsFieldName)))
	})
}

// CurrentCsFieldNameNotNil applies the NotNil predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentCsFieldName)))
	})
}

// CurrentCsFieldNameEqualFold applies the EqualFold predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrentCsFieldName), v))
	})
}

// CurrentCsFieldNameContainsFold applies the ContainsFold predicate on the "current_cs_field_name" field.
func CurrentCsFieldNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrentCsFieldName), v))
	})
}

// PrivateCsFieldIDEQ applies the EQ predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDEQ(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDNEQ applies the NEQ predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDNEQ(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDIn applies the In predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDIn(vs ...uint64) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrivateCsFieldID), v...))
	})
}

// PrivateCsFieldIDNotIn applies the NotIn predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDNotIn(vs ...uint64) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrivateCsFieldID), v...))
	})
}

// PrivateCsFieldIDGT applies the GT predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDGT(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDGTE applies the GTE predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDGTE(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDLT applies the LT predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDLT(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDLTE applies the LTE predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDLTE(v uint64) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateCsFieldID), v))
	})
}

// PrivateCsFieldIDIsNil applies the IsNil predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrivateCsFieldID)))
	})
}

// PrivateCsFieldIDNotNil applies the NotNil predicate on the "private_cs_field_id" field.
func PrivateCsFieldIDNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrivateCsFieldID)))
	})
}

// PrivateCsFieldNameEQ applies the EQ predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameNEQ applies the NEQ predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameIn applies the In predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrivateCsFieldName), v...))
	})
}

// PrivateCsFieldNameNotIn applies the NotIn predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrivateCsFieldName), v...))
	})
}

// PrivateCsFieldNameGT applies the GT predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameGTE applies the GTE predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameLT applies the LT predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameLTE applies the LTE predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameContains applies the Contains predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameHasPrefix applies the HasPrefix predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameHasSuffix applies the HasSuffix predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameIsNil applies the IsNil predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrivateCsFieldName)))
	})
}

// PrivateCsFieldNameNotNil applies the NotNil predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrivateCsFieldName)))
	})
}

// PrivateCsFieldNameEqualFold applies the EqualFold predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateCsFieldName), v))
	})
}

// PrivateCsFieldNameContainsFold applies the ContainsFold predicate on the "private_cs_field_name" field.
func PrivateCsFieldNameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateCsFieldName), v))
	})
}

// RegisterIPEQ applies the EQ predicate on the "register_ip" field.
func RegisterIPEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPNEQ applies the NEQ predicate on the "register_ip" field.
func RegisterIPNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPIn applies the In predicate on the "register_ip" field.
func RegisterIPIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegisterIP), v...))
	})
}

// RegisterIPNotIn applies the NotIn predicate on the "register_ip" field.
func RegisterIPNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegisterIP), v...))
	})
}

// RegisterIPGT applies the GT predicate on the "register_ip" field.
func RegisterIPGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPGTE applies the GTE predicate on the "register_ip" field.
func RegisterIPGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPLT applies the LT predicate on the "register_ip" field.
func RegisterIPLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPLTE applies the LTE predicate on the "register_ip" field.
func RegisterIPLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPContains applies the Contains predicate on the "register_ip" field.
func RegisterIPContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPHasPrefix applies the HasPrefix predicate on the "register_ip" field.
func RegisterIPHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPHasSuffix applies the HasSuffix predicate on the "register_ip" field.
func RegisterIPHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPIsNil applies the IsNil predicate on the "register_ip" field.
func RegisterIPIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegisterIP)))
	})
}

// RegisterIPNotNil applies the NotNil predicate on the "register_ip" field.
func RegisterIPNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegisterIP)))
	})
}

// RegisterIPEqualFold applies the EqualFold predicate on the "register_ip" field.
func RegisterIPEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegisterIP), v))
	})
}

// RegisterIPContainsFold applies the ContainsFold predicate on the "register_ip" field.
func RegisterIPContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegisterIP), v))
	})
}

// ConstellationEQ applies the EQ predicate on the "constellation" field.
func ConstellationEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConstellation), v))
	})
}

// ConstellationNEQ applies the NEQ predicate on the "constellation" field.
func ConstellationNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConstellation), v))
	})
}

// ConstellationIn applies the In predicate on the "constellation" field.
func ConstellationIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldConstellation), v...))
	})
}

// ConstellationNotIn applies the NotIn predicate on the "constellation" field.
func ConstellationNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldConstellation), v...))
	})
}

// ConstellationGT applies the GT predicate on the "constellation" field.
func ConstellationGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConstellation), v))
	})
}

// ConstellationGTE applies the GTE predicate on the "constellation" field.
func ConstellationGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConstellation), v))
	})
}

// ConstellationLT applies the LT predicate on the "constellation" field.
func ConstellationLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConstellation), v))
	})
}

// ConstellationLTE applies the LTE predicate on the "constellation" field.
func ConstellationLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConstellation), v))
	})
}

// ConstellationContains applies the Contains predicate on the "constellation" field.
func ConstellationContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConstellation), v))
	})
}

// ConstellationHasPrefix applies the HasPrefix predicate on the "constellation" field.
func ConstellationHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConstellation), v))
	})
}

// ConstellationHasSuffix applies the HasSuffix predicate on the "constellation" field.
func ConstellationHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConstellation), v))
	})
}

// ConstellationIsNil applies the IsNil predicate on the "constellation" field.
func ConstellationIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConstellation)))
	})
}

// ConstellationNotNil applies the NotNil predicate on the "constellation" field.
func ConstellationNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConstellation)))
	})
}

// ConstellationEqualFold applies the EqualFold predicate on the "constellation" field.
func ConstellationEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConstellation), v))
	})
}

// ConstellationContainsFold applies the ContainsFold predicate on the "constellation" field.
func ConstellationContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConstellation), v))
	})
}

// TotalConnectionsEQ applies the EQ predicate on the "total_connections" field.
func TotalConnectionsEQ(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsNEQ applies the NEQ predicate on the "total_connections" field.
func TotalConnectionsNEQ(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsIn applies the In predicate on the "total_connections" field.
func TotalConnectionsIn(vs ...int) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalConnections), v...))
	})
}

// TotalConnectionsNotIn applies the NotIn predicate on the "total_connections" field.
func TotalConnectionsNotIn(vs ...int) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalConnections), v...))
	})
}

// TotalConnectionsGT applies the GT predicate on the "total_connections" field.
func TotalConnectionsGT(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsGTE applies the GTE predicate on the "total_connections" field.
func TotalConnectionsGTE(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsLT applies the LT predicate on the "total_connections" field.
func TotalConnectionsLT(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsLTE applies the LTE predicate on the "total_connections" field.
func TotalConnectionsLTE(v int) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalConnections), v))
	})
}

// TotalConnectionsIsNil applies the IsNil predicate on the "total_connections" field.
func TotalConnectionsIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalConnections)))
	})
}

// TotalConnectionsNotNil applies the NotNil predicate on the "total_connections" field.
func TotalConnectionsNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalConnections)))
	})
}

// HasUserAuth applies the HasEdge predicate on the "user_auth" edge.
func HasUserAuth() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserAuthTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAuthTable, UserAuthColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAuthWith applies the HasEdge predicate on the "user_auth" edge with a given conditions (other predicates).
func HasUserAuthWith(preds ...predicate.User_auth) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserAuthInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAuthTable, UserAuthColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MessageInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJoinedCsfield applies the HasEdge predicate on the "joined_csfield" edge.
func HasJoinedCsfield() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinedCsfieldTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JoinedCsfieldTable, JoinedCsfieldPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJoinedCsfieldWith applies the HasEdge predicate on the "joined_csfield" edge with a given conditions (other predicates).
func HasJoinedCsfieldWith(preds ...predicate.CSField) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinedCsfieldInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JoinedCsfieldTable, JoinedCsfieldPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFriends applies the HasEdge predicate on the "friends" edge.
func HasFriends() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FriendsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendsWith applies the HasEdge predicate on the "friends" edge with a given conditions (other predicates).
func HasFriendsWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHidden applies the HasEdge predicate on the "hidden" edge.
func HasHidden() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiddenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiddenTable, HiddenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiddenWith applies the HasEdge predicate on the "hidden" edge with a given conditions (other predicates).
func HasHiddenWith(preds ...predicate.Hidden) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiddenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiddenTable, HiddenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistory applies the HasEdge predicate on the "history" edge.
func HasHistory() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoryTable, HistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoryWith applies the HasEdge predicate on the "history" edge with a given conditions (other predicates).
func HasHistoryWith(preds ...predicate.User_history) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoryTable, HistoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToken applies the HasEdge predicate on the "token" edge.
func HasToken() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TokenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokenTable, TokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenWith applies the HasEdge predicate on the "token" edge with a given conditions (other predicates).
func HasTokenWith(preds ...predicate.Agora_token) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TokenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokenTable, TokenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreation applies the HasEdge predicate on the "creation" edge.
func HasCreation() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreationTable, CreationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreationWith applies the HasEdge predicate on the "creation" edge with a given conditions (other predicates).
func HasCreationWith(preds ...predicate.Creation) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreationTable, CreationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContact applies the HasEdge predicate on the "contact" edge.
func HasContact() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContactTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactTable, ContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactWith applies the HasEdge predicate on the "contact" edge with a given conditions (other predicates).
func HasContactWith(preds ...predicate.Contact) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContactInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactTable, ContactColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSetting applies the HasEdge predicate on the "setting" edge.
func HasSetting() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SettingTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SettingTable, SettingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettingWith applies the HasEdge predicate on the "setting" edge with a given conditions (other predicates).
func HasSettingWith(preds ...predicate.Setting) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SettingInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SettingTable, SettingColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNft applies the HasEdge predicate on the "nft" edge.
func HasNft() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NftTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NftTable, NftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNftWith applies the HasEdge predicate on the "nft" edge with a given conditions (other predicates).
func HasNftWith(preds ...predicate.NFT) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NftInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NftTable, NftColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStream applies the HasEdge predicate on the "stream" edge.
func HasStream() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StreamTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StreamTable, StreamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStreamWith applies the HasEdge predicate on the "stream" edge with a given conditions (other predicates).
func HasStreamWith(preds ...predicate.Stream) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StreamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StreamTable, StreamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMask applies the HasEdge predicate on the "mask" edge.
func HasMask() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MaskTable, MaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaskWith applies the HasEdge predicate on the "mask" edge with a given conditions (other predicates).
func HasMaskWith(preds ...predicate.Mask) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MaskTable, MaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTimedew applies the HasEdge predicate on the "timedew" edge.
func HasTimedew() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimedewTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimedewTable, TimedewColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimedewWith applies the HasEdge predicate on the "timedew" edge with a given conditions (other predicates).
func HasTimedewWith(preds ...predicate.TimeDew) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimedewInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimedewTable, TimedewColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CollectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInviteCode applies the HasEdge predicate on the "invite_code" edge.
func HasInviteCode() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InviteCodeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InviteCodeTable, InviteCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviteCodeWith applies the HasEdge predicate on the "invite_code" edge with a given conditions (other predicates).
func HasInviteCodeWith(preds ...predicate.Invite_Code) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InviteCodeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InviteCodeTable, InviteCodeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeedback applies the HasEdge predicate on the "feedback" edge.
func HasFeedback() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedbackTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeedbackTable, FeedbackColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedbackWith applies the HasEdge predicate on the "feedback" edge with a given conditions (other predicates).
func HasFeedbackWith(preds ...predicate.Feedback) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedbackInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeedbackTable, FeedbackColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactionTimedew applies the HasEdge predicate on the "reaction_timedew" edge.
func HasReactionTimedew() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionTimedewTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReactionTimedewTable, ReactionTimedewPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionTimedewWith applies the HasEdge predicate on the "reaction_timedew" edge with a given conditions (other predicates).
func HasReactionTimedewWith(preds ...predicate.TimeDew) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionTimedewInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReactionTimedewTable, ReactionTimedewPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJoins applies the HasEdge predicate on the "joins" edge.
func HasJoins() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, JoinsTable, JoinsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJoinsWith applies the HasEdge predicate on the "joins" edge with a given conditions (other predicates).
func HasJoinsWith(preds ...predicate.Join) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, JoinsTable, JoinsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFriendships applies the HasEdge predicate on the "friendships" edge.
func HasFriendships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FriendshipsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FriendshipsTable, FriendshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendshipsWith applies the HasEdge predicate on the "friendships" edge with a given conditions (other predicates).
func HasFriendshipsWith(preds ...predicate.Friendship) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FriendshipsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FriendshipsTable, FriendshipsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactions applies the HasEdge predicate on the "reactions" edge.
func HasReactions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionsWith applies the HasEdge predicate on the "reactions" edge with a given conditions (other predicates).
func HasReactionsWith(preds ...predicate.Reaction) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
