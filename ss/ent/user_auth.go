// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_auth"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// User_auth is the model entity for the User_auth schema.
type User_auth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 验证方式
	Type user_auth.Type `json:"type,omitempty"`
	// oauth来源
	OauthSource string `json:"oauth_source,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 手机号
	MobileNo string `json:"mobile_no,omitempty"`
	// 密码
	Password string `json:"-"`
	// oauth access_token
	AccessToken string `json:"access_token,omitempty"`
	// oauth access_token
	OauthTokenType string `json:"oauth_token_type,omitempty"`
	// oauth refresh_token
	OauthRefreshToken string `json:"oauth_refresh_token,omitempty"`
	// oauth 唯一标识
	OauthID string `json:"oauth_id,omitempty"`
	// 是否注册完成，填完生日，name
	IsFinished bool `json:"is_finished,omitempty"`
	// oauth过期时间
	OauthExpiry time.Time `json:"oauth_expiry,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the User_authQuery when eager-loading is set.
	Edges User_authEdges `json:"edges"`
}

// User_authEdges holds the relations/edges for other nodes in the graph.
type User_authEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e User_authEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User_auth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user_auth.FieldIsFinished:
			values[i] = new(sql.NullBool)
		case user_auth.FieldID, user_auth.FieldUserID:
			values[i] = new(sql.NullInt64)
		case user_auth.FieldType, user_auth.FieldOauthSource, user_auth.FieldEmail, user_auth.FieldMobileNo, user_auth.FieldPassword, user_auth.FieldAccessToken, user_auth.FieldOauthTokenType, user_auth.FieldOauthRefreshToken, user_auth.FieldOauthID:
			values[i] = new(sql.NullString)
		case user_auth.FieldCreateTime, user_auth.FieldUpdateTime, user_auth.FieldOauthExpiry:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User_auth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User_auth fields.
func (ua *User_auth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user_auth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case user_auth.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ua.CreateTime = value.Time
			}
		case user_auth.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ua.UpdateTime = value.Time
			}
		case user_auth.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ua.Type = user_auth.Type(value.String)
			}
		case user_auth.FieldOauthSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_source", values[i])
			} else if value.Valid {
				ua.OauthSource = value.String
			}
		case user_auth.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ua.Email = value.String
			}
		case user_auth.FieldMobileNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_no", values[i])
			} else if value.Valid {
				ua.MobileNo = value.String
			}
		case user_auth.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ua.Password = value.String
			}
		case user_auth.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				ua.AccessToken = value.String
			}
		case user_auth.FieldOauthTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_token_type", values[i])
			} else if value.Valid {
				ua.OauthTokenType = value.String
			}
		case user_auth.FieldOauthRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_refresh_token", values[i])
			} else if value.Valid {
				ua.OauthRefreshToken = value.String
			}
		case user_auth.FieldOauthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_id", values[i])
			} else if value.Valid {
				ua.OauthID = value.String
			}
		case user_auth.FieldIsFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_finished", values[i])
			} else if value.Valid {
				ua.IsFinished = value.Bool
			}
		case user_auth.FieldOauthExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_expiry", values[i])
			} else if value.Valid {
				ua.OauthExpiry = value.Time
			}
		case user_auth.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ua.UserID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the User_auth entity.
func (ua *User_auth) QueryOwner() *UserQuery {
	return (&User_authClient{config: ua.config}).QueryOwner(ua)
}

// Update returns a builder for updating this User_auth.
// Note that you need to call User_auth.Unwrap() before calling this method if this User_auth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *User_auth) Update() *UserAuthUpdateOne {
	return (&User_authClient{config: ua.config}).UpdateOne(ua)
}

// Unwrap unwraps the User_auth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *User_auth) Unwrap() *User_auth {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: User_auth is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *User_auth) String() string {
	var builder strings.Builder
	builder.WriteString("User_auth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ua.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ua.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ua.Type))
	builder.WriteString(", ")
	builder.WriteString("oauth_source=")
	builder.WriteString(ua.OauthSource)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ua.Email)
	builder.WriteString(", ")
	builder.WriteString("mobile_no=")
	builder.WriteString(ua.MobileNo)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(ua.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("oauth_token_type=")
	builder.WriteString(ua.OauthTokenType)
	builder.WriteString(", ")
	builder.WriteString("oauth_refresh_token=")
	builder.WriteString(ua.OauthRefreshToken)
	builder.WriteString(", ")
	builder.WriteString("oauth_id=")
	builder.WriteString(ua.OauthID)
	builder.WriteString(", ")
	builder.WriteString("is_finished=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsFinished))
	builder.WriteString(", ")
	builder.WriteString("oauth_expiry=")
	builder.WriteString(ua.OauthExpiry.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// User_auths is a parsable slice of User_auth.
type User_auths []*User_auth

func (ua User_auths) config(cfg config) {
	for _i := range ua {
		ua[_i].config = cfg
	}
}
