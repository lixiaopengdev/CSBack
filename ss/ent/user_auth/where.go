// Code generated by ent, DO NOT EDIT.

package user_auth

import (
	"CSBackendTmp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OauthSource applies equality check predicate on the "oauth_source" field. It's identical to OauthSourceEQ.
func OauthSource(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthSource), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// MobileNo applies equality check predicate on the "mobile_no" field. It's identical to MobileNoEQ.
func MobileNo(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileNo), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// OauthTokenType applies equality check predicate on the "oauth_token_type" field. It's identical to OauthTokenTypeEQ.
func OauthTokenType(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthTokenType), v))
	})
}

// OauthRefreshToken applies equality check predicate on the "oauth_refresh_token" field. It's identical to OauthRefreshTokenEQ.
func OauthRefreshToken(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthID applies equality check predicate on the "oauth_id" field. It's identical to OauthIDEQ.
func OauthID(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthID), v))
	})
}

// IsFinished applies equality check predicate on the "is_finished" field. It's identical to IsFinishedEQ.
func IsFinished(v bool) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// OauthExpiry applies equality check predicate on the "oauth_expiry" field. It's identical to OauthExpiryEQ.
func OauthExpiry(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthExpiry), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// OauthSourceEQ applies the EQ predicate on the "oauth_source" field.
func OauthSourceEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthSource), v))
	})
}

// OauthSourceNEQ applies the NEQ predicate on the "oauth_source" field.
func OauthSourceNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthSource), v))
	})
}

// OauthSourceIn applies the In predicate on the "oauth_source" field.
func OauthSourceIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOauthSource), v...))
	})
}

// OauthSourceNotIn applies the NotIn predicate on the "oauth_source" field.
func OauthSourceNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOauthSource), v...))
	})
}

// OauthSourceGT applies the GT predicate on the "oauth_source" field.
func OauthSourceGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthSource), v))
	})
}

// OauthSourceGTE applies the GTE predicate on the "oauth_source" field.
func OauthSourceGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthSource), v))
	})
}

// OauthSourceLT applies the LT predicate on the "oauth_source" field.
func OauthSourceLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthSource), v))
	})
}

// OauthSourceLTE applies the LTE predicate on the "oauth_source" field.
func OauthSourceLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthSource), v))
	})
}

// OauthSourceContains applies the Contains predicate on the "oauth_source" field.
func OauthSourceContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthSource), v))
	})
}

// OauthSourceHasPrefix applies the HasPrefix predicate on the "oauth_source" field.
func OauthSourceHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthSource), v))
	})
}

// OauthSourceHasSuffix applies the HasSuffix predicate on the "oauth_source" field.
func OauthSourceHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthSource), v))
	})
}

// OauthSourceIsNil applies the IsNil predicate on the "oauth_source" field.
func OauthSourceIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOauthSource)))
	})
}

// OauthSourceNotNil applies the NotNil predicate on the "oauth_source" field.
func OauthSourceNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOauthSource)))
	})
}

// OauthSourceEqualFold applies the EqualFold predicate on the "oauth_source" field.
func OauthSourceEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthSource), v))
	})
}

// OauthSourceContainsFold applies the ContainsFold predicate on the "oauth_source" field.
func OauthSourceContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthSource), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmail)))
	})
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmail)))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// MobileNoEQ applies the EQ predicate on the "mobile_no" field.
func MobileNoEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileNo), v))
	})
}

// MobileNoNEQ applies the NEQ predicate on the "mobile_no" field.
func MobileNoNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobileNo), v))
	})
}

// MobileNoIn applies the In predicate on the "mobile_no" field.
func MobileNoIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMobileNo), v...))
	})
}

// MobileNoNotIn applies the NotIn predicate on the "mobile_no" field.
func MobileNoNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMobileNo), v...))
	})
}

// MobileNoGT applies the GT predicate on the "mobile_no" field.
func MobileNoGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMobileNo), v))
	})
}

// MobileNoGTE applies the GTE predicate on the "mobile_no" field.
func MobileNoGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMobileNo), v))
	})
}

// MobileNoLT applies the LT predicate on the "mobile_no" field.
func MobileNoLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMobileNo), v))
	})
}

// MobileNoLTE applies the LTE predicate on the "mobile_no" field.
func MobileNoLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMobileNo), v))
	})
}

// MobileNoContains applies the Contains predicate on the "mobile_no" field.
func MobileNoContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMobileNo), v))
	})
}

// MobileNoHasPrefix applies the HasPrefix predicate on the "mobile_no" field.
func MobileNoHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMobileNo), v))
	})
}

// MobileNoHasSuffix applies the HasSuffix predicate on the "mobile_no" field.
func MobileNoHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMobileNo), v))
	})
}

// MobileNoIsNil applies the IsNil predicate on the "mobile_no" field.
func MobileNoIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMobileNo)))
	})
}

// MobileNoNotNil applies the NotNil predicate on the "mobile_no" field.
func MobileNoNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMobileNo)))
	})
}

// MobileNoEqualFold applies the EqualFold predicate on the "mobile_no" field.
func MobileNoEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMobileNo), v))
	})
}

// MobileNoContainsFold applies the ContainsFold predicate on the "mobile_no" field.
func MobileNoContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMobileNo), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassword)))
	})
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassword)))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessToken)))
	})
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessToken)))
	})
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessToken), v))
	})
}

// OauthTokenTypeEQ applies the EQ predicate on the "oauth_token_type" field.
func OauthTokenTypeEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeNEQ applies the NEQ predicate on the "oauth_token_type" field.
func OauthTokenTypeNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeIn applies the In predicate on the "oauth_token_type" field.
func OauthTokenTypeIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOauthTokenType), v...))
	})
}

// OauthTokenTypeNotIn applies the NotIn predicate on the "oauth_token_type" field.
func OauthTokenTypeNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOauthTokenType), v...))
	})
}

// OauthTokenTypeGT applies the GT predicate on the "oauth_token_type" field.
func OauthTokenTypeGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeGTE applies the GTE predicate on the "oauth_token_type" field.
func OauthTokenTypeGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeLT applies the LT predicate on the "oauth_token_type" field.
func OauthTokenTypeLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeLTE applies the LTE predicate on the "oauth_token_type" field.
func OauthTokenTypeLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeContains applies the Contains predicate on the "oauth_token_type" field.
func OauthTokenTypeContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeHasPrefix applies the HasPrefix predicate on the "oauth_token_type" field.
func OauthTokenTypeHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeHasSuffix applies the HasSuffix predicate on the "oauth_token_type" field.
func OauthTokenTypeHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeIsNil applies the IsNil predicate on the "oauth_token_type" field.
func OauthTokenTypeIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOauthTokenType)))
	})
}

// OauthTokenTypeNotNil applies the NotNil predicate on the "oauth_token_type" field.
func OauthTokenTypeNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOauthTokenType)))
	})
}

// OauthTokenTypeEqualFold applies the EqualFold predicate on the "oauth_token_type" field.
func OauthTokenTypeEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthTokenType), v))
	})
}

// OauthTokenTypeContainsFold applies the ContainsFold predicate on the "oauth_token_type" field.
func OauthTokenTypeContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthTokenType), v))
	})
}

// OauthRefreshTokenEQ applies the EQ predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenNEQ applies the NEQ predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenIn applies the In predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOauthRefreshToken), v...))
	})
}

// OauthRefreshTokenNotIn applies the NotIn predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOauthRefreshToken), v...))
	})
}

// OauthRefreshTokenGT applies the GT predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenGTE applies the GTE predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenLT applies the LT predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenLTE applies the LTE predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenContains applies the Contains predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenHasPrefix applies the HasPrefix predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenHasSuffix applies the HasSuffix predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenIsNil applies the IsNil predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOauthRefreshToken)))
	})
}

// OauthRefreshTokenNotNil applies the NotNil predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOauthRefreshToken)))
	})
}

// OauthRefreshTokenEqualFold applies the EqualFold predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenContainsFold applies the ContainsFold predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthIDEQ applies the EQ predicate on the "oauth_id" field.
func OauthIDEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthID), v))
	})
}

// OauthIDNEQ applies the NEQ predicate on the "oauth_id" field.
func OauthIDNEQ(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthID), v))
	})
}

// OauthIDIn applies the In predicate on the "oauth_id" field.
func OauthIDIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOauthID), v...))
	})
}

// OauthIDNotIn applies the NotIn predicate on the "oauth_id" field.
func OauthIDNotIn(vs ...string) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOauthID), v...))
	})
}

// OauthIDGT applies the GT predicate on the "oauth_id" field.
func OauthIDGT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthID), v))
	})
}

// OauthIDGTE applies the GTE predicate on the "oauth_id" field.
func OauthIDGTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthID), v))
	})
}

// OauthIDLT applies the LT predicate on the "oauth_id" field.
func OauthIDLT(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthID), v))
	})
}

// OauthIDLTE applies the LTE predicate on the "oauth_id" field.
func OauthIDLTE(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthID), v))
	})
}

// OauthIDContains applies the Contains predicate on the "oauth_id" field.
func OauthIDContains(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthID), v))
	})
}

// OauthIDHasPrefix applies the HasPrefix predicate on the "oauth_id" field.
func OauthIDHasPrefix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthID), v))
	})
}

// OauthIDHasSuffix applies the HasSuffix predicate on the "oauth_id" field.
func OauthIDHasSuffix(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthID), v))
	})
}

// OauthIDIsNil applies the IsNil predicate on the "oauth_id" field.
func OauthIDIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOauthID)))
	})
}

// OauthIDNotNil applies the NotNil predicate on the "oauth_id" field.
func OauthIDNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOauthID)))
	})
}

// OauthIDEqualFold applies the EqualFold predicate on the "oauth_id" field.
func OauthIDEqualFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthID), v))
	})
}

// OauthIDContainsFold applies the ContainsFold predicate on the "oauth_id" field.
func OauthIDContainsFold(v string) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthID), v))
	})
}

// IsFinishedEQ applies the EQ predicate on the "is_finished" field.
func IsFinishedEQ(v bool) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedNEQ applies the NEQ predicate on the "is_finished" field.
func IsFinishedNEQ(v bool) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedIsNil applies the IsNil predicate on the "is_finished" field.
func IsFinishedIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFinished)))
	})
}

// IsFinishedNotNil applies the NotNil predicate on the "is_finished" field.
func IsFinishedNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFinished)))
	})
}

// OauthExpiryEQ applies the EQ predicate on the "oauth_expiry" field.
func OauthExpiryEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryNEQ applies the NEQ predicate on the "oauth_expiry" field.
func OauthExpiryNEQ(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryIn applies the In predicate on the "oauth_expiry" field.
func OauthExpiryIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOauthExpiry), v...))
	})
}

// OauthExpiryNotIn applies the NotIn predicate on the "oauth_expiry" field.
func OauthExpiryNotIn(vs ...time.Time) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOauthExpiry), v...))
	})
}

// OauthExpiryGT applies the GT predicate on the "oauth_expiry" field.
func OauthExpiryGT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryGTE applies the GTE predicate on the "oauth_expiry" field.
func OauthExpiryGTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryLT applies the LT predicate on the "oauth_expiry" field.
func OauthExpiryLT(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryLTE applies the LTE predicate on the "oauth_expiry" field.
func OauthExpiryLTE(v time.Time) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthExpiry), v))
	})
}

// OauthExpiryIsNil applies the IsNil predicate on the "oauth_expiry" field.
func OauthExpiryIsNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOauthExpiry)))
	})
}

// OauthExpiryNotNil applies the NotNil predicate on the "oauth_expiry" field.
func OauthExpiryNotNil() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOauthExpiry)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.User_auth {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User_auth) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User_auth) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User_auth) predicate.User_auth {
	return predicate.User_auth(func(s *sql.Selector) {
		p(s.Not())
	})
}
