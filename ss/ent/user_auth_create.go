// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_auth"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAuthCreate is the builder for creating a User_auth entity.
type UserAuthCreate struct {
	config
	mutation *UserAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uac *UserAuthCreate) SetCreateTime(t time.Time) *UserAuthCreate {
	uac.mutation.SetCreateTime(t)
	return uac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableCreateTime(t *time.Time) *UserAuthCreate {
	if t != nil {
		uac.SetCreateTime(*t)
	}
	return uac
}

// SetUpdateTime sets the "update_time" field.
func (uac *UserAuthCreate) SetUpdateTime(t time.Time) *UserAuthCreate {
	uac.mutation.SetUpdateTime(t)
	return uac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableUpdateTime(t *time.Time) *UserAuthCreate {
	if t != nil {
		uac.SetUpdateTime(*t)
	}
	return uac
}

// SetType sets the "type" field.
func (uac *UserAuthCreate) SetType(ua user_auth.Type) *UserAuthCreate {
	uac.mutation.SetType(ua)
	return uac
}

// SetOauthSource sets the "oauth_source" field.
func (uac *UserAuthCreate) SetOauthSource(s string) *UserAuthCreate {
	uac.mutation.SetOauthSource(s)
	return uac
}

// SetNillableOauthSource sets the "oauth_source" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableOauthSource(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetOauthSource(*s)
	}
	return uac
}

// SetEmail sets the "email" field.
func (uac *UserAuthCreate) SetEmail(s string) *UserAuthCreate {
	uac.mutation.SetEmail(s)
	return uac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableEmail(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetEmail(*s)
	}
	return uac
}

// SetMobileNo sets the "mobile_no" field.
func (uac *UserAuthCreate) SetMobileNo(s string) *UserAuthCreate {
	uac.mutation.SetMobileNo(s)
	return uac
}

// SetNillableMobileNo sets the "mobile_no" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableMobileNo(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetMobileNo(*s)
	}
	return uac
}

// SetPassword sets the "password" field.
func (uac *UserAuthCreate) SetPassword(s string) *UserAuthCreate {
	uac.mutation.SetPassword(s)
	return uac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillablePassword(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetPassword(*s)
	}
	return uac
}

// SetAccessToken sets the "access_token" field.
func (uac *UserAuthCreate) SetAccessToken(s string) *UserAuthCreate {
	uac.mutation.SetAccessToken(s)
	return uac
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableAccessToken(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetAccessToken(*s)
	}
	return uac
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (uac *UserAuthCreate) SetOauthTokenType(s string) *UserAuthCreate {
	uac.mutation.SetOauthTokenType(s)
	return uac
}

// SetNillableOauthTokenType sets the "oauth_token_type" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableOauthTokenType(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetOauthTokenType(*s)
	}
	return uac
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (uac *UserAuthCreate) SetOauthRefreshToken(s string) *UserAuthCreate {
	uac.mutation.SetOauthRefreshToken(s)
	return uac
}

// SetNillableOauthRefreshToken sets the "oauth_refresh_token" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableOauthRefreshToken(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetOauthRefreshToken(*s)
	}
	return uac
}

// SetOauthID sets the "oauth_id" field.
func (uac *UserAuthCreate) SetOauthID(s string) *UserAuthCreate {
	uac.mutation.SetOauthID(s)
	return uac
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableOauthID(s *string) *UserAuthCreate {
	if s != nil {
		uac.SetOauthID(*s)
	}
	return uac
}

// SetIsFinished sets the "is_finished" field.
func (uac *UserAuthCreate) SetIsFinished(b bool) *UserAuthCreate {
	uac.mutation.SetIsFinished(b)
	return uac
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableIsFinished(b *bool) *UserAuthCreate {
	if b != nil {
		uac.SetIsFinished(*b)
	}
	return uac
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (uac *UserAuthCreate) SetOauthExpiry(t time.Time) *UserAuthCreate {
	uac.mutation.SetOauthExpiry(t)
	return uac
}

// SetNillableOauthExpiry sets the "oauth_expiry" field if the given value is not nil.
func (uac *UserAuthCreate) SetNillableOauthExpiry(t *time.Time) *UserAuthCreate {
	if t != nil {
		uac.SetOauthExpiry(*t)
	}
	return uac
}

// SetUserID sets the "user_id" field.
func (uac *UserAuthCreate) SetUserID(u uint64) *UserAuthCreate {
	uac.mutation.SetUserID(u)
	return uac
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uac *UserAuthCreate) SetOwnerID(id uint64) *UserAuthCreate {
	uac.mutation.SetOwnerID(id)
	return uac
}

// SetOwner sets the "owner" edge to the User entity.
func (uac *UserAuthCreate) SetOwner(u *User) *UserAuthCreate {
	return uac.SetOwnerID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uac *UserAuthCreate) Mutation() *UserAuthMutation {
	return uac.mutation
}

// Save creates the User_auth in the database.
func (uac *UserAuthCreate) Save(ctx context.Context) (*User_auth, error) {
	var (
		err  error
		node *User_auth
	)
	uac.defaults()
	if len(uac.hooks) == 0 {
		if err = uac.check(); err != nil {
			return nil, err
		}
		node, err = uac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uac.check(); err != nil {
				return nil, err
			}
			uac.mutation = mutation
			if node, err = uac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uac.hooks) - 1; i >= 0; i-- {
			if uac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User_auth)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserAuthMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAuthCreate) SaveX(ctx context.Context) *User_auth {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAuthCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAuthCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAuthCreate) defaults() {
	if _, ok := uac.mutation.CreateTime(); !ok {
		v := user_auth.DefaultCreateTime()
		uac.mutation.SetCreateTime(v)
	}
	if _, ok := uac.mutation.UpdateTime(); !ok {
		v := user_auth.DefaultUpdateTime()
		uac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAuthCreate) check() error {
	if _, ok := uac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "User_auth.create_time"`)}
	}
	if _, ok := uac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "User_auth.update_time"`)}
	}
	if _, ok := uac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "User_auth.type"`)}
	}
	if v, ok := uac.mutation.GetType(); ok {
		if err := user_auth.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User_auth.type": %w`, err)}
		}
	}
	if _, ok := uac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "User_auth.user_id"`)}
	}
	if _, ok := uac.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "User_auth.owner"`)}
	}
	return nil
}

func (uac *UserAuthCreate) sqlSave(ctx context.Context) (*User_auth, error) {
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uac *UserAuthCreate) createSpec() (*User_auth, *sqlgraph.CreateSpec) {
	var (
		_node = &User_auth{config: uac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user_auth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user_auth.FieldID,
			},
		}
	)
	_spec.OnConflict = uac.conflict
	if value, ok := uac.mutation.CreateTime(); ok {
		_spec.SetField(user_auth.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uac.mutation.UpdateTime(); ok {
		_spec.SetField(user_auth.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uac.mutation.GetType(); ok {
		_spec.SetField(user_auth.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := uac.mutation.OauthSource(); ok {
		_spec.SetField(user_auth.FieldOauthSource, field.TypeString, value)
		_node.OauthSource = value
	}
	if value, ok := uac.mutation.Email(); ok {
		_spec.SetField(user_auth.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uac.mutation.MobileNo(); ok {
		_spec.SetField(user_auth.FieldMobileNo, field.TypeString, value)
		_node.MobileNo = value
	}
	if value, ok := uac.mutation.Password(); ok {
		_spec.SetField(user_auth.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uac.mutation.AccessToken(); ok {
		_spec.SetField(user_auth.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := uac.mutation.OauthTokenType(); ok {
		_spec.SetField(user_auth.FieldOauthTokenType, field.TypeString, value)
		_node.OauthTokenType = value
	}
	if value, ok := uac.mutation.OauthRefreshToken(); ok {
		_spec.SetField(user_auth.FieldOauthRefreshToken, field.TypeString, value)
		_node.OauthRefreshToken = value
	}
	if value, ok := uac.mutation.OauthID(); ok {
		_spec.SetField(user_auth.FieldOauthID, field.TypeString, value)
		_node.OauthID = value
	}
	if value, ok := uac.mutation.IsFinished(); ok {
		_spec.SetField(user_auth.FieldIsFinished, field.TypeBool, value)
		_node.IsFinished = value
	}
	if value, ok := uac.mutation.OauthExpiry(); ok {
		_spec.SetField(user_auth.FieldOauthExpiry, field.TypeTime, value)
		_node.OauthExpiry = value
	}
	if nodes := uac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_auth.OwnerTable,
			Columns: []string{user_auth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User_auth.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.User_authUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uac *UserAuthCreate) OnConflict(opts ...sql.ConflictOption) *User_authUpsertOne {
	uac.conflict = opts
	return &User_authUpsertOne{
		create: uac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User_auth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uac *UserAuthCreate) OnConflictColumns(columns ...string) *User_authUpsertOne {
	uac.conflict = append(uac.conflict, sql.ConflictColumns(columns...))
	return &User_authUpsertOne{
		create: uac,
	}
}

type (
	// User_authUpsertOne is the builder for "upsert"-ing
	//  one User_auth node.
	User_authUpsertOne struct {
		create *UserAuthCreate
	}

	// User_authUpsert is the "OnConflict" setter.
	User_authUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *User_authUpsert) SetUpdateTime(v time.Time) *User_authUpsert {
	u.Set(user_auth.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *User_authUpsert) UpdateUpdateTime() *User_authUpsert {
	u.SetExcluded(user_auth.FieldUpdateTime)
	return u
}

// SetType sets the "type" field.
func (u *User_authUpsert) SetType(v user_auth.Type) *User_authUpsert {
	u.Set(user_auth.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *User_authUpsert) UpdateType() *User_authUpsert {
	u.SetExcluded(user_auth.FieldType)
	return u
}

// SetOauthSource sets the "oauth_source" field.
func (u *User_authUpsert) SetOauthSource(v string) *User_authUpsert {
	u.Set(user_auth.FieldOauthSource, v)
	return u
}

// UpdateOauthSource sets the "oauth_source" field to the value that was provided on create.
func (u *User_authUpsert) UpdateOauthSource() *User_authUpsert {
	u.SetExcluded(user_auth.FieldOauthSource)
	return u
}

// ClearOauthSource clears the value of the "oauth_source" field.
func (u *User_authUpsert) ClearOauthSource() *User_authUpsert {
	u.SetNull(user_auth.FieldOauthSource)
	return u
}

// SetEmail sets the "email" field.
func (u *User_authUpsert) SetEmail(v string) *User_authUpsert {
	u.Set(user_auth.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *User_authUpsert) UpdateEmail() *User_authUpsert {
	u.SetExcluded(user_auth.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *User_authUpsert) ClearEmail() *User_authUpsert {
	u.SetNull(user_auth.FieldEmail)
	return u
}

// SetMobileNo sets the "mobile_no" field.
func (u *User_authUpsert) SetMobileNo(v string) *User_authUpsert {
	u.Set(user_auth.FieldMobileNo, v)
	return u
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *User_authUpsert) UpdateMobileNo() *User_authUpsert {
	u.SetExcluded(user_auth.FieldMobileNo)
	return u
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *User_authUpsert) ClearMobileNo() *User_authUpsert {
	u.SetNull(user_auth.FieldMobileNo)
	return u
}

// SetPassword sets the "password" field.
func (u *User_authUpsert) SetPassword(v string) *User_authUpsert {
	u.Set(user_auth.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *User_authUpsert) UpdatePassword() *User_authUpsert {
	u.SetExcluded(user_auth.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *User_authUpsert) ClearPassword() *User_authUpsert {
	u.SetNull(user_auth.FieldPassword)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *User_authUpsert) SetAccessToken(v string) *User_authUpsert {
	u.Set(user_auth.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *User_authUpsert) UpdateAccessToken() *User_authUpsert {
	u.SetExcluded(user_auth.FieldAccessToken)
	return u
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *User_authUpsert) ClearAccessToken() *User_authUpsert {
	u.SetNull(user_auth.FieldAccessToken)
	return u
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (u *User_authUpsert) SetOauthTokenType(v string) *User_authUpsert {
	u.Set(user_auth.FieldOauthTokenType, v)
	return u
}

// UpdateOauthTokenType sets the "oauth_token_type" field to the value that was provided on create.
func (u *User_authUpsert) UpdateOauthTokenType() *User_authUpsert {
	u.SetExcluded(user_auth.FieldOauthTokenType)
	return u
}

// ClearOauthTokenType clears the value of the "oauth_token_type" field.
func (u *User_authUpsert) ClearOauthTokenType() *User_authUpsert {
	u.SetNull(user_auth.FieldOauthTokenType)
	return u
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (u *User_authUpsert) SetOauthRefreshToken(v string) *User_authUpsert {
	u.Set(user_auth.FieldOauthRefreshToken, v)
	return u
}

// UpdateOauthRefreshToken sets the "oauth_refresh_token" field to the value that was provided on create.
func (u *User_authUpsert) UpdateOauthRefreshToken() *User_authUpsert {
	u.SetExcluded(user_auth.FieldOauthRefreshToken)
	return u
}

// ClearOauthRefreshToken clears the value of the "oauth_refresh_token" field.
func (u *User_authUpsert) ClearOauthRefreshToken() *User_authUpsert {
	u.SetNull(user_auth.FieldOauthRefreshToken)
	return u
}

// SetOauthID sets the "oauth_id" field.
func (u *User_authUpsert) SetOauthID(v string) *User_authUpsert {
	u.Set(user_auth.FieldOauthID, v)
	return u
}

// UpdateOauthID sets the "oauth_id" field to the value that was provided on create.
func (u *User_authUpsert) UpdateOauthID() *User_authUpsert {
	u.SetExcluded(user_auth.FieldOauthID)
	return u
}

// ClearOauthID clears the value of the "oauth_id" field.
func (u *User_authUpsert) ClearOauthID() *User_authUpsert {
	u.SetNull(user_auth.FieldOauthID)
	return u
}

// SetIsFinished sets the "is_finished" field.
func (u *User_authUpsert) SetIsFinished(v bool) *User_authUpsert {
	u.Set(user_auth.FieldIsFinished, v)
	return u
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *User_authUpsert) UpdateIsFinished() *User_authUpsert {
	u.SetExcluded(user_auth.FieldIsFinished)
	return u
}

// ClearIsFinished clears the value of the "is_finished" field.
func (u *User_authUpsert) ClearIsFinished() *User_authUpsert {
	u.SetNull(user_auth.FieldIsFinished)
	return u
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (u *User_authUpsert) SetOauthExpiry(v time.Time) *User_authUpsert {
	u.Set(user_auth.FieldOauthExpiry, v)
	return u
}

// UpdateOauthExpiry sets the "oauth_expiry" field to the value that was provided on create.
func (u *User_authUpsert) UpdateOauthExpiry() *User_authUpsert {
	u.SetExcluded(user_auth.FieldOauthExpiry)
	return u
}

// ClearOauthExpiry clears the value of the "oauth_expiry" field.
func (u *User_authUpsert) ClearOauthExpiry() *User_authUpsert {
	u.SetNull(user_auth.FieldOauthExpiry)
	return u
}

// SetUserID sets the "user_id" field.
func (u *User_authUpsert) SetUserID(v uint64) *User_authUpsert {
	u.Set(user_auth.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *User_authUpsert) UpdateUserID() *User_authUpsert {
	u.SetExcluded(user_auth.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User_auth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *User_authUpsertOne) UpdateNewValues() *User_authUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(user_auth.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User_auth.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *User_authUpsertOne) Ignore() *User_authUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *User_authUpsertOne) DoNothing() *User_authUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAuthCreate.OnConflict
// documentation for more info.
func (u *User_authUpsertOne) Update(set func(*User_authUpsert)) *User_authUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&User_authUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *User_authUpsertOne) SetUpdateTime(v time.Time) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateUpdateTime() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *User_authUpsertOne) SetType(v user_auth.Type) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateType() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateType()
	})
}

// SetOauthSource sets the "oauth_source" field.
func (u *User_authUpsertOne) SetOauthSource(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthSource(v)
	})
}

// UpdateOauthSource sets the "oauth_source" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateOauthSource() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthSource()
	})
}

// ClearOauthSource clears the value of the "oauth_source" field.
func (u *User_authUpsertOne) ClearOauthSource() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthSource()
	})
}

// SetEmail sets the "email" field.
func (u *User_authUpsertOne) SetEmail(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateEmail() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *User_authUpsertOne) ClearEmail() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearEmail()
	})
}

// SetMobileNo sets the "mobile_no" field.
func (u *User_authUpsertOne) SetMobileNo(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetMobileNo(v)
	})
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateMobileNo() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateMobileNo()
	})
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *User_authUpsertOne) ClearMobileNo() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearMobileNo()
	})
}

// SetPassword sets the "password" field.
func (u *User_authUpsertOne) SetPassword(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdatePassword() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *User_authUpsertOne) ClearPassword() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearPassword()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *User_authUpsertOne) SetAccessToken(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateAccessToken() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *User_authUpsertOne) ClearAccessToken() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearAccessToken()
	})
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (u *User_authUpsertOne) SetOauthTokenType(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthTokenType(v)
	})
}

// UpdateOauthTokenType sets the "oauth_token_type" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateOauthTokenType() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthTokenType()
	})
}

// ClearOauthTokenType clears the value of the "oauth_token_type" field.
func (u *User_authUpsertOne) ClearOauthTokenType() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthTokenType()
	})
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (u *User_authUpsertOne) SetOauthRefreshToken(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthRefreshToken(v)
	})
}

// UpdateOauthRefreshToken sets the "oauth_refresh_token" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateOauthRefreshToken() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthRefreshToken()
	})
}

// ClearOauthRefreshToken clears the value of the "oauth_refresh_token" field.
func (u *User_authUpsertOne) ClearOauthRefreshToken() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthRefreshToken()
	})
}

// SetOauthID sets the "oauth_id" field.
func (u *User_authUpsertOne) SetOauthID(v string) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthID(v)
	})
}

// UpdateOauthID sets the "oauth_id" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateOauthID() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthID()
	})
}

// ClearOauthID clears the value of the "oauth_id" field.
func (u *User_authUpsertOne) ClearOauthID() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthID()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *User_authUpsertOne) SetIsFinished(v bool) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateIsFinished() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateIsFinished()
	})
}

// ClearIsFinished clears the value of the "is_finished" field.
func (u *User_authUpsertOne) ClearIsFinished() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearIsFinished()
	})
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (u *User_authUpsertOne) SetOauthExpiry(v time.Time) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthExpiry(v)
	})
}

// UpdateOauthExpiry sets the "oauth_expiry" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateOauthExpiry() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthExpiry()
	})
}

// ClearOauthExpiry clears the value of the "oauth_expiry" field.
func (u *User_authUpsertOne) ClearOauthExpiry() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthExpiry()
	})
}

// SetUserID sets the "user_id" field.
func (u *User_authUpsertOne) SetUserID(v uint64) *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *User_authUpsertOne) UpdateUserID() *User_authUpsertOne {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *User_authUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *User_authUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *User_authUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *User_authUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserAuthCreateBulk is the builder for creating many User_auth entities in bulk.
type UserAuthCreateBulk struct {
	config
	builders []*UserAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the User_auth entities in the database.
func (uacb *UserAuthCreateBulk) Save(ctx context.Context) ([]*User_auth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*User_auth, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAuthCreateBulk) SaveX(ctx context.Context) []*User_auth {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAuthCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User_auth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.User_authUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uacb *UserAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *User_authUpsertBulk {
	uacb.conflict = opts
	return &User_authUpsertBulk{
		create: uacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User_auth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uacb *UserAuthCreateBulk) OnConflictColumns(columns ...string) *User_authUpsertBulk {
	uacb.conflict = append(uacb.conflict, sql.ConflictColumns(columns...))
	return &User_authUpsertBulk{
		create: uacb,
	}
}

// User_authUpsertBulk is the builder for "upsert"-ing
// a bulk of User_auth nodes.
type User_authUpsertBulk struct {
	create *UserAuthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User_auth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *User_authUpsertBulk) UpdateNewValues() *User_authUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(user_auth.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User_auth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *User_authUpsertBulk) Ignore() *User_authUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *User_authUpsertBulk) DoNothing() *User_authUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAuthCreateBulk.OnConflict
// documentation for more info.
func (u *User_authUpsertBulk) Update(set func(*User_authUpsert)) *User_authUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&User_authUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *User_authUpsertBulk) SetUpdateTime(v time.Time) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateUpdateTime() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *User_authUpsertBulk) SetType(v user_auth.Type) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateType() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateType()
	})
}

// SetOauthSource sets the "oauth_source" field.
func (u *User_authUpsertBulk) SetOauthSource(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthSource(v)
	})
}

// UpdateOauthSource sets the "oauth_source" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateOauthSource() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthSource()
	})
}

// ClearOauthSource clears the value of the "oauth_source" field.
func (u *User_authUpsertBulk) ClearOauthSource() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthSource()
	})
}

// SetEmail sets the "email" field.
func (u *User_authUpsertBulk) SetEmail(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateEmail() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *User_authUpsertBulk) ClearEmail() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearEmail()
	})
}

// SetMobileNo sets the "mobile_no" field.
func (u *User_authUpsertBulk) SetMobileNo(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetMobileNo(v)
	})
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateMobileNo() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateMobileNo()
	})
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *User_authUpsertBulk) ClearMobileNo() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearMobileNo()
	})
}

// SetPassword sets the "password" field.
func (u *User_authUpsertBulk) SetPassword(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdatePassword() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *User_authUpsertBulk) ClearPassword() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearPassword()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *User_authUpsertBulk) SetAccessToken(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateAccessToken() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *User_authUpsertBulk) ClearAccessToken() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearAccessToken()
	})
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (u *User_authUpsertBulk) SetOauthTokenType(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthTokenType(v)
	})
}

// UpdateOauthTokenType sets the "oauth_token_type" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateOauthTokenType() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthTokenType()
	})
}

// ClearOauthTokenType clears the value of the "oauth_token_type" field.
func (u *User_authUpsertBulk) ClearOauthTokenType() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthTokenType()
	})
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (u *User_authUpsertBulk) SetOauthRefreshToken(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthRefreshToken(v)
	})
}

// UpdateOauthRefreshToken sets the "oauth_refresh_token" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateOauthRefreshToken() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthRefreshToken()
	})
}

// ClearOauthRefreshToken clears the value of the "oauth_refresh_token" field.
func (u *User_authUpsertBulk) ClearOauthRefreshToken() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthRefreshToken()
	})
}

// SetOauthID sets the "oauth_id" field.
func (u *User_authUpsertBulk) SetOauthID(v string) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthID(v)
	})
}

// UpdateOauthID sets the "oauth_id" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateOauthID() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthID()
	})
}

// ClearOauthID clears the value of the "oauth_id" field.
func (u *User_authUpsertBulk) ClearOauthID() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthID()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *User_authUpsertBulk) SetIsFinished(v bool) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateIsFinished() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateIsFinished()
	})
}

// ClearIsFinished clears the value of the "is_finished" field.
func (u *User_authUpsertBulk) ClearIsFinished() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearIsFinished()
	})
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (u *User_authUpsertBulk) SetOauthExpiry(v time.Time) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetOauthExpiry(v)
	})
}

// UpdateOauthExpiry sets the "oauth_expiry" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateOauthExpiry() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateOauthExpiry()
	})
}

// ClearOauthExpiry clears the value of the "oauth_expiry" field.
func (u *User_authUpsertBulk) ClearOauthExpiry() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.ClearOauthExpiry()
	})
}

// SetUserID sets the "user_id" field.
func (u *User_authUpsertBulk) SetUserID(v uint64) *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *User_authUpsertBulk) UpdateUserID() *User_authUpsertBulk {
	return u.Update(func(s *User_authUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *User_authUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *User_authUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
