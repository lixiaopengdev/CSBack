// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_auth"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAuthUpdate is the builder for updating User_auth entities.
type UserAuthUpdate struct {
	config
	hooks    []Hook
	mutation *UserAuthMutation
}

// Where appends a list predicates to the UserAuthUpdate builder.
func (uau *UserAuthUpdate) Where(ps ...predicate.User_auth) *UserAuthUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUpdateTime sets the "update_time" field.
func (uau *UserAuthUpdate) SetUpdateTime(t time.Time) *UserAuthUpdate {
	uau.mutation.SetUpdateTime(t)
	return uau
}

// SetType sets the "type" field.
func (uau *UserAuthUpdate) SetType(ua user_auth.Type) *UserAuthUpdate {
	uau.mutation.SetType(ua)
	return uau
}

// SetOauthSource sets the "oauth_source" field.
func (uau *UserAuthUpdate) SetOauthSource(s string) *UserAuthUpdate {
	uau.mutation.SetOauthSource(s)
	return uau
}

// SetNillableOauthSource sets the "oauth_source" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableOauthSource(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetOauthSource(*s)
	}
	return uau
}

// ClearOauthSource clears the value of the "oauth_source" field.
func (uau *UserAuthUpdate) ClearOauthSource() *UserAuthUpdate {
	uau.mutation.ClearOauthSource()
	return uau
}

// SetEmail sets the "email" field.
func (uau *UserAuthUpdate) SetEmail(s string) *UserAuthUpdate {
	uau.mutation.SetEmail(s)
	return uau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableEmail(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetEmail(*s)
	}
	return uau
}

// ClearEmail clears the value of the "email" field.
func (uau *UserAuthUpdate) ClearEmail() *UserAuthUpdate {
	uau.mutation.ClearEmail()
	return uau
}

// SetMobileNo sets the "mobile_no" field.
func (uau *UserAuthUpdate) SetMobileNo(s string) *UserAuthUpdate {
	uau.mutation.SetMobileNo(s)
	return uau
}

// SetNillableMobileNo sets the "mobile_no" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableMobileNo(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetMobileNo(*s)
	}
	return uau
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (uau *UserAuthUpdate) ClearMobileNo() *UserAuthUpdate {
	uau.mutation.ClearMobileNo()
	return uau
}

// SetPassword sets the "password" field.
func (uau *UserAuthUpdate) SetPassword(s string) *UserAuthUpdate {
	uau.mutation.SetPassword(s)
	return uau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillablePassword(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetPassword(*s)
	}
	return uau
}

// ClearPassword clears the value of the "password" field.
func (uau *UserAuthUpdate) ClearPassword() *UserAuthUpdate {
	uau.mutation.ClearPassword()
	return uau
}

// SetAccessToken sets the "access_token" field.
func (uau *UserAuthUpdate) SetAccessToken(s string) *UserAuthUpdate {
	uau.mutation.SetAccessToken(s)
	return uau
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableAccessToken(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetAccessToken(*s)
	}
	return uau
}

// ClearAccessToken clears the value of the "access_token" field.
func (uau *UserAuthUpdate) ClearAccessToken() *UserAuthUpdate {
	uau.mutation.ClearAccessToken()
	return uau
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (uau *UserAuthUpdate) SetOauthTokenType(s string) *UserAuthUpdate {
	uau.mutation.SetOauthTokenType(s)
	return uau
}

// SetNillableOauthTokenType sets the "oauth_token_type" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableOauthTokenType(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetOauthTokenType(*s)
	}
	return uau
}

// ClearOauthTokenType clears the value of the "oauth_token_type" field.
func (uau *UserAuthUpdate) ClearOauthTokenType() *UserAuthUpdate {
	uau.mutation.ClearOauthTokenType()
	return uau
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (uau *UserAuthUpdate) SetOauthRefreshToken(s string) *UserAuthUpdate {
	uau.mutation.SetOauthRefreshToken(s)
	return uau
}

// SetNillableOauthRefreshToken sets the "oauth_refresh_token" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableOauthRefreshToken(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetOauthRefreshToken(*s)
	}
	return uau
}

// ClearOauthRefreshToken clears the value of the "oauth_refresh_token" field.
func (uau *UserAuthUpdate) ClearOauthRefreshToken() *UserAuthUpdate {
	uau.mutation.ClearOauthRefreshToken()
	return uau
}

// SetOauthID sets the "oauth_id" field.
func (uau *UserAuthUpdate) SetOauthID(s string) *UserAuthUpdate {
	uau.mutation.SetOauthID(s)
	return uau
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableOauthID(s *string) *UserAuthUpdate {
	if s != nil {
		uau.SetOauthID(*s)
	}
	return uau
}

// ClearOauthID clears the value of the "oauth_id" field.
func (uau *UserAuthUpdate) ClearOauthID() *UserAuthUpdate {
	uau.mutation.ClearOauthID()
	return uau
}

// SetIsFinished sets the "is_finished" field.
func (uau *UserAuthUpdate) SetIsFinished(b bool) *UserAuthUpdate {
	uau.mutation.SetIsFinished(b)
	return uau
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableIsFinished(b *bool) *UserAuthUpdate {
	if b != nil {
		uau.SetIsFinished(*b)
	}
	return uau
}

// ClearIsFinished clears the value of the "is_finished" field.
func (uau *UserAuthUpdate) ClearIsFinished() *UserAuthUpdate {
	uau.mutation.ClearIsFinished()
	return uau
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (uau *UserAuthUpdate) SetOauthExpiry(t time.Time) *UserAuthUpdate {
	uau.mutation.SetOauthExpiry(t)
	return uau
}

// SetNillableOauthExpiry sets the "oauth_expiry" field if the given value is not nil.
func (uau *UserAuthUpdate) SetNillableOauthExpiry(t *time.Time) *UserAuthUpdate {
	if t != nil {
		uau.SetOauthExpiry(*t)
	}
	return uau
}

// ClearOauthExpiry clears the value of the "oauth_expiry" field.
func (uau *UserAuthUpdate) ClearOauthExpiry() *UserAuthUpdate {
	uau.mutation.ClearOauthExpiry()
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAuthUpdate) SetUserID(u uint64) *UserAuthUpdate {
	uau.mutation.SetUserID(u)
	return uau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uau *UserAuthUpdate) SetOwnerID(id uint64) *UserAuthUpdate {
	uau.mutation.SetOwnerID(id)
	return uau
}

// SetOwner sets the "owner" edge to the User entity.
func (uau *UserAuthUpdate) SetOwner(u *User) *UserAuthUpdate {
	return uau.SetOwnerID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uau *UserAuthUpdate) Mutation() *UserAuthMutation {
	return uau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uau *UserAuthUpdate) ClearOwner() *UserAuthUpdate {
	uau.mutation.ClearOwner()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAuthUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uau.defaults()
	if len(uau.hooks) == 0 {
		if err = uau.check(); err != nil {
			return 0, err
		}
		affected, err = uau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uau.check(); err != nil {
				return 0, err
			}
			uau.mutation = mutation
			affected, err = uau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uau.hooks) - 1; i >= 0; i-- {
			if uau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAuthUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAuthUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserAuthUpdate) defaults() {
	if _, ok := uau.mutation.UpdateTime(); !ok {
		v := user_auth.UpdateDefaultUpdateTime()
		uau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAuthUpdate) check() error {
	if v, ok := uau.mutation.GetType(); ok {
		if err := user_auth.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User_auth.type": %w`, err)}
		}
	}
	if _, ok := uau.mutation.OwnerID(); uau.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User_auth.owner"`)
	}
	return nil
}

func (uau *UserAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_auth.Table,
			Columns: user_auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user_auth.FieldID,
			},
		},
	}
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UpdateTime(); ok {
		_spec.SetField(user_auth.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uau.mutation.GetType(); ok {
		_spec.SetField(user_auth.FieldType, field.TypeEnum, value)
	}
	if value, ok := uau.mutation.OauthSource(); ok {
		_spec.SetField(user_auth.FieldOauthSource, field.TypeString, value)
	}
	if uau.mutation.OauthSourceCleared() {
		_spec.ClearField(user_auth.FieldOauthSource, field.TypeString)
	}
	if value, ok := uau.mutation.Email(); ok {
		_spec.SetField(user_auth.FieldEmail, field.TypeString, value)
	}
	if uau.mutation.EmailCleared() {
		_spec.ClearField(user_auth.FieldEmail, field.TypeString)
	}
	if value, ok := uau.mutation.MobileNo(); ok {
		_spec.SetField(user_auth.FieldMobileNo, field.TypeString, value)
	}
	if uau.mutation.MobileNoCleared() {
		_spec.ClearField(user_auth.FieldMobileNo, field.TypeString)
	}
	if value, ok := uau.mutation.Password(); ok {
		_spec.SetField(user_auth.FieldPassword, field.TypeString, value)
	}
	if uau.mutation.PasswordCleared() {
		_spec.ClearField(user_auth.FieldPassword, field.TypeString)
	}
	if value, ok := uau.mutation.AccessToken(); ok {
		_spec.SetField(user_auth.FieldAccessToken, field.TypeString, value)
	}
	if uau.mutation.AccessTokenCleared() {
		_spec.ClearField(user_auth.FieldAccessToken, field.TypeString)
	}
	if value, ok := uau.mutation.OauthTokenType(); ok {
		_spec.SetField(user_auth.FieldOauthTokenType, field.TypeString, value)
	}
	if uau.mutation.OauthTokenTypeCleared() {
		_spec.ClearField(user_auth.FieldOauthTokenType, field.TypeString)
	}
	if value, ok := uau.mutation.OauthRefreshToken(); ok {
		_spec.SetField(user_auth.FieldOauthRefreshToken, field.TypeString, value)
	}
	if uau.mutation.OauthRefreshTokenCleared() {
		_spec.ClearField(user_auth.FieldOauthRefreshToken, field.TypeString)
	}
	if value, ok := uau.mutation.OauthID(); ok {
		_spec.SetField(user_auth.FieldOauthID, field.TypeString, value)
	}
	if uau.mutation.OauthIDCleared() {
		_spec.ClearField(user_auth.FieldOauthID, field.TypeString)
	}
	if value, ok := uau.mutation.IsFinished(); ok {
		_spec.SetField(user_auth.FieldIsFinished, field.TypeBool, value)
	}
	if uau.mutation.IsFinishedCleared() {
		_spec.ClearField(user_auth.FieldIsFinished, field.TypeBool)
	}
	if value, ok := uau.mutation.OauthExpiry(); ok {
		_spec.SetField(user_auth.FieldOauthExpiry, field.TypeTime, value)
	}
	if uau.mutation.OauthExpiryCleared() {
		_spec.ClearField(user_auth.FieldOauthExpiry, field.TypeTime)
	}
	if uau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_auth.OwnerTable,
			Columns: []string{user_auth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_auth.OwnerTable,
			Columns: []string{user_auth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserAuthUpdateOne is the builder for updating a single User_auth entity.
type UserAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAuthMutation
}

// SetUpdateTime sets the "update_time" field.
func (uauo *UserAuthUpdateOne) SetUpdateTime(t time.Time) *UserAuthUpdateOne {
	uauo.mutation.SetUpdateTime(t)
	return uauo
}

// SetType sets the "type" field.
func (uauo *UserAuthUpdateOne) SetType(ua user_auth.Type) *UserAuthUpdateOne {
	uauo.mutation.SetType(ua)
	return uauo
}

// SetOauthSource sets the "oauth_source" field.
func (uauo *UserAuthUpdateOne) SetOauthSource(s string) *UserAuthUpdateOne {
	uauo.mutation.SetOauthSource(s)
	return uauo
}

// SetNillableOauthSource sets the "oauth_source" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableOauthSource(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetOauthSource(*s)
	}
	return uauo
}

// ClearOauthSource clears the value of the "oauth_source" field.
func (uauo *UserAuthUpdateOne) ClearOauthSource() *UserAuthUpdateOne {
	uauo.mutation.ClearOauthSource()
	return uauo
}

// SetEmail sets the "email" field.
func (uauo *UserAuthUpdateOne) SetEmail(s string) *UserAuthUpdateOne {
	uauo.mutation.SetEmail(s)
	return uauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableEmail(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetEmail(*s)
	}
	return uauo
}

// ClearEmail clears the value of the "email" field.
func (uauo *UserAuthUpdateOne) ClearEmail() *UserAuthUpdateOne {
	uauo.mutation.ClearEmail()
	return uauo
}

// SetMobileNo sets the "mobile_no" field.
func (uauo *UserAuthUpdateOne) SetMobileNo(s string) *UserAuthUpdateOne {
	uauo.mutation.SetMobileNo(s)
	return uauo
}

// SetNillableMobileNo sets the "mobile_no" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableMobileNo(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetMobileNo(*s)
	}
	return uauo
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (uauo *UserAuthUpdateOne) ClearMobileNo() *UserAuthUpdateOne {
	uauo.mutation.ClearMobileNo()
	return uauo
}

// SetPassword sets the "password" field.
func (uauo *UserAuthUpdateOne) SetPassword(s string) *UserAuthUpdateOne {
	uauo.mutation.SetPassword(s)
	return uauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillablePassword(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetPassword(*s)
	}
	return uauo
}

// ClearPassword clears the value of the "password" field.
func (uauo *UserAuthUpdateOne) ClearPassword() *UserAuthUpdateOne {
	uauo.mutation.ClearPassword()
	return uauo
}

// SetAccessToken sets the "access_token" field.
func (uauo *UserAuthUpdateOne) SetAccessToken(s string) *UserAuthUpdateOne {
	uauo.mutation.SetAccessToken(s)
	return uauo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableAccessToken(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetAccessToken(*s)
	}
	return uauo
}

// ClearAccessToken clears the value of the "access_token" field.
func (uauo *UserAuthUpdateOne) ClearAccessToken() *UserAuthUpdateOne {
	uauo.mutation.ClearAccessToken()
	return uauo
}

// SetOauthTokenType sets the "oauth_token_type" field.
func (uauo *UserAuthUpdateOne) SetOauthTokenType(s string) *UserAuthUpdateOne {
	uauo.mutation.SetOauthTokenType(s)
	return uauo
}

// SetNillableOauthTokenType sets the "oauth_token_type" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableOauthTokenType(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetOauthTokenType(*s)
	}
	return uauo
}

// ClearOauthTokenType clears the value of the "oauth_token_type" field.
func (uauo *UserAuthUpdateOne) ClearOauthTokenType() *UserAuthUpdateOne {
	uauo.mutation.ClearOauthTokenType()
	return uauo
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (uauo *UserAuthUpdateOne) SetOauthRefreshToken(s string) *UserAuthUpdateOne {
	uauo.mutation.SetOauthRefreshToken(s)
	return uauo
}

// SetNillableOauthRefreshToken sets the "oauth_refresh_token" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableOauthRefreshToken(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetOauthRefreshToken(*s)
	}
	return uauo
}

// ClearOauthRefreshToken clears the value of the "oauth_refresh_token" field.
func (uauo *UserAuthUpdateOne) ClearOauthRefreshToken() *UserAuthUpdateOne {
	uauo.mutation.ClearOauthRefreshToken()
	return uauo
}

// SetOauthID sets the "oauth_id" field.
func (uauo *UserAuthUpdateOne) SetOauthID(s string) *UserAuthUpdateOne {
	uauo.mutation.SetOauthID(s)
	return uauo
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableOauthID(s *string) *UserAuthUpdateOne {
	if s != nil {
		uauo.SetOauthID(*s)
	}
	return uauo
}

// ClearOauthID clears the value of the "oauth_id" field.
func (uauo *UserAuthUpdateOne) ClearOauthID() *UserAuthUpdateOne {
	uauo.mutation.ClearOauthID()
	return uauo
}

// SetIsFinished sets the "is_finished" field.
func (uauo *UserAuthUpdateOne) SetIsFinished(b bool) *UserAuthUpdateOne {
	uauo.mutation.SetIsFinished(b)
	return uauo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableIsFinished(b *bool) *UserAuthUpdateOne {
	if b != nil {
		uauo.SetIsFinished(*b)
	}
	return uauo
}

// ClearIsFinished clears the value of the "is_finished" field.
func (uauo *UserAuthUpdateOne) ClearIsFinished() *UserAuthUpdateOne {
	uauo.mutation.ClearIsFinished()
	return uauo
}

// SetOauthExpiry sets the "oauth_expiry" field.
func (uauo *UserAuthUpdateOne) SetOauthExpiry(t time.Time) *UserAuthUpdateOne {
	uauo.mutation.SetOauthExpiry(t)
	return uauo
}

// SetNillableOauthExpiry sets the "oauth_expiry" field if the given value is not nil.
func (uauo *UserAuthUpdateOne) SetNillableOauthExpiry(t *time.Time) *UserAuthUpdateOne {
	if t != nil {
		uauo.SetOauthExpiry(*t)
	}
	return uauo
}

// ClearOauthExpiry clears the value of the "oauth_expiry" field.
func (uauo *UserAuthUpdateOne) ClearOauthExpiry() *UserAuthUpdateOne {
	uauo.mutation.ClearOauthExpiry()
	return uauo
}

// SetUserID sets the "user_id" field.
func (uauo *UserAuthUpdateOne) SetUserID(u uint64) *UserAuthUpdateOne {
	uauo.mutation.SetUserID(u)
	return uauo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uauo *UserAuthUpdateOne) SetOwnerID(id uint64) *UserAuthUpdateOne {
	uauo.mutation.SetOwnerID(id)
	return uauo
}

// SetOwner sets the "owner" edge to the User entity.
func (uauo *UserAuthUpdateOne) SetOwner(u *User) *UserAuthUpdateOne {
	return uauo.SetOwnerID(u.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (uauo *UserAuthUpdateOne) Mutation() *UserAuthMutation {
	return uauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uauo *UserAuthUpdateOne) ClearOwner() *UserAuthUpdateOne {
	uauo.mutation.ClearOwner()
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAuthUpdateOne) Select(field string, fields ...string) *UserAuthUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated User_auth entity.
func (uauo *UserAuthUpdateOne) Save(ctx context.Context) (*User_auth, error) {
	var (
		err  error
		node *User_auth
	)
	uauo.defaults()
	if len(uauo.hooks) == 0 {
		if err = uauo.check(); err != nil {
			return nil, err
		}
		node, err = uauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uauo.check(); err != nil {
				return nil, err
			}
			uauo.mutation = mutation
			node, err = uauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uauo.hooks) - 1; i >= 0; i-- {
			if uauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User_auth)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserAuthMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAuthUpdateOne) SaveX(ctx context.Context) *User_auth {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAuthUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserAuthUpdateOne) defaults() {
	if _, ok := uauo.mutation.UpdateTime(); !ok {
		v := user_auth.UpdateDefaultUpdateTime()
		uauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAuthUpdateOne) check() error {
	if v, ok := uauo.mutation.GetType(); ok {
		if err := user_auth.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User_auth.type": %w`, err)}
		}
	}
	if _, ok := uauo.mutation.OwnerID(); uauo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User_auth.owner"`)
	}
	return nil
}

func (uauo *UserAuthUpdateOne) sqlSave(ctx context.Context) (_node *User_auth, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_auth.Table,
			Columns: user_auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user_auth.FieldID,
			},
		},
	}
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User_auth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user_auth.FieldID)
		for _, f := range fields {
			if !user_auth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user_auth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UpdateTime(); ok {
		_spec.SetField(user_auth.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.GetType(); ok {
		_spec.SetField(user_auth.FieldType, field.TypeEnum, value)
	}
	if value, ok := uauo.mutation.OauthSource(); ok {
		_spec.SetField(user_auth.FieldOauthSource, field.TypeString, value)
	}
	if uauo.mutation.OauthSourceCleared() {
		_spec.ClearField(user_auth.FieldOauthSource, field.TypeString)
	}
	if value, ok := uauo.mutation.Email(); ok {
		_spec.SetField(user_auth.FieldEmail, field.TypeString, value)
	}
	if uauo.mutation.EmailCleared() {
		_spec.ClearField(user_auth.FieldEmail, field.TypeString)
	}
	if value, ok := uauo.mutation.MobileNo(); ok {
		_spec.SetField(user_auth.FieldMobileNo, field.TypeString, value)
	}
	if uauo.mutation.MobileNoCleared() {
		_spec.ClearField(user_auth.FieldMobileNo, field.TypeString)
	}
	if value, ok := uauo.mutation.Password(); ok {
		_spec.SetField(user_auth.FieldPassword, field.TypeString, value)
	}
	if uauo.mutation.PasswordCleared() {
		_spec.ClearField(user_auth.FieldPassword, field.TypeString)
	}
	if value, ok := uauo.mutation.AccessToken(); ok {
		_spec.SetField(user_auth.FieldAccessToken, field.TypeString, value)
	}
	if uauo.mutation.AccessTokenCleared() {
		_spec.ClearField(user_auth.FieldAccessToken, field.TypeString)
	}
	if value, ok := uauo.mutation.OauthTokenType(); ok {
		_spec.SetField(user_auth.FieldOauthTokenType, field.TypeString, value)
	}
	if uauo.mutation.OauthTokenTypeCleared() {
		_spec.ClearField(user_auth.FieldOauthTokenType, field.TypeString)
	}
	if value, ok := uauo.mutation.OauthRefreshToken(); ok {
		_spec.SetField(user_auth.FieldOauthRefreshToken, field.TypeString, value)
	}
	if uauo.mutation.OauthRefreshTokenCleared() {
		_spec.ClearField(user_auth.FieldOauthRefreshToken, field.TypeString)
	}
	if value, ok := uauo.mutation.OauthID(); ok {
		_spec.SetField(user_auth.FieldOauthID, field.TypeString, value)
	}
	if uauo.mutation.OauthIDCleared() {
		_spec.ClearField(user_auth.FieldOauthID, field.TypeString)
	}
	if value, ok := uauo.mutation.IsFinished(); ok {
		_spec.SetField(user_auth.FieldIsFinished, field.TypeBool, value)
	}
	if uauo.mutation.IsFinishedCleared() {
		_spec.ClearField(user_auth.FieldIsFinished, field.TypeBool)
	}
	if value, ok := uauo.mutation.OauthExpiry(); ok {
		_spec.SetField(user_auth.FieldOauthExpiry, field.TypeTime, value)
	}
	if uauo.mutation.OauthExpiryCleared() {
		_spec.ClearField(user_auth.FieldOauthExpiry, field.TypeTime)
	}
	if uauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_auth.OwnerTable,
			Columns: []string{user_auth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_auth.OwnerTable,
			Columns: []string{user_auth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User_auth{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
