// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/agora_token"
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/collection"
	"CSBackendTmp/ent/contact"
	"CSBackendTmp/ent/creation"
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/device"
	"CSBackendTmp/ent/feedback"
	"CSBackendTmp/ent/friendship"
	"CSBackendTmp/ent/hidden"
	"CSBackendTmp/ent/invite_code"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/mask"
	"CSBackendTmp/ent/message"
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/setting"
	"CSBackendTmp/ent/stream"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_auth"
	"CSBackendTmp/ent/user_history"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(t time.Time) *UserCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UserCreate) SetUpdateTime(t time.Time) *UserCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetOpenID sets the "open_id" field.
func (uc *UserCreate) SetOpenID(s string) *UserCreate {
	uc.mutation.SetOpenID(s)
	return uc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableOpenID(s *string) *UserCreate {
	if s != nil {
		uc.SetOpenID(*s)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetNickName sets the "nick_name" field.
func (uc *UserCreate) SetNickName(s string) *UserCreate {
	uc.mutation.SetNickName(s)
	return uc
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableNickName(s *string) *UserCreate {
	if s != nil {
		uc.SetNickName(*s)
	}
	return uc
}

// SetSystemName sets the "system_name" field.
func (uc *UserCreate) SetSystemName(s string) *UserCreate {
	uc.mutation.SetSystemName(s)
	return uc
}

// SetNillableSystemName sets the "system_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableSystemName(s *string) *UserCreate {
	if s != nil {
		uc.SetSystemName(*s)
	}
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (uc *UserCreate) SetThumbnailURL(s string) *UserCreate {
	uc.mutation.SetThumbnailURL(s)
	return uc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableThumbnailURL(s *string) *UserCreate {
	if s != nil {
		uc.SetThumbnailURL(*s)
	}
	return uc
}

// SetSex sets the "sex" field.
func (uc *UserCreate) SetSex(s string) *UserCreate {
	uc.mutation.SetSex(s)
	return uc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uc *UserCreate) SetNillableSex(s *string) *UserCreate {
	if s != nil {
		uc.SetSex(*s)
	}
	return uc
}

// SetMobileNo sets the "mobile_no" field.
func (uc *UserCreate) SetMobileNo(s string) *UserCreate {
	uc.mutation.SetMobileNo(s)
	return uc
}

// SetNillableMobileNo sets the "mobile_no" field if the given value is not nil.
func (uc *UserCreate) SetNillableMobileNo(s *string) *UserCreate {
	if s != nil {
		uc.SetMobileNo(*s)
	}
	return uc
}

// SetRegionCode sets the "region_code" field.
func (uc *UserCreate) SetRegionCode(s string) *UserCreate {
	uc.mutation.SetRegionCode(s)
	return uc
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (uc *UserCreate) SetNillableRegionCode(s *string) *UserCreate {
	if s != nil {
		uc.SetRegionCode(*s)
	}
	return uc
}

// SetEmailAddress sets the "email_address" field.
func (uc *UserCreate) SetEmailAddress(s string) *UserCreate {
	uc.mutation.SetEmailAddress(s)
	return uc
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailAddress(s *string) *UserCreate {
	if s != nil {
		uc.SetEmailAddress(*s)
	}
	return uc
}

// SetBirthday sets the "birthday" field.
func (uc *UserCreate) SetBirthday(s string) *UserCreate {
	uc.mutation.SetBirthday(s)
	return uc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uc *UserCreate) SetNillableBirthday(s *string) *UserCreate {
	if s != nil {
		uc.SetBirthday(*s)
	}
	return uc
}

// SetSchoolName sets the "school_name" field.
func (uc *UserCreate) SetSchoolName(s string) *UserCreate {
	uc.mutation.SetSchoolName(s)
	return uc
}

// SetNillableSchoolName sets the "school_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableSchoolName(s *string) *UserCreate {
	if s != nil {
		uc.SetSchoolName(*s)
	}
	return uc
}

// SetBio sets the "bio" field.
func (uc *UserCreate) SetBio(s string) *UserCreate {
	uc.mutation.SetBio(s)
	return uc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uc *UserCreate) SetNillableBio(s *string) *UserCreate {
	if s != nil {
		uc.SetBio(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(u user.Status) *UserCreate {
	uc.mutation.SetStatus(u)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(u *user.Status) *UserCreate {
	if u != nil {
		uc.SetStatus(*u)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(u user.Role) *UserCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(u *user.Role) *UserCreate {
	if u != nil {
		uc.SetRole(*u)
	}
	return uc
}

// SetIsOnline sets the "is_online" field.
func (uc *UserCreate) SetIsOnline(b bool) *UserCreate {
	uc.mutation.SetIsOnline(b)
	return uc
}

// SetNillableIsOnline sets the "is_online" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsOnline(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsOnline(*b)
	}
	return uc
}

// SetIsShowCollections sets the "is_show_collections" field.
func (uc *UserCreate) SetIsShowCollections(b bool) *UserCreate {
	uc.mutation.SetIsShowCollections(b)
	return uc
}

// SetNillableIsShowCollections sets the "is_show_collections" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsShowCollections(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsShowCollections(*b)
	}
	return uc
}

// SetIsInvited sets the "is_invited" field.
func (uc *UserCreate) SetIsInvited(b bool) *UserCreate {
	uc.mutation.SetIsInvited(b)
	return uc
}

// SetNillableIsInvited sets the "is_invited" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsInvited(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsInvited(*b)
	}
	return uc
}

// SetNeedPrivacyConfirm sets the "need_privacy_confirm" field.
func (uc *UserCreate) SetNeedPrivacyConfirm(b bool) *UserCreate {
	uc.mutation.SetNeedPrivacyConfirm(b)
	return uc
}

// SetNillableNeedPrivacyConfirm sets the "need_privacy_confirm" field if the given value is not nil.
func (uc *UserCreate) SetNillableNeedPrivacyConfirm(b *bool) *UserCreate {
	if b != nil {
		uc.SetNeedPrivacyConfirm(*b)
	}
	return uc
}

// SetCurrentCsFieldID sets the "current_cs_field_id" field.
func (uc *UserCreate) SetCurrentCsFieldID(u uint64) *UserCreate {
	uc.mutation.SetCurrentCsFieldID(u)
	return uc
}

// SetNillableCurrentCsFieldID sets the "current_cs_field_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCurrentCsFieldID(u *uint64) *UserCreate {
	if u != nil {
		uc.SetCurrentCsFieldID(*u)
	}
	return uc
}

// SetCurrentCsFieldName sets the "current_cs_field_name" field.
func (uc *UserCreate) SetCurrentCsFieldName(s string) *UserCreate {
	uc.mutation.SetCurrentCsFieldName(s)
	return uc
}

// SetNillableCurrentCsFieldName sets the "current_cs_field_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableCurrentCsFieldName(s *string) *UserCreate {
	if s != nil {
		uc.SetCurrentCsFieldName(*s)
	}
	return uc
}

// SetPrivateCsFieldID sets the "private_cs_field_id" field.
func (uc *UserCreate) SetPrivateCsFieldID(u uint64) *UserCreate {
	uc.mutation.SetPrivateCsFieldID(u)
	return uc
}

// SetNillablePrivateCsFieldID sets the "private_cs_field_id" field if the given value is not nil.
func (uc *UserCreate) SetNillablePrivateCsFieldID(u *uint64) *UserCreate {
	if u != nil {
		uc.SetPrivateCsFieldID(*u)
	}
	return uc
}

// SetPrivateCsFieldName sets the "private_cs_field_name" field.
func (uc *UserCreate) SetPrivateCsFieldName(s string) *UserCreate {
	uc.mutation.SetPrivateCsFieldName(s)
	return uc
}

// SetNillablePrivateCsFieldName sets the "private_cs_field_name" field if the given value is not nil.
func (uc *UserCreate) SetNillablePrivateCsFieldName(s *string) *UserCreate {
	if s != nil {
		uc.SetPrivateCsFieldName(*s)
	}
	return uc
}

// SetRegisterIP sets the "register_ip" field.
func (uc *UserCreate) SetRegisterIP(s string) *UserCreate {
	uc.mutation.SetRegisterIP(s)
	return uc
}

// SetNillableRegisterIP sets the "register_ip" field if the given value is not nil.
func (uc *UserCreate) SetNillableRegisterIP(s *string) *UserCreate {
	if s != nil {
		uc.SetRegisterIP(*s)
	}
	return uc
}

// SetConstellation sets the "constellation" field.
func (uc *UserCreate) SetConstellation(s string) *UserCreate {
	uc.mutation.SetConstellation(s)
	return uc
}

// SetNillableConstellation sets the "constellation" field if the given value is not nil.
func (uc *UserCreate) SetNillableConstellation(s *string) *UserCreate {
	if s != nil {
		uc.SetConstellation(*s)
	}
	return uc
}

// SetTotalConnections sets the "total_connections" field.
func (uc *UserCreate) SetTotalConnections(i int) *UserCreate {
	uc.mutation.SetTotalConnections(i)
	return uc
}

// SetNillableTotalConnections sets the "total_connections" field if the given value is not nil.
func (uc *UserCreate) SetNillableTotalConnections(i *int) *UserCreate {
	if i != nil {
		uc.SetTotalConnections(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uint64) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// AddUserAuthIDs adds the "user_auth" edge to the User_auth entity by IDs.
func (uc *UserCreate) AddUserAuthIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserAuthIDs(ids...)
	return uc
}

// AddUserAuth adds the "user_auth" edges to the User_auth entity.
func (uc *UserCreate) AddUserAuth(u ...*User_auth) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserAuthIDs(ids...)
}

// AddCardIDs adds the "card" edge to the Card entity by IDs.
func (uc *UserCreate) AddCardIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddCardIDs(ids...)
	return uc
}

// AddCard adds the "card" edges to the Card entity.
func (uc *UserCreate) AddCard(c ...*Card) *UserCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCardIDs(ids...)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (uc *UserCreate) AddMessageIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddMessageIDs(ids...)
	return uc
}

// AddMessage adds the "message" edges to the Message entity.
func (uc *UserCreate) AddMessage(m ...*Message) *UserCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMessageIDs(ids...)
}

// AddDeviceIDs adds the "device" edge to the Device entity by IDs.
func (uc *UserCreate) AddDeviceIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddDeviceIDs(ids...)
	return uc
}

// AddDevice adds the "device" edges to the Device entity.
func (uc *UserCreate) AddDevice(d ...*Device) *UserCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddDeviceIDs(ids...)
}

// AddJoinedCsfieldIDs adds the "joined_csfield" edge to the CSField entity by IDs.
func (uc *UserCreate) AddJoinedCsfieldIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddJoinedCsfieldIDs(ids...)
	return uc
}

// AddJoinedCsfield adds the "joined_csfield" edges to the CSField entity.
func (uc *UserCreate) AddJoinedCsfield(c ...*CSField) *UserCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddJoinedCsfieldIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (uc *UserCreate) AddFriendIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddFriendIDs(ids...)
	return uc
}

// AddFriends adds the "friends" edges to the User entity.
func (uc *UserCreate) AddFriends(u ...*User) *UserCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddFriendIDs(ids...)
}

// AddHiddenIDs adds the "hidden" edge to the Hidden entity by IDs.
func (uc *UserCreate) AddHiddenIDs(ids ...int) *UserCreate {
	uc.mutation.AddHiddenIDs(ids...)
	return uc
}

// AddHidden adds the "hidden" edges to the Hidden entity.
func (uc *UserCreate) AddHidden(h ...*Hidden) *UserCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uc.AddHiddenIDs(ids...)
}

// AddHistoryIDs adds the "history" edge to the User_history entity by IDs.
func (uc *UserCreate) AddHistoryIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddHistoryIDs(ids...)
	return uc
}

// AddHistory adds the "history" edges to the User_history entity.
func (uc *UserCreate) AddHistory(u ...*User_history) *UserCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddHistoryIDs(ids...)
}

// AddTokenIDs adds the "token" edge to the Agora_token entity by IDs.
func (uc *UserCreate) AddTokenIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddTokenIDs(ids...)
	return uc
}

// AddToken adds the "token" edges to the Agora_token entity.
func (uc *UserCreate) AddToken(a ...*Agora_token) *UserCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddTokenIDs(ids...)
}

// AddCreationIDs adds the "creation" edge to the Creation entity by IDs.
func (uc *UserCreate) AddCreationIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddCreationIDs(ids...)
	return uc
}

// AddCreation adds the "creation" edges to the Creation entity.
func (uc *UserCreate) AddCreation(c ...*Creation) *UserCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCreationIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (uc *UserCreate) AddContactIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddContactIDs(ids...)
	return uc
}

// AddContact adds the "contact" edges to the Contact entity.
func (uc *UserCreate) AddContact(c ...*Contact) *UserCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddContactIDs(ids...)
}

// AddSettingIDs adds the "setting" edge to the Setting entity by IDs.
func (uc *UserCreate) AddSettingIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddSettingIDs(ids...)
	return uc
}

// AddSetting adds the "setting" edges to the Setting entity.
func (uc *UserCreate) AddSetting(s ...*Setting) *UserCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSettingIDs(ids...)
}

// AddNftIDs adds the "nft" edge to the NFT entity by IDs.
func (uc *UserCreate) AddNftIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddNftIDs(ids...)
	return uc
}

// AddNft adds the "nft" edges to the NFT entity.
func (uc *UserCreate) AddNft(n ...*NFT) *UserCreate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddNftIDs(ids...)
}

// AddStreamIDs adds the "stream" edge to the Stream entity by IDs.
func (uc *UserCreate) AddStreamIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddStreamIDs(ids...)
	return uc
}

// AddStream adds the "stream" edges to the Stream entity.
func (uc *UserCreate) AddStream(s ...*Stream) *UserCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddStreamIDs(ids...)
}

// AddMaskIDs adds the "mask" edge to the Mask entity by IDs.
func (uc *UserCreate) AddMaskIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddMaskIDs(ids...)
	return uc
}

// AddMask adds the "mask" edges to the Mask entity.
func (uc *UserCreate) AddMask(m ...*Mask) *UserCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMaskIDs(ids...)
}

// AddTimedewIDs adds the "timedew" edge to the TimeDew entity by IDs.
func (uc *UserCreate) AddTimedewIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddTimedewIDs(ids...)
	return uc
}

// AddTimedew adds the "timedew" edges to the TimeDew entity.
func (uc *UserCreate) AddTimedew(t ...*TimeDew) *UserCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTimedewIDs(ids...)
}

// AddCollectionIDs adds the "collection" edge to the Collection entity by IDs.
func (uc *UserCreate) AddCollectionIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddCollectionIDs(ids...)
	return uc
}

// AddCollection adds the "collection" edges to the Collection entity.
func (uc *UserCreate) AddCollection(c ...*Collection) *UserCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCollectionIDs(ids...)
}

// AddInviteCodeIDs adds the "invite_code" edge to the Invite_Code entity by IDs.
func (uc *UserCreate) AddInviteCodeIDs(ids ...int) *UserCreate {
	uc.mutation.AddInviteCodeIDs(ids...)
	return uc
}

// AddInviteCode adds the "invite_code" edges to the Invite_Code entity.
func (uc *UserCreate) AddInviteCode(i ...*Invite_Code) *UserCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddInviteCodeIDs(ids...)
}

// AddFeedbackIDs adds the "feedback" edge to the Feedback entity by IDs.
func (uc *UserCreate) AddFeedbackIDs(ids ...int) *UserCreate {
	uc.mutation.AddFeedbackIDs(ids...)
	return uc
}

// AddFeedback adds the "feedback" edges to the Feedback entity.
func (uc *UserCreate) AddFeedback(f ...*Feedback) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddFeedbackIDs(ids...)
}

// AddReactionTimedewIDs adds the "reaction_timedew" edge to the TimeDew entity by IDs.
func (uc *UserCreate) AddReactionTimedewIDs(ids ...uint64) *UserCreate {
	uc.mutation.AddReactionTimedewIDs(ids...)
	return uc
}

// AddReactionTimedew adds the "reaction_timedew" edges to the TimeDew entity.
func (uc *UserCreate) AddReactionTimedew(t ...*TimeDew) *UserCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddReactionTimedewIDs(ids...)
}

// AddJoinIDs adds the "joins" edge to the Join entity by IDs.
func (uc *UserCreate) AddJoinIDs(ids ...int) *UserCreate {
	uc.mutation.AddJoinIDs(ids...)
	return uc
}

// AddJoins adds the "joins" edges to the Join entity.
func (uc *UserCreate) AddJoins(j ...*Join) *UserCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJoinIDs(ids...)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (uc *UserCreate) AddFriendshipIDs(ids ...int) *UserCreate {
	uc.mutation.AddFriendshipIDs(ids...)
	return uc
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (uc *UserCreate) AddFriendships(f ...*Friendship) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddFriendshipIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (uc *UserCreate) AddReactionIDs(ids ...int) *UserCreate {
	uc.mutation.AddReactionIDs(ids...)
	return uc
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (uc *UserCreate) AddReactions(r ...*Reaction) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddReactionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreateTime(); !ok {
		v := user.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		v := user.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	if _, ok := uc.mutation.ThumbnailURL(); !ok {
		v := user.DefaultThumbnailURL
		uc.mutation.SetThumbnailURL(v)
	}
	if _, ok := uc.mutation.Status(); !ok {
		v := user.DefaultStatus
		uc.mutation.SetStatus(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.IsShowCollections(); !ok {
		v := user.DefaultIsShowCollections
		uc.mutation.SetIsShowCollections(v)
	}
	if _, ok := uc.mutation.IsInvited(); !ok {
		v := user.DefaultIsInvited
		uc.mutation.SetIsInvited(v)
	}
	if _, ok := uc.mutation.NeedPrivacyConfirm(); !ok {
		v := user.DefaultNeedPrivacyConfirm
		uc.mutation.SetNeedPrivacyConfirm(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "User.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "User.update_time"`)}
	}
	if _, ok := uc.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "User.thumbnail_url"`)}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "User.status"`)}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsShowCollections(); !ok {
		return &ValidationError{Name: "is_show_collections", err: errors.New(`ent: missing required field "User.is_show_collections"`)}
	}
	if _, ok := uc.mutation.IsInvited(); !ok {
		return &ValidationError{Name: "is_invited", err: errors.New(`ent: missing required field "User.is_invited"`)}
	}
	if _, ok := uc.mutation.NeedPrivacyConfirm(); !ok {
		return &ValidationError{Name: "need_privacy_confirm", err: errors.New(`ent: missing required field "User.need_privacy_confirm"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
		_node.NickName = value
	}
	if value, ok := uc.mutation.SystemName(); ok {
		_spec.SetField(user.FieldSystemName, field.TypeString, value)
		_node.SystemName = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := uc.mutation.ThumbnailURL(); ok {
		_spec.SetField(user.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := uc.mutation.Sex(); ok {
		_spec.SetField(user.FieldSex, field.TypeString, value)
		_node.Sex = value
	}
	if value, ok := uc.mutation.MobileNo(); ok {
		_spec.SetField(user.FieldMobileNo, field.TypeString, value)
		_node.MobileNo = value
	}
	if value, ok := uc.mutation.RegionCode(); ok {
		_spec.SetField(user.FieldRegionCode, field.TypeString, value)
		_node.RegionCode = value
	}
	if value, ok := uc.mutation.EmailAddress(); ok {
		_spec.SetField(user.FieldEmailAddress, field.TypeString, value)
		_node.EmailAddress = value
	}
	if value, ok := uc.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeString, value)
		_node.Birthday = value
	}
	if value, ok := uc.mutation.SchoolName(); ok {
		_spec.SetField(user.FieldSchoolName, field.TypeString, value)
		_node.SchoolName = value
	}
	if value, ok := uc.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.IsOnline(); ok {
		_spec.SetField(user.FieldIsOnline, field.TypeBool, value)
		_node.IsOnline = value
	}
	if value, ok := uc.mutation.IsShowCollections(); ok {
		_spec.SetField(user.FieldIsShowCollections, field.TypeBool, value)
		_node.IsShowCollections = value
	}
	if value, ok := uc.mutation.IsInvited(); ok {
		_spec.SetField(user.FieldIsInvited, field.TypeBool, value)
		_node.IsInvited = value
	}
	if value, ok := uc.mutation.NeedPrivacyConfirm(); ok {
		_spec.SetField(user.FieldNeedPrivacyConfirm, field.TypeBool, value)
		_node.NeedPrivacyConfirm = value
	}
	if value, ok := uc.mutation.CurrentCsFieldID(); ok {
		_spec.SetField(user.FieldCurrentCsFieldID, field.TypeUint64, value)
		_node.CurrentCsFieldID = value
	}
	if value, ok := uc.mutation.CurrentCsFieldName(); ok {
		_spec.SetField(user.FieldCurrentCsFieldName, field.TypeString, value)
		_node.CurrentCsFieldName = value
	}
	if value, ok := uc.mutation.PrivateCsFieldID(); ok {
		_spec.SetField(user.FieldPrivateCsFieldID, field.TypeUint64, value)
		_node.PrivateCsFieldID = value
	}
	if value, ok := uc.mutation.PrivateCsFieldName(); ok {
		_spec.SetField(user.FieldPrivateCsFieldName, field.TypeString, value)
		_node.PrivateCsFieldName = value
	}
	if value, ok := uc.mutation.RegisterIP(); ok {
		_spec.SetField(user.FieldRegisterIP, field.TypeString, value)
		_node.RegisterIP = value
	}
	if value, ok := uc.mutation.Constellation(); ok {
		_spec.SetField(user.FieldConstellation, field.TypeString, value)
		_node.Constellation = value
	}
	if value, ok := uc.mutation.TotalConnections(); ok {
		_spec.SetField(user.FieldTotalConnections, field.TypeInt, value)
		_node.TotalConnections = value
	}
	if nodes := uc.mutation.UserAuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user_auth.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessageTable,
			Columns: []string{user.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTable,
			Columns: []string{user.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JoinedCsfieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedCsfieldTable,
			Columns: user.JoinedCsfieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: csfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &JoinCreate{config: uc.config, mutation: newJoinMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: uc.config, mutation: newFriendshipMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.HiddenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HiddenTable,
			Columns: []string{user.HiddenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hidden.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoryTable,
			Columns: []string{user.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: agora_token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreationTable,
			Columns: []string{user.CreationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: creation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTable,
			Columns: []string{user.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: setting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NftTable,
			Columns: []string{user.NftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: nft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.StreamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StreamTable,
			Columns: []string{user.StreamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stream.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MaskTable,
			Columns: []string{user.MaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: mask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TimedewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TimedewTable,
			Columns: []string{user.TimedewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: timedew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectionTable,
			Columns: []string{user.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.InviteCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InviteCodeTable,
			Columns: []string{user.InviteCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite_code.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedbackTable,
			Columns: []string{user.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ReactionTimedewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ReactionTimedewTable,
			Columns: user.ReactionTimedewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: timedew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: uc.config, mutation: newReactionMutation(uc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JoinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.JoinsTable,
			Columns: []string{user.JoinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: join.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: friendship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ReactionsTable,
			Columns: []string{user.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsert) SetUpdateTime(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateTime() *UserUpsert {
	u.SetExcluded(user.FieldUpdateTime)
	return u
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsert) SetOpenID(v string) *UserUpsert {
	u.Set(user.FieldOpenID, v)
	return u
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateOpenID() *UserUpsert {
	u.SetExcluded(user.FieldOpenID)
	return u
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsert) ClearOpenID() *UserUpsert {
	u.SetNull(user.FieldOpenID)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserUpsert) ClearName() *UserUpsert {
	u.SetNull(user.FieldName)
	return u
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsert) SetNickName(v string) *UserUpsert {
	u.Set(user.FieldNickName, v)
	return u
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateNickName() *UserUpsert {
	u.SetExcluded(user.FieldNickName)
	return u
}

// ClearNickName clears the value of the "nick_name" field.
func (u *UserUpsert) ClearNickName() *UserUpsert {
	u.SetNull(user.FieldNickName)
	return u
}

// SetSystemName sets the "system_name" field.
func (u *UserUpsert) SetSystemName(v string) *UserUpsert {
	u.Set(user.FieldSystemName, v)
	return u
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateSystemName() *UserUpsert {
	u.SetExcluded(user.FieldSystemName)
	return u
}

// ClearSystemName clears the value of the "system_name" field.
func (u *UserUpsert) ClearSystemName() *UserUpsert {
	u.SetNull(user.FieldSystemName)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsert) SetAvatar(v string) *UserUpsert {
	u.Set(user.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatar() *UserUpsert {
	u.SetExcluded(user.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsert) ClearAvatar() *UserUpsert {
	u.SetNull(user.FieldAvatar)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *UserUpsert) SetThumbnailURL(v string) *UserUpsert {
	u.Set(user.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateThumbnailURL() *UserUpsert {
	u.SetExcluded(user.FieldThumbnailURL)
	return u
}

// SetSex sets the "sex" field.
func (u *UserUpsert) SetSex(v string) *UserUpsert {
	u.Set(user.FieldSex, v)
	return u
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsert) UpdateSex() *UserUpsert {
	u.SetExcluded(user.FieldSex)
	return u
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsert) ClearSex() *UserUpsert {
	u.SetNull(user.FieldSex)
	return u
}

// SetMobileNo sets the "mobile_no" field.
func (u *UserUpsert) SetMobileNo(v string) *UserUpsert {
	u.Set(user.FieldMobileNo, v)
	return u
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *UserUpsert) UpdateMobileNo() *UserUpsert {
	u.SetExcluded(user.FieldMobileNo)
	return u
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *UserUpsert) ClearMobileNo() *UserUpsert {
	u.SetNull(user.FieldMobileNo)
	return u
}

// SetRegionCode sets the "region_code" field.
func (u *UserUpsert) SetRegionCode(v string) *UserUpsert {
	u.Set(user.FieldRegionCode, v)
	return u
}

// UpdateRegionCode sets the "region_code" field to the value that was provided on create.
func (u *UserUpsert) UpdateRegionCode() *UserUpsert {
	u.SetExcluded(user.FieldRegionCode)
	return u
}

// ClearRegionCode clears the value of the "region_code" field.
func (u *UserUpsert) ClearRegionCode() *UserUpsert {
	u.SetNull(user.FieldRegionCode)
	return u
}

// SetEmailAddress sets the "email_address" field.
func (u *UserUpsert) SetEmailAddress(v string) *UserUpsert {
	u.Set(user.FieldEmailAddress, v)
	return u
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailAddress() *UserUpsert {
	u.SetExcluded(user.FieldEmailAddress)
	return u
}

// ClearEmailAddress clears the value of the "email_address" field.
func (u *UserUpsert) ClearEmailAddress() *UserUpsert {
	u.SetNull(user.FieldEmailAddress)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsert) SetBirthday(v string) *UserUpsert {
	u.Set(user.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsert) UpdateBirthday() *UserUpsert {
	u.SetExcluded(user.FieldBirthday)
	return u
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsert) ClearBirthday() *UserUpsert {
	u.SetNull(user.FieldBirthday)
	return u
}

// SetSchoolName sets the "school_name" field.
func (u *UserUpsert) SetSchoolName(v string) *UserUpsert {
	u.Set(user.FieldSchoolName, v)
	return u
}

// UpdateSchoolName sets the "school_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateSchoolName() *UserUpsert {
	u.SetExcluded(user.FieldSchoolName)
	return u
}

// ClearSchoolName clears the value of the "school_name" field.
func (u *UserUpsert) ClearSchoolName() *UserUpsert {
	u.SetNull(user.FieldSchoolName)
	return u
}

// SetBio sets the "bio" field.
func (u *UserUpsert) SetBio(v string) *UserUpsert {
	u.Set(user.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsert) UpdateBio() *UserUpsert {
	u.SetExcluded(user.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsert) ClearBio() *UserUpsert {
	u.SetNull(user.FieldBio)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v user.Status) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v user.Role) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// SetIsOnline sets the "is_online" field.
func (u *UserUpsert) SetIsOnline(v bool) *UserUpsert {
	u.Set(user.FieldIsOnline, v)
	return u
}

// UpdateIsOnline sets the "is_online" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsOnline() *UserUpsert {
	u.SetExcluded(user.FieldIsOnline)
	return u
}

// ClearIsOnline clears the value of the "is_online" field.
func (u *UserUpsert) ClearIsOnline() *UserUpsert {
	u.SetNull(user.FieldIsOnline)
	return u
}

// SetIsShowCollections sets the "is_show_collections" field.
func (u *UserUpsert) SetIsShowCollections(v bool) *UserUpsert {
	u.Set(user.FieldIsShowCollections, v)
	return u
}

// UpdateIsShowCollections sets the "is_show_collections" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsShowCollections() *UserUpsert {
	u.SetExcluded(user.FieldIsShowCollections)
	return u
}

// SetIsInvited sets the "is_invited" field.
func (u *UserUpsert) SetIsInvited(v bool) *UserUpsert {
	u.Set(user.FieldIsInvited, v)
	return u
}

// UpdateIsInvited sets the "is_invited" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsInvited() *UserUpsert {
	u.SetExcluded(user.FieldIsInvited)
	return u
}

// SetNeedPrivacyConfirm sets the "need_privacy_confirm" field.
func (u *UserUpsert) SetNeedPrivacyConfirm(v bool) *UserUpsert {
	u.Set(user.FieldNeedPrivacyConfirm, v)
	return u
}

// UpdateNeedPrivacyConfirm sets the "need_privacy_confirm" field to the value that was provided on create.
func (u *UserUpsert) UpdateNeedPrivacyConfirm() *UserUpsert {
	u.SetExcluded(user.FieldNeedPrivacyConfirm)
	return u
}

// SetCurrentCsFieldID sets the "current_cs_field_id" field.
func (u *UserUpsert) SetCurrentCsFieldID(v uint64) *UserUpsert {
	u.Set(user.FieldCurrentCsFieldID, v)
	return u
}

// UpdateCurrentCsFieldID sets the "current_cs_field_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateCurrentCsFieldID() *UserUpsert {
	u.SetExcluded(user.FieldCurrentCsFieldID)
	return u
}

// AddCurrentCsFieldID adds v to the "current_cs_field_id" field.
func (u *UserUpsert) AddCurrentCsFieldID(v uint64) *UserUpsert {
	u.Add(user.FieldCurrentCsFieldID, v)
	return u
}

// ClearCurrentCsFieldID clears the value of the "current_cs_field_id" field.
func (u *UserUpsert) ClearCurrentCsFieldID() *UserUpsert {
	u.SetNull(user.FieldCurrentCsFieldID)
	return u
}

// SetCurrentCsFieldName sets the "current_cs_field_name" field.
func (u *UserUpsert) SetCurrentCsFieldName(v string) *UserUpsert {
	u.Set(user.FieldCurrentCsFieldName, v)
	return u
}

// UpdateCurrentCsFieldName sets the "current_cs_field_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateCurrentCsFieldName() *UserUpsert {
	u.SetExcluded(user.FieldCurrentCsFieldName)
	return u
}

// ClearCurrentCsFieldName clears the value of the "current_cs_field_name" field.
func (u *UserUpsert) ClearCurrentCsFieldName() *UserUpsert {
	u.SetNull(user.FieldCurrentCsFieldName)
	return u
}

// SetPrivateCsFieldID sets the "private_cs_field_id" field.
func (u *UserUpsert) SetPrivateCsFieldID(v uint64) *UserUpsert {
	u.Set(user.FieldPrivateCsFieldID, v)
	return u
}

// UpdatePrivateCsFieldID sets the "private_cs_field_id" field to the value that was provided on create.
func (u *UserUpsert) UpdatePrivateCsFieldID() *UserUpsert {
	u.SetExcluded(user.FieldPrivateCsFieldID)
	return u
}

// AddPrivateCsFieldID adds v to the "private_cs_field_id" field.
func (u *UserUpsert) AddPrivateCsFieldID(v uint64) *UserUpsert {
	u.Add(user.FieldPrivateCsFieldID, v)
	return u
}

// ClearPrivateCsFieldID clears the value of the "private_cs_field_id" field.
func (u *UserUpsert) ClearPrivateCsFieldID() *UserUpsert {
	u.SetNull(user.FieldPrivateCsFieldID)
	return u
}

// SetPrivateCsFieldName sets the "private_cs_field_name" field.
func (u *UserUpsert) SetPrivateCsFieldName(v string) *UserUpsert {
	u.Set(user.FieldPrivateCsFieldName, v)
	return u
}

// UpdatePrivateCsFieldName sets the "private_cs_field_name" field to the value that was provided on create.
func (u *UserUpsert) UpdatePrivateCsFieldName() *UserUpsert {
	u.SetExcluded(user.FieldPrivateCsFieldName)
	return u
}

// ClearPrivateCsFieldName clears the value of the "private_cs_field_name" field.
func (u *UserUpsert) ClearPrivateCsFieldName() *UserUpsert {
	u.SetNull(user.FieldPrivateCsFieldName)
	return u
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsert) SetRegisterIP(v string) *UserUpsert {
	u.Set(user.FieldRegisterIP, v)
	return u
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsert) UpdateRegisterIP() *UserUpsert {
	u.SetExcluded(user.FieldRegisterIP)
	return u
}

// ClearRegisterIP clears the value of the "register_ip" field.
func (u *UserUpsert) ClearRegisterIP() *UserUpsert {
	u.SetNull(user.FieldRegisterIP)
	return u
}

// SetConstellation sets the "constellation" field.
func (u *UserUpsert) SetConstellation(v string) *UserUpsert {
	u.Set(user.FieldConstellation, v)
	return u
}

// UpdateConstellation sets the "constellation" field to the value that was provided on create.
func (u *UserUpsert) UpdateConstellation() *UserUpsert {
	u.SetExcluded(user.FieldConstellation)
	return u
}

// ClearConstellation clears the value of the "constellation" field.
func (u *UserUpsert) ClearConstellation() *UserUpsert {
	u.SetNull(user.FieldConstellation)
	return u
}

// SetTotalConnections sets the "total_connections" field.
func (u *UserUpsert) SetTotalConnections(v int) *UserUpsert {
	u.Set(user.FieldTotalConnections, v)
	return u
}

// UpdateTotalConnections sets the "total_connections" field to the value that was provided on create.
func (u *UserUpsert) UpdateTotalConnections() *UserUpsert {
	u.SetExcluded(user.FieldTotalConnections)
	return u
}

// AddTotalConnections adds v to the "total_connections" field.
func (u *UserUpsert) AddTotalConnections(v int) *UserUpsert {
	u.Add(user.FieldTotalConnections, v)
	return u
}

// ClearTotalConnections clears the value of the "total_connections" field.
func (u *UserUpsert) ClearTotalConnections() *UserUpsert {
	u.SetNull(user.FieldTotalConnections)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(user.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertOne) SetUpdateTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsertOne) SetOpenID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOpenID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsertOne) ClearOpenID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOpenID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertOne) ClearName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsertOne) SetNickName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNickName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// ClearNickName clears the value of the "nick_name" field.
func (u *UserUpsertOne) ClearNickName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickName()
	})
}

// SetSystemName sets the "system_name" field.
func (u *UserUpsertOne) SetSystemName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSystemName(v)
	})
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSystemName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSystemName()
	})
}

// ClearSystemName clears the value of the "system_name" field.
func (u *UserUpsertOne) ClearSystemName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSystemName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertOne) SetAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertOne) ClearAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *UserUpsertOne) SetThumbnailURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateThumbnailURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetSex sets the "sex" field.
func (u *UserUpsertOne) SetSex(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSex() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsertOne) ClearSex() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSex()
	})
}

// SetMobileNo sets the "mobile_no" field.
func (u *UserUpsertOne) SetMobileNo(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMobileNo(v)
	})
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMobileNo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobileNo()
	})
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *UserUpsertOne) ClearMobileNo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobileNo()
	})
}

// SetRegionCode sets the "region_code" field.
func (u *UserUpsertOne) SetRegionCode(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRegionCode(v)
	})
}

// UpdateRegionCode sets the "region_code" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRegionCode() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegionCode()
	})
}

// ClearRegionCode clears the value of the "region_code" field.
func (u *UserUpsertOne) ClearRegionCode() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegionCode()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *UserUpsertOne) SetEmailAddress(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailAddress()
	})
}

// ClearEmailAddress clears the value of the "email_address" field.
func (u *UserUpsertOne) ClearEmailAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailAddress()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertOne) SetBirthday(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertOne) ClearBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetSchoolName sets the "school_name" field.
func (u *UserUpsertOne) SetSchoolName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSchoolName(v)
	})
}

// UpdateSchoolName sets the "school_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSchoolName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSchoolName()
	})
}

// ClearSchoolName clears the value of the "school_name" field.
func (u *UserUpsertOne) ClearSchoolName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSchoolName()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertOne) SetBio(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertOne) ClearBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v user.Status) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v user.Role) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetIsOnline sets the "is_online" field.
func (u *UserUpsertOne) SetIsOnline(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsOnline(v)
	})
}

// UpdateIsOnline sets the "is_online" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsOnline() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsOnline()
	})
}

// ClearIsOnline clears the value of the "is_online" field.
func (u *UserUpsertOne) ClearIsOnline() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearIsOnline()
	})
}

// SetIsShowCollections sets the "is_show_collections" field.
func (u *UserUpsertOne) SetIsShowCollections(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsShowCollections(v)
	})
}

// UpdateIsShowCollections sets the "is_show_collections" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsShowCollections() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsShowCollections()
	})
}

// SetIsInvited sets the "is_invited" field.
func (u *UserUpsertOne) SetIsInvited(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsInvited(v)
	})
}

// UpdateIsInvited sets the "is_invited" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsInvited() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsInvited()
	})
}

// SetNeedPrivacyConfirm sets the "need_privacy_confirm" field.
func (u *UserUpsertOne) SetNeedPrivacyConfirm(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNeedPrivacyConfirm(v)
	})
}

// UpdateNeedPrivacyConfirm sets the "need_privacy_confirm" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNeedPrivacyConfirm() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNeedPrivacyConfirm()
	})
}

// SetCurrentCsFieldID sets the "current_cs_field_id" field.
func (u *UserUpsertOne) SetCurrentCsFieldID(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCurrentCsFieldID(v)
	})
}

// AddCurrentCsFieldID adds v to the "current_cs_field_id" field.
func (u *UserUpsertOne) AddCurrentCsFieldID(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCurrentCsFieldID(v)
	})
}

// UpdateCurrentCsFieldID sets the "current_cs_field_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCurrentCsFieldID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCurrentCsFieldID()
	})
}

// ClearCurrentCsFieldID clears the value of the "current_cs_field_id" field.
func (u *UserUpsertOne) ClearCurrentCsFieldID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCurrentCsFieldID()
	})
}

// SetCurrentCsFieldName sets the "current_cs_field_name" field.
func (u *UserUpsertOne) SetCurrentCsFieldName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCurrentCsFieldName(v)
	})
}

// UpdateCurrentCsFieldName sets the "current_cs_field_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCurrentCsFieldName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCurrentCsFieldName()
	})
}

// ClearCurrentCsFieldName clears the value of the "current_cs_field_name" field.
func (u *UserUpsertOne) ClearCurrentCsFieldName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCurrentCsFieldName()
	})
}

// SetPrivateCsFieldID sets the "private_cs_field_id" field.
func (u *UserUpsertOne) SetPrivateCsFieldID(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPrivateCsFieldID(v)
	})
}

// AddPrivateCsFieldID adds v to the "private_cs_field_id" field.
func (u *UserUpsertOne) AddPrivateCsFieldID(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPrivateCsFieldID(v)
	})
}

// UpdatePrivateCsFieldID sets the "private_cs_field_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePrivateCsFieldID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrivateCsFieldID()
	})
}

// ClearPrivateCsFieldID clears the value of the "private_cs_field_id" field.
func (u *UserUpsertOne) ClearPrivateCsFieldID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrivateCsFieldID()
	})
}

// SetPrivateCsFieldName sets the "private_cs_field_name" field.
func (u *UserUpsertOne) SetPrivateCsFieldName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPrivateCsFieldName(v)
	})
}

// UpdatePrivateCsFieldName sets the "private_cs_field_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePrivateCsFieldName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrivateCsFieldName()
	})
}

// ClearPrivateCsFieldName clears the value of the "private_cs_field_name" field.
func (u *UserUpsertOne) ClearPrivateCsFieldName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrivateCsFieldName()
	})
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsertOne) SetRegisterIP(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRegisterIP(v)
	})
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRegisterIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegisterIP()
	})
}

// ClearRegisterIP clears the value of the "register_ip" field.
func (u *UserUpsertOne) ClearRegisterIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegisterIP()
	})
}

// SetConstellation sets the "constellation" field.
func (u *UserUpsertOne) SetConstellation(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetConstellation(v)
	})
}

// UpdateConstellation sets the "constellation" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateConstellation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateConstellation()
	})
}

// ClearConstellation clears the value of the "constellation" field.
func (u *UserUpsertOne) ClearConstellation() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearConstellation()
	})
}

// SetTotalConnections sets the "total_connections" field.
func (u *UserUpsertOne) SetTotalConnections(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTotalConnections(v)
	})
}

// AddTotalConnections adds v to the "total_connections" field.
func (u *UserUpsertOne) AddTotalConnections(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddTotalConnections(v)
	})
}

// UpdateTotalConnections sets the "total_connections" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTotalConnections() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTotalConnections()
	})
}

// ClearTotalConnections clears the value of the "total_connections" field.
func (u *UserUpsertOne) ClearTotalConnections() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearTotalConnections()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(user.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertBulk) SetUpdateTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsertBulk) SetOpenID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOpenID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsertBulk) ClearOpenID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOpenID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertBulk) ClearName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetNickName sets the "nick_name" field.
func (u *UserUpsertBulk) SetNickName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nick_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNickName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// ClearNickName clears the value of the "nick_name" field.
func (u *UserUpsertBulk) ClearNickName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickName()
	})
}

// SetSystemName sets the "system_name" field.
func (u *UserUpsertBulk) SetSystemName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSystemName(v)
	})
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSystemName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSystemName()
	})
}

// ClearSystemName clears the value of the "system_name" field.
func (u *UserUpsertBulk) ClearSystemName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSystemName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertBulk) SetAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertBulk) ClearAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *UserUpsertBulk) SetThumbnailURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateThumbnailURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetSex sets the "sex" field.
func (u *UserUpsertBulk) SetSex(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSex() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsertBulk) ClearSex() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSex()
	})
}

// SetMobileNo sets the "mobile_no" field.
func (u *UserUpsertBulk) SetMobileNo(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMobileNo(v)
	})
}

// UpdateMobileNo sets the "mobile_no" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMobileNo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobileNo()
	})
}

// ClearMobileNo clears the value of the "mobile_no" field.
func (u *UserUpsertBulk) ClearMobileNo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobileNo()
	})
}

// SetRegionCode sets the "region_code" field.
func (u *UserUpsertBulk) SetRegionCode(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRegionCode(v)
	})
}

// UpdateRegionCode sets the "region_code" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRegionCode() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegionCode()
	})
}

// ClearRegionCode clears the value of the "region_code" field.
func (u *UserUpsertBulk) ClearRegionCode() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegionCode()
	})
}

// SetEmailAddress sets the "email_address" field.
func (u *UserUpsertBulk) SetEmailAddress(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailAddress(v)
	})
}

// UpdateEmailAddress sets the "email_address" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailAddress()
	})
}

// ClearEmailAddress clears the value of the "email_address" field.
func (u *UserUpsertBulk) ClearEmailAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailAddress()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertBulk) SetBirthday(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertBulk) ClearBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetSchoolName sets the "school_name" field.
func (u *UserUpsertBulk) SetSchoolName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSchoolName(v)
	})
}

// UpdateSchoolName sets the "school_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSchoolName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSchoolName()
	})
}

// ClearSchoolName clears the value of the "school_name" field.
func (u *UserUpsertBulk) ClearSchoolName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSchoolName()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertBulk) SetBio(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertBulk) ClearBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v user.Status) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v user.Role) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetIsOnline sets the "is_online" field.
func (u *UserUpsertBulk) SetIsOnline(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsOnline(v)
	})
}

// UpdateIsOnline sets the "is_online" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsOnline() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsOnline()
	})
}

// ClearIsOnline clears the value of the "is_online" field.
func (u *UserUpsertBulk) ClearIsOnline() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearIsOnline()
	})
}

// SetIsShowCollections sets the "is_show_collections" field.
func (u *UserUpsertBulk) SetIsShowCollections(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsShowCollections(v)
	})
}

// UpdateIsShowCollections sets the "is_show_collections" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsShowCollections() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsShowCollections()
	})
}

// SetIsInvited sets the "is_invited" field.
func (u *UserUpsertBulk) SetIsInvited(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsInvited(v)
	})
}

// UpdateIsInvited sets the "is_invited" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsInvited() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsInvited()
	})
}

// SetNeedPrivacyConfirm sets the "need_privacy_confirm" field.
func (u *UserUpsertBulk) SetNeedPrivacyConfirm(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNeedPrivacyConfirm(v)
	})
}

// UpdateNeedPrivacyConfirm sets the "need_privacy_confirm" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNeedPrivacyConfirm() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNeedPrivacyConfirm()
	})
}

// SetCurrentCsFieldID sets the "current_cs_field_id" field.
func (u *UserUpsertBulk) SetCurrentCsFieldID(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCurrentCsFieldID(v)
	})
}

// AddCurrentCsFieldID adds v to the "current_cs_field_id" field.
func (u *UserUpsertBulk) AddCurrentCsFieldID(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCurrentCsFieldID(v)
	})
}

// UpdateCurrentCsFieldID sets the "current_cs_field_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCurrentCsFieldID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCurrentCsFieldID()
	})
}

// ClearCurrentCsFieldID clears the value of the "current_cs_field_id" field.
func (u *UserUpsertBulk) ClearCurrentCsFieldID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCurrentCsFieldID()
	})
}

// SetCurrentCsFieldName sets the "current_cs_field_name" field.
func (u *UserUpsertBulk) SetCurrentCsFieldName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCurrentCsFieldName(v)
	})
}

// UpdateCurrentCsFieldName sets the "current_cs_field_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCurrentCsFieldName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCurrentCsFieldName()
	})
}

// ClearCurrentCsFieldName clears the value of the "current_cs_field_name" field.
func (u *UserUpsertBulk) ClearCurrentCsFieldName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCurrentCsFieldName()
	})
}

// SetPrivateCsFieldID sets the "private_cs_field_id" field.
func (u *UserUpsertBulk) SetPrivateCsFieldID(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPrivateCsFieldID(v)
	})
}

// AddPrivateCsFieldID adds v to the "private_cs_field_id" field.
func (u *UserUpsertBulk) AddPrivateCsFieldID(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPrivateCsFieldID(v)
	})
}

// UpdatePrivateCsFieldID sets the "private_cs_field_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePrivateCsFieldID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrivateCsFieldID()
	})
}

// ClearPrivateCsFieldID clears the value of the "private_cs_field_id" field.
func (u *UserUpsertBulk) ClearPrivateCsFieldID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrivateCsFieldID()
	})
}

// SetPrivateCsFieldName sets the "private_cs_field_name" field.
func (u *UserUpsertBulk) SetPrivateCsFieldName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPrivateCsFieldName(v)
	})
}

// UpdatePrivateCsFieldName sets the "private_cs_field_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePrivateCsFieldName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrivateCsFieldName()
	})
}

// ClearPrivateCsFieldName clears the value of the "private_cs_field_name" field.
func (u *UserUpsertBulk) ClearPrivateCsFieldName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrivateCsFieldName()
	})
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsertBulk) SetRegisterIP(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRegisterIP(v)
	})
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRegisterIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegisterIP()
	})
}

// ClearRegisterIP clears the value of the "register_ip" field.
func (u *UserUpsertBulk) ClearRegisterIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRegisterIP()
	})
}

// SetConstellation sets the "constellation" field.
func (u *UserUpsertBulk) SetConstellation(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetConstellation(v)
	})
}

// UpdateConstellation sets the "constellation" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateConstellation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateConstellation()
	})
}

// ClearConstellation clears the value of the "constellation" field.
func (u *UserUpsertBulk) ClearConstellation() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearConstellation()
	})
}

// SetTotalConnections sets the "total_connections" field.
func (u *UserUpsertBulk) SetTotalConnections(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTotalConnections(v)
	})
}

// AddTotalConnections adds v to the "total_connections" field.
func (u *UserUpsertBulk) AddTotalConnections(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddTotalConnections(v)
	})
}

// UpdateTotalConnections sets the "total_connections" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTotalConnections() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTotalConnections()
	})
}

// ClearTotalConnections clears the value of the "total_connections" field.
func (u *UserUpsertBulk) ClearTotalConnections() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearTotalConnections()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
