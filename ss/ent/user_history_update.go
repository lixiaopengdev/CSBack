// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_history"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserHistoryUpdate is the builder for updating User_history entities.
type UserHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *UserHistoryMutation
}

// Where appends a list predicates to the UserHistoryUpdate builder.
func (uhu *UserHistoryUpdate) Where(ps ...predicate.User_history) *UserHistoryUpdate {
	uhu.mutation.Where(ps...)
	return uhu
}

// SetUpdateTime sets the "update_time" field.
func (uhu *UserHistoryUpdate) SetUpdateTime(t time.Time) *UserHistoryUpdate {
	uhu.mutation.SetUpdateTime(t)
	return uhu
}

// SetType sets the "type" field.
func (uhu *UserHistoryUpdate) SetType(uh user_history.Type) *UserHistoryUpdate {
	uhu.mutation.SetType(uh)
	return uhu
}

// SetName sets the "name" field.
func (uhu *UserHistoryUpdate) SetName(s string) *UserHistoryUpdate {
	uhu.mutation.SetName(s)
	return uhu
}

// SetResourceURL sets the "resource_url" field.
func (uhu *UserHistoryUpdate) SetResourceURL(s string) *UserHistoryUpdate {
	uhu.mutation.SetResourceURL(s)
	return uhu
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (uhu *UserHistoryUpdate) SetNillableResourceURL(s *string) *UserHistoryUpdate {
	if s != nil {
		uhu.SetResourceURL(*s)
	}
	return uhu
}

// ClearResourceURL clears the value of the "resource_url" field.
func (uhu *UserHistoryUpdate) ClearResourceURL() *UserHistoryUpdate {
	uhu.mutation.ClearResourceURL()
	return uhu
}

// SetUserID sets the "user_id" field.
func (uhu *UserHistoryUpdate) SetUserID(u uint64) *UserHistoryUpdate {
	uhu.mutation.SetUserID(u)
	return uhu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uhu *UserHistoryUpdate) SetOwnerID(id uint64) *UserHistoryUpdate {
	uhu.mutation.SetOwnerID(id)
	return uhu
}

// SetOwner sets the "owner" edge to the User entity.
func (uhu *UserHistoryUpdate) SetOwner(u *User) *UserHistoryUpdate {
	return uhu.SetOwnerID(u.ID)
}

// Mutation returns the UserHistoryMutation object of the builder.
func (uhu *UserHistoryUpdate) Mutation() *UserHistoryMutation {
	return uhu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uhu *UserHistoryUpdate) ClearOwner() *UserHistoryUpdate {
	uhu.mutation.ClearOwner()
	return uhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uhu *UserHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uhu.defaults()
	if len(uhu.hooks) == 0 {
		if err = uhu.check(); err != nil {
			return 0, err
		}
		affected, err = uhu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uhu.check(); err != nil {
				return 0, err
			}
			uhu.mutation = mutation
			affected, err = uhu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uhu.hooks) - 1; i >= 0; i-- {
			if uhu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uhu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uhu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uhu *UserHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := uhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uhu *UserHistoryUpdate) Exec(ctx context.Context) error {
	_, err := uhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhu *UserHistoryUpdate) ExecX(ctx context.Context) {
	if err := uhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhu *UserHistoryUpdate) defaults() {
	if _, ok := uhu.mutation.UpdateTime(); !ok {
		v := user_history.UpdateDefaultUpdateTime()
		uhu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhu *UserHistoryUpdate) check() error {
	if v, ok := uhu.mutation.GetType(); ok {
		if err := user_history.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User_history.type": %w`, err)}
		}
	}
	if _, ok := uhu.mutation.OwnerID(); uhu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User_history.owner"`)
	}
	return nil
}

func (uhu *UserHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_history.Table,
			Columns: user_history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user_history.FieldID,
			},
		},
	}
	if ps := uhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhu.mutation.UpdateTime(); ok {
		_spec.SetField(user_history.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uhu.mutation.GetType(); ok {
		_spec.SetField(user_history.FieldType, field.TypeEnum, value)
	}
	if value, ok := uhu.mutation.Name(); ok {
		_spec.SetField(user_history.FieldName, field.TypeString, value)
	}
	if value, ok := uhu.mutation.ResourceURL(); ok {
		_spec.SetField(user_history.FieldResourceURL, field.TypeString, value)
	}
	if uhu.mutation.ResourceURLCleared() {
		_spec.ClearField(user_history.FieldResourceURL, field.TypeString)
	}
	if uhu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_history.OwnerTable,
			Columns: []string{user_history.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_history.OwnerTable,
			Columns: []string{user_history.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserHistoryUpdateOne is the builder for updating a single User_history entity.
type UserHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserHistoryMutation
}

// SetUpdateTime sets the "update_time" field.
func (uhuo *UserHistoryUpdateOne) SetUpdateTime(t time.Time) *UserHistoryUpdateOne {
	uhuo.mutation.SetUpdateTime(t)
	return uhuo
}

// SetType sets the "type" field.
func (uhuo *UserHistoryUpdateOne) SetType(uh user_history.Type) *UserHistoryUpdateOne {
	uhuo.mutation.SetType(uh)
	return uhuo
}

// SetName sets the "name" field.
func (uhuo *UserHistoryUpdateOne) SetName(s string) *UserHistoryUpdateOne {
	uhuo.mutation.SetName(s)
	return uhuo
}

// SetResourceURL sets the "resource_url" field.
func (uhuo *UserHistoryUpdateOne) SetResourceURL(s string) *UserHistoryUpdateOne {
	uhuo.mutation.SetResourceURL(s)
	return uhuo
}

// SetNillableResourceURL sets the "resource_url" field if the given value is not nil.
func (uhuo *UserHistoryUpdateOne) SetNillableResourceURL(s *string) *UserHistoryUpdateOne {
	if s != nil {
		uhuo.SetResourceURL(*s)
	}
	return uhuo
}

// ClearResourceURL clears the value of the "resource_url" field.
func (uhuo *UserHistoryUpdateOne) ClearResourceURL() *UserHistoryUpdateOne {
	uhuo.mutation.ClearResourceURL()
	return uhuo
}

// SetUserID sets the "user_id" field.
func (uhuo *UserHistoryUpdateOne) SetUserID(u uint64) *UserHistoryUpdateOne {
	uhuo.mutation.SetUserID(u)
	return uhuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (uhuo *UserHistoryUpdateOne) SetOwnerID(id uint64) *UserHistoryUpdateOne {
	uhuo.mutation.SetOwnerID(id)
	return uhuo
}

// SetOwner sets the "owner" edge to the User entity.
func (uhuo *UserHistoryUpdateOne) SetOwner(u *User) *UserHistoryUpdateOne {
	return uhuo.SetOwnerID(u.ID)
}

// Mutation returns the UserHistoryMutation object of the builder.
func (uhuo *UserHistoryUpdateOne) Mutation() *UserHistoryMutation {
	return uhuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uhuo *UserHistoryUpdateOne) ClearOwner() *UserHistoryUpdateOne {
	uhuo.mutation.ClearOwner()
	return uhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uhuo *UserHistoryUpdateOne) Select(field string, fields ...string) *UserHistoryUpdateOne {
	uhuo.fields = append([]string{field}, fields...)
	return uhuo
}

// Save executes the query and returns the updated User_history entity.
func (uhuo *UserHistoryUpdateOne) Save(ctx context.Context) (*User_history, error) {
	var (
		err  error
		node *User_history
	)
	uhuo.defaults()
	if len(uhuo.hooks) == 0 {
		if err = uhuo.check(); err != nil {
			return nil, err
		}
		node, err = uhuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uhuo.check(); err != nil {
				return nil, err
			}
			uhuo.mutation = mutation
			node, err = uhuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uhuo.hooks) - 1; i >= 0; i-- {
			if uhuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uhuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uhuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User_history)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uhuo *UserHistoryUpdateOne) SaveX(ctx context.Context) *User_history {
	node, err := uhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uhuo *UserHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := uhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhuo *UserHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := uhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhuo *UserHistoryUpdateOne) defaults() {
	if _, ok := uhuo.mutation.UpdateTime(); !ok {
		v := user_history.UpdateDefaultUpdateTime()
		uhuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhuo *UserHistoryUpdateOne) check() error {
	if v, ok := uhuo.mutation.GetType(); ok {
		if err := user_history.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User_history.type": %w`, err)}
		}
	}
	if _, ok := uhuo.mutation.OwnerID(); uhuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User_history.owner"`)
	}
	return nil
}

func (uhuo *UserHistoryUpdateOne) sqlSave(ctx context.Context) (_node *User_history, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user_history.Table,
			Columns: user_history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user_history.FieldID,
			},
		},
	}
	id, ok := uhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User_history.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user_history.FieldID)
		for _, f := range fields {
			if !user_history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user_history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhuo.mutation.UpdateTime(); ok {
		_spec.SetField(user_history.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uhuo.mutation.GetType(); ok {
		_spec.SetField(user_history.FieldType, field.TypeEnum, value)
	}
	if value, ok := uhuo.mutation.Name(); ok {
		_spec.SetField(user_history.FieldName, field.TypeString, value)
	}
	if value, ok := uhuo.mutation.ResourceURL(); ok {
		_spec.SetField(user_history.FieldResourceURL, field.TypeString, value)
	}
	if uhuo.mutation.ResourceURLCleared() {
		_spec.ClearField(user_history.FieldResourceURL, field.TypeString)
	}
	if uhuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_history.OwnerTable,
			Columns: []string{user_history.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user_history.OwnerTable,
			Columns: []string{user_history.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User_history{config: uhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user_history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
