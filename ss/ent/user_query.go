// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CSBackendTmp/ent/agora_token"
	"CSBackendTmp/ent/card"
	"CSBackendTmp/ent/collection"
	"CSBackendTmp/ent/contact"
	"CSBackendTmp/ent/creation"
	"CSBackendTmp/ent/csfield"
	"CSBackendTmp/ent/device"
	"CSBackendTmp/ent/feedback"
	"CSBackendTmp/ent/friendship"
	"CSBackendTmp/ent/hidden"
	"CSBackendTmp/ent/invite_code"
	"CSBackendTmp/ent/join"
	"CSBackendTmp/ent/mask"
	"CSBackendTmp/ent/message"
	"CSBackendTmp/ent/nft"
	"CSBackendTmp/ent/predicate"
	"CSBackendTmp/ent/reaction"
	"CSBackendTmp/ent/setting"
	"CSBackendTmp/ent/stream"
	"CSBackendTmp/ent/timedew"
	"CSBackendTmp/ent/user"
	"CSBackendTmp/ent/user_auth"
	"CSBackendTmp/ent/user_history"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	limit               *int
	offset              *int
	unique              *bool
	order               []OrderFunc
	fields              []string
	predicates          []predicate.User
	withUserAuth        *UserAuthQuery
	withCard            *CardQuery
	withMessage         *MessageQuery
	withDevice          *DeviceQuery
	withJoinedCsfield   *CSFieldQuery
	withFriends         *UserQuery
	withHidden          *HiddenQuery
	withHistory         *UserHistoryQuery
	withToken           *AgoraTokenQuery
	withCreation        *CreationQuery
	withContact         *ContactQuery
	withSetting         *SettingQuery
	withNft             *NFTQuery
	withStream          *StreamQuery
	withMask            *MaskQuery
	withTimedew         *TimeDewQuery
	withCollection      *CollectionQuery
	withInviteCode      *InviteCodeQuery
	withFeedback        *FeedbackQuery
	withReactionTimedew *TimeDewQuery
	withJoins           *JoinQuery
	withFriendships     *FriendshipQuery
	withReactions       *ReactionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit adds a limit step to the query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.limit = &limit
	return uq
}

// Offset adds an offset step to the query.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.unique = &unique
	return uq
}

// Order adds an order step to the query.
func (uq *UserQuery) Order(o ...OrderFunc) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryUserAuth chains the current query on the "user_auth" edge.
func (uq *UserQuery) QueryUserAuth() *UserAuthQuery {
	query := &UserAuthQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user_auth.Table, user_auth.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserAuthTable, user.UserAuthColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCard chains the current query on the "card" edge.
func (uq *UserQuery) QueryCard() *CardQuery {
	query := &CardQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CardTable, user.CardColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessage chains the current query on the "message" edge.
func (uq *UserQuery) QueryMessage() *MessageQuery {
	query := &MessageQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MessageTable, user.MessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the "device" edge.
func (uq *UserQuery) QueryDevice() *DeviceQuery {
	query := &DeviceQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DeviceTable, user.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJoinedCsfield chains the current query on the "joined_csfield" edge.
func (uq *UserQuery) QueryJoinedCsfield() *CSFieldQuery {
	query := &CSFieldQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(csfield.Table, csfield.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.JoinedCsfieldTable, user.JoinedCsfieldPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriends chains the current query on the "friends" edge.
func (uq *UserQuery) QueryFriends() *UserQuery {
	query := &UserQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FriendsTable, user.FriendsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHidden chains the current query on the "hidden" edge.
func (uq *UserQuery) QueryHidden() *HiddenQuery {
	query := &HiddenQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hidden.Table, hidden.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HiddenTable, user.HiddenColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHistory chains the current query on the "history" edge.
func (uq *UserQuery) QueryHistory() *UserHistoryQuery {
	query := &UserHistoryQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user_history.Table, user_history.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HistoryTable, user.HistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToken chains the current query on the "token" edge.
func (uq *UserQuery) QueryToken() *AgoraTokenQuery {
	query := &AgoraTokenQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(agora_token.Table, agora_token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TokenTable, user.TokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreation chains the current query on the "creation" edge.
func (uq *UserQuery) QueryCreation() *CreationQuery {
	query := &CreationQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(creation.Table, creation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreationTable, user.CreationColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (uq *UserQuery) QueryContact() *ContactQuery {
	query := &ContactQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ContactTable, user.ContactColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySetting chains the current query on the "setting" edge.
func (uq *UserQuery) QuerySetting() *SettingQuery {
	query := &SettingQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(setting.Table, setting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SettingTable, user.SettingColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNft chains the current query on the "nft" edge.
func (uq *UserQuery) QueryNft() *NFTQuery {
	query := &NFTQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(nft.Table, nft.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NftTable, user.NftColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStream chains the current query on the "stream" edge.
func (uq *UserQuery) QueryStream() *StreamQuery {
	query := &StreamQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(stream.Table, stream.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StreamTable, user.StreamColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMask chains the current query on the "mask" edge.
func (uq *UserQuery) QueryMask() *MaskQuery {
	query := &MaskQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(mask.Table, mask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MaskTable, user.MaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTimedew chains the current query on the "timedew" edge.
func (uq *UserQuery) QueryTimedew() *TimeDewQuery {
	query := &TimeDewQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(timedew.Table, timedew.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TimedewTable, user.TimedewColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCollection chains the current query on the "collection" edge.
func (uq *UserQuery) QueryCollection() *CollectionQuery {
	query := &CollectionQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CollectionTable, user.CollectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInviteCode chains the current query on the "invite_code" edge.
func (uq *UserQuery) QueryInviteCode() *InviteCodeQuery {
	query := &InviteCodeQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invite_code.Table, invite_code.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InviteCodeTable, user.InviteCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedback chains the current query on the "feedback" edge.
func (uq *UserQuery) QueryFeedback() *FeedbackQuery {
	query := &FeedbackQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(feedback.Table, feedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedbackTable, user.FeedbackColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactionTimedew chains the current query on the "reaction_timedew" edge.
func (uq *UserQuery) QueryReactionTimedew() *TimeDewQuery {
	query := &TimeDewQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(timedew.Table, timedew.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.ReactionTimedewTable, user.ReactionTimedewPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJoins chains the current query on the "joins" edge.
func (uq *UserQuery) QueryJoins() *JoinQuery {
	query := &JoinQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(join.Table, join.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.JoinsTable, user.JoinsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendships chains the current query on the "friendships" edge.
func (uq *UserQuery) QueryFriendships() *FriendshipQuery {
	query := &FriendshipQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendshipsTable, user.FriendshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactions chains the current query on the "reactions" edge.
func (uq *UserQuery) QueryReactions() *ReactionQuery {
	query := &ReactionQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(reaction.Table, reaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ReactionsTable, user.ReactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = uq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = uq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:              uq.config,
		limit:               uq.limit,
		offset:              uq.offset,
		order:               append([]OrderFunc{}, uq.order...),
		predicates:          append([]predicate.User{}, uq.predicates...),
		withUserAuth:        uq.withUserAuth.Clone(),
		withCard:            uq.withCard.Clone(),
		withMessage:         uq.withMessage.Clone(),
		withDevice:          uq.withDevice.Clone(),
		withJoinedCsfield:   uq.withJoinedCsfield.Clone(),
		withFriends:         uq.withFriends.Clone(),
		withHidden:          uq.withHidden.Clone(),
		withHistory:         uq.withHistory.Clone(),
		withToken:           uq.withToken.Clone(),
		withCreation:        uq.withCreation.Clone(),
		withContact:         uq.withContact.Clone(),
		withSetting:         uq.withSetting.Clone(),
		withNft:             uq.withNft.Clone(),
		withStream:          uq.withStream.Clone(),
		withMask:            uq.withMask.Clone(),
		withTimedew:         uq.withTimedew.Clone(),
		withCollection:      uq.withCollection.Clone(),
		withInviteCode:      uq.withInviteCode.Clone(),
		withFeedback:        uq.withFeedback.Clone(),
		withReactionTimedew: uq.withReactionTimedew.Clone(),
		withJoins:           uq.withJoins.Clone(),
		withFriendships:     uq.withFriendships.Clone(),
		withReactions:       uq.withReactions.Clone(),
		// clone intermediate query.
		sql:    uq.sql.Clone(),
		path:   uq.path,
		unique: uq.unique,
	}
}

// WithUserAuth tells the query-builder to eager-load the nodes that are connected to
// the "user_auth" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserAuth(opts ...func(*UserAuthQuery)) *UserQuery {
	query := &UserAuthQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserAuth = query
	return uq
}

// WithCard tells the query-builder to eager-load the nodes that are connected to
// the "card" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCard(opts ...func(*CardQuery)) *UserQuery {
	query := &CardQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCard = query
	return uq
}

// WithMessage tells the query-builder to eager-load the nodes that are connected to
// the "message" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMessage(opts ...func(*MessageQuery)) *UserQuery {
	query := &MessageQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withMessage = query
	return uq
}

// WithDevice tells the query-builder to eager-load the nodes that are connected to
// the "device" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithDevice(opts ...func(*DeviceQuery)) *UserQuery {
	query := &DeviceQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withDevice = query
	return uq
}

// WithJoinedCsfield tells the query-builder to eager-load the nodes that are connected to
// the "joined_csfield" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithJoinedCsfield(opts ...func(*CSFieldQuery)) *UserQuery {
	query := &CSFieldQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withJoinedCsfield = query
	return uq
}

// WithFriends tells the query-builder to eager-load the nodes that are connected to
// the "friends" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriends(opts ...func(*UserQuery)) *UserQuery {
	query := &UserQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriends = query
	return uq
}

// WithHidden tells the query-builder to eager-load the nodes that are connected to
// the "hidden" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHidden(opts ...func(*HiddenQuery)) *UserQuery {
	query := &HiddenQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withHidden = query
	return uq
}

// WithHistory tells the query-builder to eager-load the nodes that are connected to
// the "history" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHistory(opts ...func(*UserHistoryQuery)) *UserQuery {
	query := &UserHistoryQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withHistory = query
	return uq
}

// WithToken tells the query-builder to eager-load the nodes that are connected to
// the "token" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithToken(opts ...func(*AgoraTokenQuery)) *UserQuery {
	query := &AgoraTokenQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withToken = query
	return uq
}

// WithCreation tells the query-builder to eager-load the nodes that are connected to
// the "creation" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCreation(opts ...func(*CreationQuery)) *UserQuery {
	query := &CreationQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCreation = query
	return uq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithContact(opts ...func(*ContactQuery)) *UserQuery {
	query := &ContactQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withContact = query
	return uq
}

// WithSetting tells the query-builder to eager-load the nodes that are connected to
// the "setting" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSetting(opts ...func(*SettingQuery)) *UserQuery {
	query := &SettingQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withSetting = query
	return uq
}

// WithNft tells the query-builder to eager-load the nodes that are connected to
// the "nft" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNft(opts ...func(*NFTQuery)) *UserQuery {
	query := &NFTQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withNft = query
	return uq
}

// WithStream tells the query-builder to eager-load the nodes that are connected to
// the "stream" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithStream(opts ...func(*StreamQuery)) *UserQuery {
	query := &StreamQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withStream = query
	return uq
}

// WithMask tells the query-builder to eager-load the nodes that are connected to
// the "mask" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMask(opts ...func(*MaskQuery)) *UserQuery {
	query := &MaskQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withMask = query
	return uq
}

// WithTimedew tells the query-builder to eager-load the nodes that are connected to
// the "timedew" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTimedew(opts ...func(*TimeDewQuery)) *UserQuery {
	query := &TimeDewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withTimedew = query
	return uq
}

// WithCollection tells the query-builder to eager-load the nodes that are connected to
// the "collection" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCollection(opts ...func(*CollectionQuery)) *UserQuery {
	query := &CollectionQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCollection = query
	return uq
}

// WithInviteCode tells the query-builder to eager-load the nodes that are connected to
// the "invite_code" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInviteCode(opts ...func(*InviteCodeQuery)) *UserQuery {
	query := &InviteCodeQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withInviteCode = query
	return uq
}

// WithFeedback tells the query-builder to eager-load the nodes that are connected to
// the "feedback" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFeedback(opts ...func(*FeedbackQuery)) *UserQuery {
	query := &FeedbackQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFeedback = query
	return uq
}

// WithReactionTimedew tells the query-builder to eager-load the nodes that are connected to
// the "reaction_timedew" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReactionTimedew(opts ...func(*TimeDewQuery)) *UserQuery {
	query := &TimeDewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withReactionTimedew = query
	return uq
}

// WithJoins tells the query-builder to eager-load the nodes that are connected to
// the "joins" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithJoins(opts ...func(*JoinQuery)) *UserQuery {
	query := &JoinQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withJoins = query
	return uq
}

// WithFriendships tells the query-builder to eager-load the nodes that are connected to
// the "friendships" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendships(opts ...func(*FriendshipQuery)) *UserQuery {
	query := &FriendshipQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendships = query
	return uq
}

// WithReactions tells the query-builder to eager-load the nodes that are connected to
// the "reactions" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReactions(opts ...func(*ReactionQuery)) *UserQuery {
	query := &ReactionQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withReactions = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	grbuild := &UserGroupBy{config: uq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uq.sqlQuery(ctx), nil
	}
	grbuild.label = user.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreateTime).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.fields = append(uq.fields, fields...)
	selbuild := &UserSelect{UserQuery: uq}
	selbuild.label = user.Label
	selbuild.flds, selbuild.scan = &uq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range uq.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [23]bool{
			uq.withUserAuth != nil,
			uq.withCard != nil,
			uq.withMessage != nil,
			uq.withDevice != nil,
			uq.withJoinedCsfield != nil,
			uq.withFriends != nil,
			uq.withHidden != nil,
			uq.withHistory != nil,
			uq.withToken != nil,
			uq.withCreation != nil,
			uq.withContact != nil,
			uq.withSetting != nil,
			uq.withNft != nil,
			uq.withStream != nil,
			uq.withMask != nil,
			uq.withTimedew != nil,
			uq.withCollection != nil,
			uq.withInviteCode != nil,
			uq.withFeedback != nil,
			uq.withReactionTimedew != nil,
			uq.withJoins != nil,
			uq.withFriendships != nil,
			uq.withReactions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withUserAuth; query != nil {
		if err := uq.loadUserAuth(ctx, query, nodes,
			func(n *User) { n.Edges.UserAuth = []*User_auth{} },
			func(n *User, e *User_auth) { n.Edges.UserAuth = append(n.Edges.UserAuth, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCard; query != nil {
		if err := uq.loadCard(ctx, query, nodes,
			func(n *User) { n.Edges.Card = []*Card{} },
			func(n *User, e *Card) { n.Edges.Card = append(n.Edges.Card, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMessage; query != nil {
		if err := uq.loadMessage(ctx, query, nodes,
			func(n *User) { n.Edges.Message = []*Message{} },
			func(n *User, e *Message) { n.Edges.Message = append(n.Edges.Message, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDevice; query != nil {
		if err := uq.loadDevice(ctx, query, nodes,
			func(n *User) { n.Edges.Device = []*Device{} },
			func(n *User, e *Device) { n.Edges.Device = append(n.Edges.Device, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withJoinedCsfield; query != nil {
		if err := uq.loadJoinedCsfield(ctx, query, nodes,
			func(n *User) { n.Edges.JoinedCsfield = []*CSField{} },
			func(n *User, e *CSField) { n.Edges.JoinedCsfield = append(n.Edges.JoinedCsfield, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriends; query != nil {
		if err := uq.loadFriends(ctx, query, nodes,
			func(n *User) { n.Edges.Friends = []*User{} },
			func(n *User, e *User) { n.Edges.Friends = append(n.Edges.Friends, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHidden; query != nil {
		if err := uq.loadHidden(ctx, query, nodes,
			func(n *User) { n.Edges.Hidden = []*Hidden{} },
			func(n *User, e *Hidden) { n.Edges.Hidden = append(n.Edges.Hidden, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHistory; query != nil {
		if err := uq.loadHistory(ctx, query, nodes,
			func(n *User) { n.Edges.History = []*User_history{} },
			func(n *User, e *User_history) { n.Edges.History = append(n.Edges.History, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withToken; query != nil {
		if err := uq.loadToken(ctx, query, nodes,
			func(n *User) { n.Edges.Token = []*Agora_token{} },
			func(n *User, e *Agora_token) { n.Edges.Token = append(n.Edges.Token, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCreation; query != nil {
		if err := uq.loadCreation(ctx, query, nodes,
			func(n *User) { n.Edges.Creation = []*Creation{} },
			func(n *User, e *Creation) { n.Edges.Creation = append(n.Edges.Creation, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withContact; query != nil {
		if err := uq.loadContact(ctx, query, nodes,
			func(n *User) { n.Edges.Contact = []*Contact{} },
			func(n *User, e *Contact) { n.Edges.Contact = append(n.Edges.Contact, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSetting; query != nil {
		if err := uq.loadSetting(ctx, query, nodes,
			func(n *User) { n.Edges.Setting = []*Setting{} },
			func(n *User, e *Setting) { n.Edges.Setting = append(n.Edges.Setting, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withNft; query != nil {
		if err := uq.loadNft(ctx, query, nodes,
			func(n *User) { n.Edges.Nft = []*NFT{} },
			func(n *User, e *NFT) { n.Edges.Nft = append(n.Edges.Nft, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withStream; query != nil {
		if err := uq.loadStream(ctx, query, nodes,
			func(n *User) { n.Edges.Stream = []*Stream{} },
			func(n *User, e *Stream) { n.Edges.Stream = append(n.Edges.Stream, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMask; query != nil {
		if err := uq.loadMask(ctx, query, nodes,
			func(n *User) { n.Edges.Mask = []*Mask{} },
			func(n *User, e *Mask) { n.Edges.Mask = append(n.Edges.Mask, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTimedew; query != nil {
		if err := uq.loadTimedew(ctx, query, nodes,
			func(n *User) { n.Edges.Timedew = []*TimeDew{} },
			func(n *User, e *TimeDew) { n.Edges.Timedew = append(n.Edges.Timedew, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCollection; query != nil {
		if err := uq.loadCollection(ctx, query, nodes,
			func(n *User) { n.Edges.Collection = []*Collection{} },
			func(n *User, e *Collection) { n.Edges.Collection = append(n.Edges.Collection, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withInviteCode; query != nil {
		if err := uq.loadInviteCode(ctx, query, nodes,
			func(n *User) { n.Edges.InviteCode = []*Invite_Code{} },
			func(n *User, e *Invite_Code) { n.Edges.InviteCode = append(n.Edges.InviteCode, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFeedback; query != nil {
		if err := uq.loadFeedback(ctx, query, nodes,
			func(n *User) { n.Edges.Feedback = []*Feedback{} },
			func(n *User, e *Feedback) { n.Edges.Feedback = append(n.Edges.Feedback, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withReactionTimedew; query != nil {
		if err := uq.loadReactionTimedew(ctx, query, nodes,
			func(n *User) { n.Edges.ReactionTimedew = []*TimeDew{} },
			func(n *User, e *TimeDew) { n.Edges.ReactionTimedew = append(n.Edges.ReactionTimedew, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withJoins; query != nil {
		if err := uq.loadJoins(ctx, query, nodes,
			func(n *User) { n.Edges.Joins = []*Join{} },
			func(n *User, e *Join) { n.Edges.Joins = append(n.Edges.Joins, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendships; query != nil {
		if err := uq.loadFriendships(ctx, query, nodes,
			func(n *User) { n.Edges.Friendships = []*Friendship{} },
			func(n *User, e *Friendship) { n.Edges.Friendships = append(n.Edges.Friendships, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withReactions; query != nil {
		if err := uq.loadReactions(ctx, query, nodes,
			func(n *User) { n.Edges.Reactions = []*Reaction{} },
			func(n *User, e *Reaction) { n.Edges.Reactions = append(n.Edges.Reactions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadUserAuth(ctx context.Context, query *UserAuthQuery, nodes []*User, init func(*User), assign func(*User, *User_auth)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.User_auth(func(s *sql.Selector) {
		s.Where(sql.InValues(user.UserAuthColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCard(ctx context.Context, query *CardQuery, nodes []*User, init func(*User), assign func(*User, *Card)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Card(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CardColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMessage(ctx context.Context, query *MessageQuery, nodes []*User, init func(*User), assign func(*User, *Message)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Message(func(s *sql.Selector) {
		s.Where(sql.InValues(user.MessageColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadDevice(ctx context.Context, query *DeviceQuery, nodes []*User, init func(*User), assign func(*User, *Device)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Device(func(s *sql.Selector) {
		s.Where(sql.InValues(user.DeviceColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadJoinedCsfield(ctx context.Context, query *CSFieldQuery, nodes []*User, init func(*User), assign func(*User, *CSField)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*User)
	nids := make(map[uint64]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.JoinedCsfieldTable)
		s.Join(joinT).On(s.C(csfield.FieldID), joinT.C(user.JoinedCsfieldPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.JoinedCsfieldPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.JoinedCsfieldPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "joined_csfield" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadFriends(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*User)
	nids := make(map[uint64]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.FriendsTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(user.FriendsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.FriendsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.FriendsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "friends" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadHidden(ctx context.Context, query *HiddenQuery, nodes []*User, init func(*User), assign func(*User, *Hidden)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Hidden(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HiddenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHistory(ctx context.Context, query *UserHistoryQuery, nodes []*User, init func(*User), assign func(*User, *User_history)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.User_history(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HistoryColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadToken(ctx context.Context, query *AgoraTokenQuery, nodes []*User, init func(*User), assign func(*User, *Agora_token)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Agora_token(func(s *sql.Selector) {
		s.Where(sql.InValues(user.TokenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCreation(ctx context.Context, query *CreationQuery, nodes []*User, init func(*User), assign func(*User, *Creation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Creation(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CreationColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadContact(ctx context.Context, query *ContactQuery, nodes []*User, init func(*User), assign func(*User, *Contact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.InValues(user.ContactColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSetting(ctx context.Context, query *SettingQuery, nodes []*User, init func(*User), assign func(*User, *Setting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Setting(func(s *sql.Selector) {
		s.Where(sql.InValues(user.SettingColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadNft(ctx context.Context, query *NFTQuery, nodes []*User, init func(*User), assign func(*User, *NFT)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NFT(func(s *sql.Selector) {
		s.Where(sql.InValues(user.NftColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadStream(ctx context.Context, query *StreamQuery, nodes []*User, init func(*User), assign func(*User, *Stream)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Stream(func(s *sql.Selector) {
		s.Where(sql.InValues(user.StreamColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMask(ctx context.Context, query *MaskQuery, nodes []*User, init func(*User), assign func(*User, *Mask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Mask(func(s *sql.Selector) {
		s.Where(sql.InValues(user.MaskColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTimedew(ctx context.Context, query *TimeDewQuery, nodes []*User, init func(*User), assign func(*User, *TimeDew)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.TimeDew(func(s *sql.Selector) {
		s.Where(sql.InValues(user.TimedewColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCollection(ctx context.Context, query *CollectionQuery, nodes []*User, init func(*User), assign func(*User, *Collection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Collection(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CollectionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInviteCode(ctx context.Context, query *InviteCodeQuery, nodes []*User, init func(*User), assign func(*User, *Invite_Code)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Invite_Code(func(s *sql.Selector) {
		s.Where(sql.InValues(user.InviteCodeColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFeedback(ctx context.Context, query *FeedbackQuery, nodes []*User, init func(*User), assign func(*User, *Feedback)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Feedback(func(s *sql.Selector) {
		s.Where(sql.InValues(user.FeedbackColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReactionTimedew(ctx context.Context, query *TimeDewQuery, nodes []*User, init func(*User), assign func(*User, *TimeDew)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*User)
	nids := make(map[uint64]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.ReactionTimedewTable)
		s.Join(joinT).On(s.C(timedew.FieldID), joinT.C(user.ReactionTimedewPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(user.ReactionTimedewPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.ReactionTimedewPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "reaction_timedew" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadJoins(ctx context.Context, query *JoinQuery, nodes []*User, init func(*User), assign func(*User, *Join)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Join(func(s *sql.Selector) {
		s.Where(sql.InValues(user.JoinsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFriendships(ctx context.Context, query *FriendshipQuery, nodes []*User, init func(*User), assign func(*User, *Friendship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Friendship(func(s *sql.Selector) {
		s.Where(sql.InValues(user.FriendshipsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReactions(ctx context.Context, query *ReactionQuery, nodes []*User, init func(*User), assign func(*User, *Reaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.InValues(user.ReactionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.fields
	if len(uq.fields) > 0 {
		_spec.Unique = uq.unique != nil && *uq.unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		},
		From:   uq.sql,
		Unique: true,
	}
	if unique := uq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.unique != nil && *uq.unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the group-by query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ugb.path(ctx)
	if err != nil {
		return err
	}
	ugb.sql = query
	return ugb.sqlScan(ctx, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ugb.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ugb *UserGroupBy) sqlQuery() *sql.Selector {
	selector := ugb.sql.Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ugb.fields)+len(ugb.fns))
		for _, f := range ugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ugb.fields...)...)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	us.sql = us.UserQuery.sqlQuery(ctx)
	return us.sqlScan(ctx, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(us.sql))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		us.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		us.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := us.sql.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
